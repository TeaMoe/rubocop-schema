---
http_interactions:
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop/v1.64.0/docs/modules/ROOT/pages/cops.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '43058'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"5d1c3896cce1b9ec98164d114e208f320c5c1db5e8baeeaeb34668cce92512fa"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 43E4:12D701:138EC8C:14C7D2F:66541A7D
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 27 May 2024 05:30:37 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-fra-eddf8230116-FRA
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1716787838.543080,VS0,VE235
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - 05b8c1775dc8574845d195e613d0632d8fb08935
      Expires:
      - Mon, 27 May 2024 05:35:37 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        = Cops

        In RuboCop lingo the various checks performed on the code are called cops.
        Each cop is responsible for detecting one particular offense. There are several
        cop departments, grouping the cops by class of offense. A short description of
        the different departments is provided below.

        Many of the Style and Layout cops have configuration options, allowing them to
        enforce different coding conventions.

        You can also load xref:extensions.adoc#custom-cops[custom cops].

        Cop-related failures are silenced by default but can be turned on using the
        `--raise-cop-errors` option.

        == Style

        Style cops check for stylistic consistency of your code. Many of the them are
        based on the https://rubystyle.guide[Ruby Style Guide].

        == Layout

        Layout cops inspect your code for consistent use of indentation, alignment,
        and white space.

        == Lint

        Lint cops check for ambiguities and possible errors in your code.

        RuboCop implements, in a portable way, all built-in MRI lint checks
        (`ruby -wc`) and adds a lot of extra lint checks of its own.

        You can run only the Lint cops like this:

        [source,sh]
        ----
        $ rubocop -l
        ----

        The `-l`/`--lint` option can be used together with `--only` to run all the
        enabled Lint cops plus a selection of other cops.

        Disabling Lint cops is generally a bad idea.

        == Metrics

        Metrics cops deal with properties of the source code that can be measured,
        such as class length, method length, etc. Generally speaking, they have a
        configuration parameter called `Max` and when running
        `rubocop --auto-gen-config`, this parameter will be set to the highest value
        found for the inspected code.

        == Naming

        Naming cops check for naming issue of your code, such as method name, constant
        name, file name, etc.

        == Security

        Security cops checks for method calls and constructs which are known to be
        associated with potential security issues.

        == Bundler

        Bundler cops check for style and bad practices in Bundler files, e.g. `Gemfile`.

        == Gemspec

        Gemspec cops check for style and bad practices in gemspec files, e.g. `rubocop.gemspec`.

        == Available cops

        In the following section you find all available cops:

        // START_COP_LIST

        === Department xref:cops_bundler.adoc[Bundler]

        * xref:cops_bundler.adoc#bundlerduplicatedgem[Bundler/DuplicatedGem]
        * xref:cops_bundler.adoc#bundlerduplicatedgroup[Bundler/DuplicatedGroup]
        * xref:cops_bundler.adoc#bundlergemcomment[Bundler/GemComment]
        * xref:cops_bundler.adoc#bundlergemfilename[Bundler/GemFilename]
        * xref:cops_bundler.adoc#bundlergemversion[Bundler/GemVersion]
        * xref:cops_bundler.adoc#bundlerinsecureprotocolsource[Bundler/InsecureProtocolSource]
        * xref:cops_bundler.adoc#bundlerorderedgems[Bundler/OrderedGems]

        === Department xref:cops_gemspec.adoc[Gemspec]

        * xref:cops_gemspec.adoc#gemspecdependencyversion[Gemspec/DependencyVersion]
        * xref:cops_gemspec.adoc#gemspecdeprecatedattributeassignment[Gemspec/DeprecatedAttributeAssignment]
        * xref:cops_gemspec.adoc#gemspecdevelopmentdependencies[Gemspec/DevelopmentDependencies]
        * xref:cops_gemspec.adoc#gemspecduplicatedassignment[Gemspec/DuplicatedAssignment]
        * xref:cops_gemspec.adoc#gemspecordereddependencies[Gemspec/OrderedDependencies]
        * xref:cops_gemspec.adoc#gemspecrequiremfa[Gemspec/RequireMFA]
        * xref:cops_gemspec.adoc#gemspecrequiredrubyversion[Gemspec/RequiredRubyVersion]
        * xref:cops_gemspec.adoc#gemspecrubyversionglobalsusage[Gemspec/RubyVersionGlobalsUsage]

        === Department xref:cops_layout.adoc[Layout]

        * xref:cops_layout.adoc#layoutaccessmodifierindentation[Layout/AccessModifierIndentation]
        * xref:cops_layout.adoc#layoutargumentalignment[Layout/ArgumentAlignment]
        * xref:cops_layout.adoc#layoutarrayalignment[Layout/ArrayAlignment]
        * xref:cops_layout.adoc#layoutassignmentindentation[Layout/AssignmentIndentation]
        * xref:cops_layout.adoc#layoutbeginendalignment[Layout/BeginEndAlignment]
        * xref:cops_layout.adoc#layoutblockalignment[Layout/BlockAlignment]
        * xref:cops_layout.adoc#layoutblockendnewline[Layout/BlockEndNewline]
        * xref:cops_layout.adoc#layoutcaseindentation[Layout/CaseIndentation]
        * xref:cops_layout.adoc#layoutclassstructure[Layout/ClassStructure]
        * xref:cops_layout.adoc#layoutclosingheredocindentation[Layout/ClosingHeredocIndentation]
        * xref:cops_layout.adoc#layoutclosingparenthesisindentation[Layout/ClosingParenthesisIndentation]
        * xref:cops_layout.adoc#layoutcommentindentation[Layout/CommentIndentation]
        * xref:cops_layout.adoc#layoutconditionposition[Layout/ConditionPosition]
        * xref:cops_layout.adoc#layoutdefendalignment[Layout/DefEndAlignment]
        * xref:cops_layout.adoc#layoutdotposition[Layout/DotPosition]
        * xref:cops_layout.adoc#layoutelsealignment[Layout/ElseAlignment]
        * xref:cops_layout.adoc#layoutemptycomment[Layout/EmptyComment]
        * xref:cops_layout.adoc#layoutemptylineafterguardclause[Layout/EmptyLineAfterGuardClause]
        * xref:cops_layout.adoc#layoutemptylineaftermagiccomment[Layout/EmptyLineAfterMagicComment]
        * xref:cops_layout.adoc#layoutemptylineaftermultilinecondition[Layout/EmptyLineAfterMultilineCondition]
        * xref:cops_layout.adoc#layoutemptylinebetweendefs[Layout/EmptyLineBetweenDefs]
        * xref:cops_layout.adoc#layoutemptylines[Layout/EmptyLines]
        * xref:cops_layout.adoc#layoutemptylinesaroundaccessmodifier[Layout/EmptyLinesAroundAccessModifier]
        * xref:cops_layout.adoc#layoutemptylinesaroundarguments[Layout/EmptyLinesAroundArguments]
        * xref:cops_layout.adoc#layoutemptylinesaroundattributeaccessor[Layout/EmptyLinesAroundAttributeAccessor]
        * xref:cops_layout.adoc#layoutemptylinesaroundbeginbody[Layout/EmptyLinesAroundBeginBody]
        * xref:cops_layout.adoc#layoutemptylinesaroundblockbody[Layout/EmptyLinesAroundBlockBody]
        * xref:cops_layout.adoc#layoutemptylinesaroundclassbody[Layout/EmptyLinesAroundClassBody]
        * xref:cops_layout.adoc#layoutemptylinesaroundexceptionhandlingkeywords[Layout/EmptyLinesAroundExceptionHandlingKeywords]
        * xref:cops_layout.adoc#layoutemptylinesaroundmethodbody[Layout/EmptyLinesAroundMethodBody]
        * xref:cops_layout.adoc#layoutemptylinesaroundmodulebody[Layout/EmptyLinesAroundModuleBody]
        * xref:cops_layout.adoc#layoutendalignment[Layout/EndAlignment]
        * xref:cops_layout.adoc#layoutendofline[Layout/EndOfLine]
        * xref:cops_layout.adoc#layoutextraspacing[Layout/ExtraSpacing]
        * xref:cops_layout.adoc#layoutfirstargumentindentation[Layout/FirstArgumentIndentation]
        * xref:cops_layout.adoc#layoutfirstarrayelementindentation[Layout/FirstArrayElementIndentation]
        * xref:cops_layout.adoc#layoutfirstarrayelementlinebreak[Layout/FirstArrayElementLineBreak]
        * xref:cops_layout.adoc#layoutfirsthashelementindentation[Layout/FirstHashElementIndentation]
        * xref:cops_layout.adoc#layoutfirsthashelementlinebreak[Layout/FirstHashElementLineBreak]
        * xref:cops_layout.adoc#layoutfirstmethodargumentlinebreak[Layout/FirstMethodArgumentLineBreak]
        * xref:cops_layout.adoc#layoutfirstmethodparameterlinebreak[Layout/FirstMethodParameterLineBreak]
        * xref:cops_layout.adoc#layoutfirstparameterindentation[Layout/FirstParameterIndentation]
        * xref:cops_layout.adoc#layouthashalignment[Layout/HashAlignment]
        * xref:cops_layout.adoc#layoutheredocargumentclosingparenthesis[Layout/HeredocArgumentClosingParenthesis]
        * xref:cops_layout.adoc#layoutheredocindentation[Layout/HeredocIndentation]
        * xref:cops_layout.adoc#layoutindentationconsistency[Layout/IndentationConsistency]
        * xref:cops_layout.adoc#layoutindentationstyle[Layout/IndentationStyle]
        * xref:cops_layout.adoc#layoutindentationwidth[Layout/IndentationWidth]
        * xref:cops_layout.adoc#layoutinitialindentation[Layout/InitialIndentation]
        * xref:cops_layout.adoc#layoutleadingcommentspace[Layout/LeadingCommentSpace]
        * xref:cops_layout.adoc#layoutleadingemptylines[Layout/LeadingEmptyLines]
        * xref:cops_layout.adoc#layoutlinecontinuationleadingspace[Layout/LineContinuationLeadingSpace]
        * xref:cops_layout.adoc#layoutlinecontinuationspacing[Layout/LineContinuationSpacing]
        * xref:cops_layout.adoc#layoutlineendstringconcatenationindentation[Layout/LineEndStringConcatenationIndentation]
        * xref:cops_layout.adoc#layoutlinelength[Layout/LineLength]
        * xref:cops_layout.adoc#layoutmultilinearraybracelayout[Layout/MultilineArrayBraceLayout]
        * xref:cops_layout.adoc#layoutmultilinearraylinebreaks[Layout/MultilineArrayLineBreaks]
        * xref:cops_layout.adoc#layoutmultilineassignmentlayout[Layout/MultilineAssignmentLayout]
        * xref:cops_layout.adoc#layoutmultilineblocklayout[Layout/MultilineBlockLayout]
        * xref:cops_layout.adoc#layoutmultilinehashbracelayout[Layout/MultilineHashBraceLayout]
        * xref:cops_layout.adoc#layoutmultilinehashkeylinebreaks[Layout/MultilineHashKeyLineBreaks]
        * xref:cops_layout.adoc#layoutmultilinemethodargumentlinebreaks[Layout/MultilineMethodArgumentLineBreaks]
        * xref:cops_layout.adoc#layoutmultilinemethodcallbracelayout[Layout/MultilineMethodCallBraceLayout]
        * xref:cops_layout.adoc#layoutmultilinemethodcallindentation[Layout/MultilineMethodCallIndentation]
        * xref:cops_layout.adoc#layoutmultilinemethoddefinitionbracelayout[Layout/MultilineMethodDefinitionBraceLayout]
        * xref:cops_layout.adoc#layoutmultilinemethodparameterlinebreaks[Layout/MultilineMethodParameterLineBreaks]
        * xref:cops_layout.adoc#layoutmultilineoperationindentation[Layout/MultilineOperationIndentation]
        * xref:cops_layout.adoc#layoutparameteralignment[Layout/ParameterAlignment]
        * xref:cops_layout.adoc#layoutredundantlinebreak[Layout/RedundantLineBreak]
        * xref:cops_layout.adoc#layoutrescueensurealignment[Layout/RescueEnsureAlignment]
        * xref:cops_layout.adoc#layoutsinglelineblockchain[Layout/SingleLineBlockChain]
        * xref:cops_layout.adoc#layoutspaceaftercolon[Layout/SpaceAfterColon]
        * xref:cops_layout.adoc#layoutspaceaftercomma[Layout/SpaceAfterComma]
        * xref:cops_layout.adoc#layoutspaceaftermethodname[Layout/SpaceAfterMethodName]
        * xref:cops_layout.adoc#layoutspaceafternot[Layout/SpaceAfterNot]
        * xref:cops_layout.adoc#layoutspaceaftersemicolon[Layout/SpaceAfterSemicolon]
        * xref:cops_layout.adoc#layoutspacearoundblockparameters[Layout/SpaceAroundBlockParameters]
        * xref:cops_layout.adoc#layoutspacearoundequalsinparameterdefault[Layout/SpaceAroundEqualsInParameterDefault]
        * xref:cops_layout.adoc#layoutspacearoundkeyword[Layout/SpaceAroundKeyword]
        * xref:cops_layout.adoc#layoutspacearoundmethodcalloperator[Layout/SpaceAroundMethodCallOperator]
        * xref:cops_layout.adoc#layoutspacearoundoperators[Layout/SpaceAroundOperators]
        * xref:cops_layout.adoc#layoutspacebeforeblockbraces[Layout/SpaceBeforeBlockBraces]
        * xref:cops_layout.adoc#layoutspacebeforebrackets[Layout/SpaceBeforeBrackets]
        * xref:cops_layout.adoc#layoutspacebeforecomma[Layout/SpaceBeforeComma]
        * xref:cops_layout.adoc#layoutspacebeforecomment[Layout/SpaceBeforeComment]
        * xref:cops_layout.adoc#layoutspacebeforefirstarg[Layout/SpaceBeforeFirstArg]
        * xref:cops_layout.adoc#layoutspacebeforesemicolon[Layout/SpaceBeforeSemicolon]
        * xref:cops_layout.adoc#layoutspaceinlambdaliteral[Layout/SpaceInLambdaLiteral]
        * xref:cops_layout.adoc#layoutspaceinsidearrayliteralbrackets[Layout/SpaceInsideArrayLiteralBrackets]
        * xref:cops_layout.adoc#layoutspaceinsidearraypercentliteral[Layout/SpaceInsideArrayPercentLiteral]
        * xref:cops_layout.adoc#layoutspaceinsideblockbraces[Layout/SpaceInsideBlockBraces]
        * xref:cops_layout.adoc#layoutspaceinsidehashliteralbraces[Layout/SpaceInsideHashLiteralBraces]
        * xref:cops_layout.adoc#layoutspaceinsideparens[Layout/SpaceInsideParens]
        * xref:cops_layout.adoc#layoutspaceinsidepercentliteraldelimiters[Layout/SpaceInsidePercentLiteralDelimiters]
        * xref:cops_layout.adoc#layoutspaceinsiderangeliteral[Layout/SpaceInsideRangeLiteral]
        * xref:cops_layout.adoc#layoutspaceinsidereferencebrackets[Layout/SpaceInsideReferenceBrackets]
        * xref:cops_layout.adoc#layoutspaceinsidestringinterpolation[Layout/SpaceInsideStringInterpolation]
        * xref:cops_layout.adoc#layouttrailingemptylines[Layout/TrailingEmptyLines]
        * xref:cops_layout.adoc#layouttrailingwhitespace[Layout/TrailingWhitespace]

        === Department xref:cops_lint.adoc[Lint]

        * xref:cops_lint.adoc#lintambiguousassignment[Lint/AmbiguousAssignment]
        * xref:cops_lint.adoc#lintambiguousblockassociation[Lint/AmbiguousBlockAssociation]
        * xref:cops_lint.adoc#lintambiguousoperator[Lint/AmbiguousOperator]
        * xref:cops_lint.adoc#lintambiguousoperatorprecedence[Lint/AmbiguousOperatorPrecedence]
        * xref:cops_lint.adoc#lintambiguousrange[Lint/AmbiguousRange]
        * xref:cops_lint.adoc#lintambiguousregexpliteral[Lint/AmbiguousRegexpLiteral]
        * xref:cops_lint.adoc#lintassignmentincondition[Lint/AssignmentInCondition]
        * xref:cops_lint.adoc#lintbigdecimalnew[Lint/BigDecimalNew]
        * xref:cops_lint.adoc#lintbinaryoperatorwithidenticaloperands[Lint/BinaryOperatorWithIdenticalOperands]
        * xref:cops_lint.adoc#lintbooleansymbol[Lint/BooleanSymbol]
        * xref:cops_lint.adoc#lintcircularargumentreference[Lint/CircularArgumentReference]
        * xref:cops_lint.adoc#lintconstantdefinitioninblock[Lint/ConstantDefinitionInBlock]
        * xref:cops_lint.adoc#lintconstantoverwritteninrescue[Lint/ConstantOverwrittenInRescue]
        * xref:cops_lint.adoc#lintconstantresolution[Lint/ConstantResolution]
        * xref:cops_lint.adoc#lintdebugger[Lint/Debugger]
        * xref:cops_lint.adoc#lintdeprecatedclassmethods[Lint/DeprecatedClassMethods]
        * xref:cops_lint.adoc#lintdeprecatedconstants[Lint/DeprecatedConstants]
        * xref:cops_lint.adoc#lintdeprecatedopensslconstant[Lint/DeprecatedOpenSSLConstant]
        * xref:cops_lint.adoc#lintdisjunctiveassignmentinconstructor[Lint/DisjunctiveAssignmentInConstructor]
        * xref:cops_lint.adoc#lintduplicatebranch[Lint/DuplicateBranch]
        * xref:cops_lint.adoc#lintduplicatecasecondition[Lint/DuplicateCaseCondition]
        * xref:cops_lint.adoc#lintduplicateelsifcondition[Lint/DuplicateElsifCondition]
        * xref:cops_lint.adoc#lintduplicatehashkey[Lint/DuplicateHashKey]
        * xref:cops_lint.adoc#lintduplicatemagiccomment[Lint/DuplicateMagicComment]
        * xref:cops_lint.adoc#lintduplicatematchpattern[Lint/DuplicateMatchPattern]
        * xref:cops_lint.adoc#lintduplicatemethods[Lint/DuplicateMethods]
        * xref:cops_lint.adoc#lintduplicateregexpcharacterclasselement[Lint/DuplicateRegexpCharacterClassElement]
        * xref:cops_lint.adoc#lintduplicaterequire[Lint/DuplicateRequire]
        * xref:cops_lint.adoc#lintduplicaterescueexception[Lint/DuplicateRescueException]
        * xref:cops_lint.adoc#linteachwithobjectargument[Lint/EachWithObjectArgument]
        * xref:cops_lint.adoc#lintelselayout[Lint/ElseLayout]
        * xref:cops_lint.adoc#lintemptyblock[Lint/EmptyBlock]
        * xref:cops_lint.adoc#lintemptyclass[Lint/EmptyClass]
        * xref:cops_lint.adoc#lintemptyconditionalbody[Lint/EmptyConditionalBody]
        * xref:cops_lint.adoc#lintemptyensure[Lint/EmptyEnsure]
        * xref:cops_lint.adoc#lintemptyexpression[Lint/EmptyExpression]
        * xref:cops_lint.adoc#lintemptyfile[Lint/EmptyFile]
        * xref:cops_lint.adoc#lintemptyinpattern[Lint/EmptyInPattern]
        * xref:cops_lint.adoc#lintemptyinterpolation[Lint/EmptyInterpolation]
        * xref:cops_lint.adoc#lintemptywhen[Lint/EmptyWhen]
        * xref:cops_lint.adoc#lintensurereturn[Lint/EnsureReturn]
        * xref:cops_lint.adoc#linterbnewarguments[Lint/ErbNewArguments]
        * xref:cops_lint.adoc#lintflipflop[Lint/FlipFlop]
        * xref:cops_lint.adoc#lintfloatcomparison[Lint/FloatComparison]
        * xref:cops_lint.adoc#lintfloatoutofrange[Lint/FloatOutOfRange]
        * xref:cops_lint.adoc#lintformatparametermismatch[Lint/FormatParameterMismatch]
        * xref:cops_lint.adoc#linthashcomparebyidentity[Lint/HashCompareByIdentity]
        * xref:cops_lint.adoc#lintheredocmethodcallposition[Lint/HeredocMethodCallPosition]
        * xref:cops_lint.adoc#lintidentitycomparison[Lint/IdentityComparison]
        * xref:cops_lint.adoc#lintimplicitstringconcatenation[Lint/ImplicitStringConcatenation]
        * xref:cops_lint.adoc#lintincompatibleioselectwithfiberscheduler[Lint/IncompatibleIoSelectWithFiberScheduler]
        * xref:cops_lint.adoc#lintineffectiveaccessmodifier[Lint/IneffectiveAccessModifier]
        * xref:cops_lint.adoc#lintinheritexception[Lint/InheritException]
        * xref:cops_lint.adoc#lintinterpolationcheck[Lint/InterpolationCheck]
        * xref:cops_lint.adoc#lintitwithoutargumentsinblock[Lint/ItWithoutArgumentsInBlock]
        * xref:cops_lint.adoc#lintlambdawithoutliteralblock[Lint/LambdaWithoutLiteralBlock]
        * xref:cops_lint.adoc#lintliteralascondition[Lint/LiteralAsCondition]
        * xref:cops_lint.adoc#lintliteralassignmentincondition[Lint/LiteralAssignmentInCondition]
        * xref:cops_lint.adoc#lintliteralininterpolation[Lint/LiteralInInterpolation]
        * xref:cops_lint.adoc#lintloop[Lint/Loop]
        * xref:cops_lint.adoc#lintmissingcopenabledirective[Lint/MissingCopEnableDirective]
        * xref:cops_lint.adoc#lintmissingsuper[Lint/MissingSuper]
        * xref:cops_lint.adoc#lintmixedcaserange[Lint/MixedCaseRange]
        * xref:cops_lint.adoc#lintmixedregexpcapturetypes[Lint/MixedRegexpCaptureTypes]
        * xref:cops_lint.adoc#lintmultiplecomparison[Lint/MultipleComparison]
        * xref:cops_lint.adoc#lintnestedmethoddefinition[Lint/NestedMethodDefinition]
        * xref:cops_lint.adoc#lintnestedpercentliteral[Lint/NestedPercentLiteral]
        * xref:cops_lint.adoc#lintnextwithoutaccumulator[Lint/NextWithoutAccumulator]
        * xref:cops_lint.adoc#lintnoreturninbeginendblocks[Lint/NoReturnInBeginEndBlocks]
        * xref:cops_lint.adoc#lintnonatomicfileoperation[Lint/NonAtomicFileOperation]
        * xref:cops_lint.adoc#lintnondeterministicrequireorder[Lint/NonDeterministicRequireOrder]
        * xref:cops_lint.adoc#lintnonlocalexitfromiterator[Lint/NonLocalExitFromIterator]
        * xref:cops_lint.adoc#lintnumberconversion[Lint/NumberConversion]
        * xref:cops_lint.adoc#lintnumberedparameterassignment[Lint/NumberedParameterAssignment]
        * xref:cops_lint.adoc#lintorassignmenttoconstant[Lint/OrAssignmentToConstant]
        * xref:cops_lint.adoc#lintorderedmagiccomments[Lint/OrderedMagicComments]
        * xref:cops_lint.adoc#lintoutofrangeregexpref[Lint/OutOfRangeRegexpRef]
        * xref:cops_lint.adoc#lintparenthesesasgroupedexpression[Lint/ParenthesesAsGroupedExpression]
        * xref:cops_lint.adoc#lintpercentstringarray[Lint/PercentStringArray]
        * xref:cops_lint.adoc#lintpercentsymbolarray[Lint/PercentSymbolArray]
        * xref:cops_lint.adoc#lintraiseexception[Lint/RaiseException]
        * xref:cops_lint.adoc#lintrandone[Lint/RandOne]
        * xref:cops_lint.adoc#lintredundantcopdisabledirective[Lint/RedundantCopDisableDirective]
        * xref:cops_lint.adoc#lintredundantcopenabledirective[Lint/RedundantCopEnableDirective]
        * xref:cops_lint.adoc#lintredundantdirglobsort[Lint/RedundantDirGlobSort]
        * xref:cops_lint.adoc#lintredundantregexpquantifiers[Lint/RedundantRegexpQuantifiers]
        * xref:cops_lint.adoc#lintredundantrequirestatement[Lint/RedundantRequireStatement]
        * xref:cops_lint.adoc#lintredundantsafenavigation[Lint/RedundantSafeNavigation]
        * xref:cops_lint.adoc#lintredundantsplatexpansion[Lint/RedundantSplatExpansion]
        * xref:cops_lint.adoc#lintredundantstringcoercion[Lint/RedundantStringCoercion]
        * xref:cops_lint.adoc#lintredundantwithindex[Lint/RedundantWithIndex]
        * xref:cops_lint.adoc#lintredundantwithobject[Lint/RedundantWithObject]
        * xref:cops_lint.adoc#lintrefinementimportmethods[Lint/RefinementImportMethods]
        * xref:cops_lint.adoc#lintregexpascondition[Lint/RegexpAsCondition]
        * xref:cops_lint.adoc#lintrequireparentheses[Lint/RequireParentheses]
        * xref:cops_lint.adoc#lintrequirerangeparentheses[Lint/RequireRangeParentheses]
        * xref:cops_lint.adoc#lintrequirerelativeselfpath[Lint/RequireRelativeSelfPath]
        * xref:cops_lint.adoc#lintrescueexception[Lint/RescueException]
        * xref:cops_lint.adoc#lintrescuetype[Lint/RescueType]
        * xref:cops_lint.adoc#lintreturninvoidcontext[Lint/ReturnInVoidContext]
        * xref:cops_lint.adoc#lintsafenavigationchain[Lint/SafeNavigationChain]
        * xref:cops_lint.adoc#lintsafenavigationconsistency[Lint/SafeNavigationConsistency]
        * xref:cops_lint.adoc#lintsafenavigationwithempty[Lint/SafeNavigationWithEmpty]
        * xref:cops_lint.adoc#lintscriptpermission[Lint/ScriptPermission]
        * xref:cops_lint.adoc#lintselfassignment[Lint/SelfAssignment]
        * xref:cops_lint.adoc#lintsendwithmixinargument[Lint/SendWithMixinArgument]
        * xref:cops_lint.adoc#lintshadowedargument[Lint/ShadowedArgument]
        * xref:cops_lint.adoc#lintshadowedexception[Lint/ShadowedException]
        * xref:cops_lint.adoc#lintshadowingouterlocalvariable[Lint/ShadowingOuterLocalVariable]
        * xref:cops_lint.adoc#lintstructnewoverride[Lint/StructNewOverride]
        * xref:cops_lint.adoc#lintsuppressedexception[Lint/SuppressedException]
        * xref:cops_lint.adoc#lintsymbolconversion[Lint/SymbolConversion]
        * xref:cops_lint.adoc#lintsyntax[Lint/Syntax]
        * xref:cops_lint.adoc#linttoenumarguments[Lint/ToEnumArguments]
        * xref:cops_lint.adoc#linttojson[Lint/ToJSON]
        * xref:cops_lint.adoc#linttoplevelreturnwithargument[Lint/TopLevelReturnWithArgument]
        * xref:cops_lint.adoc#linttrailingcommainattributedeclaration[Lint/TrailingCommaInAttributeDeclaration]
        * xref:cops_lint.adoc#linttriplequotes[Lint/TripleQuotes]
        * xref:cops_lint.adoc#lintunderscoreprefixedvariablename[Lint/UnderscorePrefixedVariableName]
        * xref:cops_lint.adoc#lintunexpectedblockarity[Lint/UnexpectedBlockArity]
        * xref:cops_lint.adoc#lintunifiedinteger[Lint/UnifiedInteger]
        * xref:cops_lint.adoc#lintunmodifiedreduceaccumulator[Lint/UnmodifiedReduceAccumulator]
        * xref:cops_lint.adoc#lintunreachablecode[Lint/UnreachableCode]
        * xref:cops_lint.adoc#lintunreachableloop[Lint/UnreachableLoop]
        * xref:cops_lint.adoc#lintunusedblockargument[Lint/UnusedBlockArgument]
        * xref:cops_lint.adoc#lintunusedmethodargument[Lint/UnusedMethodArgument]
        * xref:cops_lint.adoc#linturiescapeunescape[Lint/UriEscapeUnescape]
        * xref:cops_lint.adoc#linturiregexp[Lint/UriRegexp]
        * xref:cops_lint.adoc#lintuselessaccessmodifier[Lint/UselessAccessModifier]
        * xref:cops_lint.adoc#lintuselessassignment[Lint/UselessAssignment]
        * xref:cops_lint.adoc#lintuselesselsewithoutrescue[Lint/UselessElseWithoutRescue]
        * xref:cops_lint.adoc#lintuselessmethoddefinition[Lint/UselessMethodDefinition]
        * xref:cops_lint.adoc#lintuselessrescue[Lint/UselessRescue]
        * xref:cops_lint.adoc#lintuselessruby2keywords[Lint/UselessRuby2Keywords]
        * xref:cops_lint.adoc#lintuselesssettercall[Lint/UselessSetterCall]
        * xref:cops_lint.adoc#lintuselesstimes[Lint/UselessTimes]
        * xref:cops_lint.adoc#lintvoid[Lint/Void]

        === Department xref:cops_metrics.adoc[Metrics]

        * xref:cops_metrics.adoc#metricsabcsize[Metrics/AbcSize]
        * xref:cops_metrics.adoc#metricsblocklength[Metrics/BlockLength]
        * xref:cops_metrics.adoc#metricsblocknesting[Metrics/BlockNesting]
        * xref:cops_metrics.adoc#metricsclasslength[Metrics/ClassLength]
        * xref:cops_metrics.adoc#metricscollectionliterallength[Metrics/CollectionLiteralLength]
        * xref:cops_metrics.adoc#metricscyclomaticcomplexity[Metrics/CyclomaticComplexity]
        * xref:cops_metrics.adoc#metricsmethodlength[Metrics/MethodLength]
        * xref:cops_metrics.adoc#metricsmodulelength[Metrics/ModuleLength]
        * xref:cops_metrics.adoc#metricsparameterlists[Metrics/ParameterLists]
        * xref:cops_metrics.adoc#metricsperceivedcomplexity[Metrics/PerceivedComplexity]

        === Department xref:cops_migration.adoc[Migration]

        * xref:cops_migration.adoc#migrationdepartmentname[Migration/DepartmentName]

        === Department xref:cops_naming.adoc[Naming]

        * xref:cops_naming.adoc#namingaccessormethodname[Naming/AccessorMethodName]
        * xref:cops_naming.adoc#namingasciiidentifiers[Naming/AsciiIdentifiers]
        * xref:cops_naming.adoc#namingbinaryoperatorparametername[Naming/BinaryOperatorParameterName]
        * xref:cops_naming.adoc#namingblockforwarding[Naming/BlockForwarding]
        * xref:cops_naming.adoc#namingblockparametername[Naming/BlockParameterName]
        * xref:cops_naming.adoc#namingclassandmodulecamelcase[Naming/ClassAndModuleCamelCase]
        * xref:cops_naming.adoc#namingconstantname[Naming/ConstantName]
        * xref:cops_naming.adoc#namingfilename[Naming/FileName]
        * xref:cops_naming.adoc#namingheredocdelimitercase[Naming/HeredocDelimiterCase]
        * xref:cops_naming.adoc#namingheredocdelimiternaming[Naming/HeredocDelimiterNaming]
        * xref:cops_naming.adoc#naminginclusivelanguage[Naming/InclusiveLanguage]
        * xref:cops_naming.adoc#namingmemoizedinstancevariablename[Naming/MemoizedInstanceVariableName]
        * xref:cops_naming.adoc#namingmethodname[Naming/MethodName]
        * xref:cops_naming.adoc#namingmethodparametername[Naming/MethodParameterName]
        * xref:cops_naming.adoc#namingpredicatename[Naming/PredicateName]
        * xref:cops_naming.adoc#namingrescuedexceptionsvariablename[Naming/RescuedExceptionsVariableName]
        * xref:cops_naming.adoc#namingvariablename[Naming/VariableName]
        * xref:cops_naming.adoc#namingvariablenumber[Naming/VariableNumber]

        === Department xref:cops_security.adoc[Security]

        * xref:cops_security.adoc#securitycompoundhash[Security/CompoundHash]
        * xref:cops_security.adoc#securityeval[Security/Eval]
        * xref:cops_security.adoc#securityiomethods[Security/IoMethods]
        * xref:cops_security.adoc#securityjsonload[Security/JSONLoad]
        * xref:cops_security.adoc#securitymarshalload[Security/MarshalLoad]
        * xref:cops_security.adoc#securityopen[Security/Open]
        * xref:cops_security.adoc#securityyamlload[Security/YAMLLoad]

        === Department xref:cops_style.adoc[Style]

        * xref:cops_style.adoc#styleaccessmodifierdeclarations[Style/AccessModifierDeclarations]
        * xref:cops_style.adoc#styleaccessorgrouping[Style/AccessorGrouping]
        * xref:cops_style.adoc#stylealias[Style/Alias]
        * xref:cops_style.adoc#styleandor[Style/AndOr]
        * xref:cops_style.adoc#styleargumentsforwarding[Style/ArgumentsForwarding]
        * xref:cops_style.adoc#stylearraycoercion[Style/ArrayCoercion]
        * xref:cops_style.adoc#stylearrayfirstlast[Style/ArrayFirstLast]
        * xref:cops_style.adoc#stylearrayintersect[Style/ArrayIntersect]
        * xref:cops_style.adoc#stylearrayjoin[Style/ArrayJoin]
        * xref:cops_style.adoc#styleasciicomments[Style/AsciiComments]
        * xref:cops_style.adoc#styleattr[Style/Attr]
        * xref:cops_style.adoc#styleautoresourcecleanup[Style/AutoResourceCleanup]
        * xref:cops_style.adoc#stylebarepercentliterals[Style/BarePercentLiterals]
        * xref:cops_style.adoc#stylebeginblock[Style/BeginBlock]
        * xref:cops_style.adoc#stylebisectedattraccessor[Style/BisectedAttrAccessor]
        * xref:cops_style.adoc#styleblockcomments[Style/BlockComments]
        * xref:cops_style.adoc#styleblockdelimiters[Style/BlockDelimiters]
        * xref:cops_style.adoc#stylecaseequality[Style/CaseEquality]
        * xref:cops_style.adoc#stylecaselikeif[Style/CaseLikeIf]
        * xref:cops_style.adoc#stylecharacterliteral[Style/CharacterLiteral]
        * xref:cops_style.adoc#styleclassandmodulechildren[Style/ClassAndModuleChildren]
        * xref:cops_style.adoc#styleclasscheck[Style/ClassCheck]
        * xref:cops_style.adoc#styleclassequalitycomparison[Style/ClassEqualityComparison]
        * xref:cops_style.adoc#styleclassmethods[Style/ClassMethods]
        * xref:cops_style.adoc#styleclassmethodsdefinitions[Style/ClassMethodsDefinitions]
        * xref:cops_style.adoc#styleclassvars[Style/ClassVars]
        * xref:cops_style.adoc#stylecollectioncompact[Style/CollectionCompact]
        * xref:cops_style.adoc#stylecollectionmethods[Style/CollectionMethods]
        * xref:cops_style.adoc#stylecolonmethodcall[Style/ColonMethodCall]
        * xref:cops_style.adoc#stylecolonmethoddefinition[Style/ColonMethodDefinition]
        * xref:cops_style.adoc#stylecombinableloops[Style/CombinableLoops]
        * xref:cops_style.adoc#stylecommandliteral[Style/CommandLiteral]
        * xref:cops_style.adoc#stylecommentannotation[Style/CommentAnnotation]
        * xref:cops_style.adoc#stylecommentedkeyword[Style/CommentedKeyword]
        * xref:cops_style.adoc#stylecomparableclamp[Style/ComparableClamp]
        * xref:cops_style.adoc#styleconcatarrayliterals[Style/ConcatArrayLiterals]
        * xref:cops_style.adoc#styleconditionalassignment[Style/ConditionalAssignment]
        * xref:cops_style.adoc#styleconstantvisibility[Style/ConstantVisibility]
        * xref:cops_style.adoc#stylecopyright[Style/Copyright]
        * xref:cops_style.adoc#styledatainheritance[Style/DataInheritance]
        * xref:cops_style.adoc#styledatetime[Style/DateTime]
        * xref:cops_style.adoc#styledefwithparentheses[Style/DefWithParentheses]
        * xref:cops_style.adoc#styledir[Style/Dir]
        * xref:cops_style.adoc#styledirempty[Style/DirEmpty]
        * xref:cops_style.adoc#styledisablecopswithinsourcecodedirective[Style/DisableCopsWithinSourceCodeDirective]
        * xref:cops_style.adoc#styledocumentdynamicevaldefinition[Style/DocumentDynamicEvalDefinition]
        * xref:cops_style.adoc#styledocumentation[Style/Documentation]
        * xref:cops_style.adoc#styledocumentationmethod[Style/DocumentationMethod]
        * xref:cops_style.adoc#styledoublecopdisabledirective[Style/DoubleCopDisableDirective]
        * xref:cops_style.adoc#styledoublenegation[Style/DoubleNegation]
        * xref:cops_style.adoc#styleeachforsimpleloop[Style/EachForSimpleLoop]
        * xref:cops_style.adoc#styleeachwithobject[Style/EachWithObject]
        * xref:cops_style.adoc#styleemptyblockparameter[Style/EmptyBlockParameter]
        * xref:cops_style.adoc#styleemptycasecondition[Style/EmptyCaseCondition]
        * xref:cops_style.adoc#styleemptyelse[Style/EmptyElse]
        * xref:cops_style.adoc#styleemptyheredoc[Style/EmptyHeredoc]
        * xref:cops_style.adoc#styleemptylambdaparameter[Style/EmptyLambdaParameter]
        * xref:cops_style.adoc#styleemptyliteral[Style/EmptyLiteral]
        * xref:cops_style.adoc#styleemptymethod[Style/EmptyMethod]
        * xref:cops_style.adoc#styleencoding[Style/Encoding]
        * xref:cops_style.adoc#styleendblock[Style/EndBlock]
        * xref:cops_style.adoc#styleendlessmethod[Style/EndlessMethod]
        * xref:cops_style.adoc#styleenvhome[Style/EnvHome]
        * xref:cops_style.adoc#styleevalwithlocation[Style/EvalWithLocation]
        * xref:cops_style.adoc#styleevenodd[Style/EvenOdd]
        * xref:cops_style.adoc#styleexactregexpmatch[Style/ExactRegexpMatch]
        * xref:cops_style.adoc#styleexpandpatharguments[Style/ExpandPathArguments]
        * xref:cops_style.adoc#styleexplicitblockargument[Style/ExplicitBlockArgument]
        * xref:cops_style.adoc#styleexponentialnotation[Style/ExponentialNotation]
        * xref:cops_style.adoc#stylefetchenvvar[Style/FetchEnvVar]
        * xref:cops_style.adoc#stylefileempty[Style/FileEmpty]
        * xref:cops_style.adoc#stylefileread[Style/FileRead]
        * xref:cops_style.adoc#stylefilewrite[Style/FileWrite]
        * xref:cops_style.adoc#stylefloatdivision[Style/FloatDivision]
        * xref:cops_style.adoc#stylefor[Style/For]
        * xref:cops_style.adoc#styleformatstring[Style/FormatString]
        * xref:cops_style.adoc#styleformatstringtoken[Style/FormatStringToken]
        * xref:cops_style.adoc#stylefrozenstringliteralcomment[Style/FrozenStringLiteralComment]
        * xref:cops_style.adoc#styleglobalstdstream[Style/GlobalStdStream]
        * xref:cops_style.adoc#styleglobalvars[Style/GlobalVars]
        * xref:cops_style.adoc#styleguardclause[Style/GuardClause]
        * xref:cops_style.adoc#stylehashaslastarrayitem[Style/HashAsLastArrayItem]
        * xref:cops_style.adoc#stylehashconversion[Style/HashConversion]
        * xref:cops_style.adoc#stylehasheachmethods[Style/HashEachMethods]
        * xref:cops_style.adoc#stylehashexcept[Style/HashExcept]
        * xref:cops_style.adoc#stylehashlikecase[Style/HashLikeCase]
        * xref:cops_style.adoc#stylehashsyntax[Style/HashSyntax]
        * xref:cops_style.adoc#stylehashtransformkeys[Style/HashTransformKeys]
        * xref:cops_style.adoc#stylehashtransformvalues[Style/HashTransformValues]
        * xref:cops_style.adoc#styleidenticalconditionalbranches[Style/IdenticalConditionalBranches]
        * xref:cops_style.adoc#styleifinsideelse[Style/IfInsideElse]
        * xref:cops_style.adoc#styleifunlessmodifier[Style/IfUnlessModifier]
        * xref:cops_style.adoc#styleifunlessmodifierofifunless[Style/IfUnlessModifierOfIfUnless]
        * xref:cops_style.adoc#styleifwithbooleanliteralbranches[Style/IfWithBooleanLiteralBranches]
        * xref:cops_style.adoc#styleifwithsemicolon[Style/IfWithSemicolon]
        * xref:cops_style.adoc#styleimplicitruntimeerror[Style/ImplicitRuntimeError]
        * xref:cops_style.adoc#styleinpatternthen[Style/InPatternThen]
        * xref:cops_style.adoc#styleinfiniteloop[Style/InfiniteLoop]
        * xref:cops_style.adoc#styleinlinecomment[Style/InlineComment]
        * xref:cops_style.adoc#styleinversemethods[Style/InverseMethods]
        * xref:cops_style.adoc#styleinvertibleunlesscondition[Style/InvertibleUnlessCondition]
        * xref:cops_style.adoc#styleipaddresses[Style/IpAddresses]
        * xref:cops_style.adoc#stylekeywordparametersorder[Style/KeywordParametersOrder]
        * xref:cops_style.adoc#stylelambda[Style/Lambda]
        * xref:cops_style.adoc#stylelambdacall[Style/LambdaCall]
        * xref:cops_style.adoc#stylelineendconcatenation[Style/LineEndConcatenation]
        * xref:cops_style.adoc#stylemagiccommentformat[Style/MagicCommentFormat]
        * xref:cops_style.adoc#stylemapcompactwithconditionalblock[Style/MapCompactWithConditionalBlock]
        * xref:cops_style.adoc#stylemapintoarray[Style/MapIntoArray]
        * xref:cops_style.adoc#stylemaptohash[Style/MapToHash]
        * xref:cops_style.adoc#stylemaptoset[Style/MapToSet]
        * xref:cops_style.adoc#stylemethodcallwithargsparentheses[Style/MethodCallWithArgsParentheses]
        * xref:cops_style.adoc#stylemethodcallwithoutargsparentheses[Style/MethodCallWithoutArgsParentheses]
        * xref:cops_style.adoc#stylemethodcalledondoendblock[Style/MethodCalledOnDoEndBlock]
        * xref:cops_style.adoc#stylemethoddefparentheses[Style/MethodDefParentheses]
        * xref:cops_style.adoc#styleminmax[Style/MinMax]
        * xref:cops_style.adoc#styleminmaxcomparison[Style/MinMaxComparison]
        * xref:cops_style.adoc#stylemissingelse[Style/MissingElse]
        * xref:cops_style.adoc#stylemissingrespondtomissing[Style/MissingRespondToMissing]
        * xref:cops_style.adoc#stylemixingrouping[Style/MixinGrouping]
        * xref:cops_style.adoc#stylemixinusage[Style/MixinUsage]
        * xref:cops_style.adoc#stylemodulefunction[Style/ModuleFunction]
        * xref:cops_style.adoc#stylemultilineblockchain[Style/MultilineBlockChain]
        * xref:cops_style.adoc#stylemultilineifmodifier[Style/MultilineIfModifier]
        * xref:cops_style.adoc#stylemultilineifthen[Style/MultilineIfThen]
        * xref:cops_style.adoc#stylemultilineinpatternthen[Style/MultilineInPatternThen]
        * xref:cops_style.adoc#stylemultilinememoization[Style/MultilineMemoization]
        * xref:cops_style.adoc#stylemultilinemethodsignature[Style/MultilineMethodSignature]
        * xref:cops_style.adoc#stylemultilineternaryoperator[Style/MultilineTernaryOperator]
        * xref:cops_style.adoc#stylemultilinewhenthen[Style/MultilineWhenThen]
        * xref:cops_style.adoc#stylemultiplecomparison[Style/MultipleComparison]
        * xref:cops_style.adoc#stylemutableconstant[Style/MutableConstant]
        * xref:cops_style.adoc#stylenegatedif[Style/NegatedIf]
        * xref:cops_style.adoc#stylenegatedifelsecondition[Style/NegatedIfElseCondition]
        * xref:cops_style.adoc#stylenegatedunless[Style/NegatedUnless]
        * xref:cops_style.adoc#stylenegatedwhile[Style/NegatedWhile]
        * xref:cops_style.adoc#stylenestedfiledirname[Style/NestedFileDirname]
        * xref:cops_style.adoc#stylenestedmodifier[Style/NestedModifier]
        * xref:cops_style.adoc#stylenestedparenthesizedcalls[Style/NestedParenthesizedCalls]
        * xref:cops_style.adoc#stylenestedternaryoperator[Style/NestedTernaryOperator]
        * xref:cops_style.adoc#stylenext[Style/Next]
        * xref:cops_style.adoc#stylenilcomparison[Style/NilComparison]
        * xref:cops_style.adoc#stylenillambda[Style/NilLambda]
        * xref:cops_style.adoc#stylenonnilcheck[Style/NonNilCheck]
        * xref:cops_style.adoc#stylenot[Style/Not]
        * xref:cops_style.adoc#stylenumberedparameters[Style/NumberedParameters]
        * xref:cops_style.adoc#stylenumberedparameterslimit[Style/NumberedParametersLimit]
        * xref:cops_style.adoc#stylenumericliteralprefix[Style/NumericLiteralPrefix]
        * xref:cops_style.adoc#stylenumericliterals[Style/NumericLiterals]
        * xref:cops_style.adoc#stylenumericpredicate[Style/NumericPredicate]
        * xref:cops_style.adoc#styleobjectthen[Style/ObjectThen]
        * xref:cops_style.adoc#styleonelineconditional[Style/OneLineConditional]
        * xref:cops_style.adoc#styleopenstructuse[Style/OpenStructUse]
        * xref:cops_style.adoc#styleoperatormethodcall[Style/OperatorMethodCall]
        * xref:cops_style.adoc#styleoptionhash[Style/OptionHash]
        * xref:cops_style.adoc#styleoptionalarguments[Style/OptionalArguments]
        * xref:cops_style.adoc#styleoptionalbooleanparameter[Style/OptionalBooleanParameter]
        * xref:cops_style.adoc#styleorassignment[Style/OrAssignment]
        * xref:cops_style.adoc#styleparallelassignment[Style/ParallelAssignment]
        * xref:cops_style.adoc#styleparenthesesaroundcondition[Style/ParenthesesAroundCondition]
        * xref:cops_style.adoc#stylepercentliteraldelimiters[Style/PercentLiteralDelimiters]
        * xref:cops_style.adoc#stylepercentqliterals[Style/PercentQLiterals]
        * xref:cops_style.adoc#styleperlbackrefs[Style/PerlBackrefs]
        * xref:cops_style.adoc#stylepreferredhashmethods[Style/PreferredHashMethods]
        * xref:cops_style.adoc#styleproc[Style/Proc]
        * xref:cops_style.adoc#stylequotedsymbols[Style/QuotedSymbols]
        * xref:cops_style.adoc#styleraiseargs[Style/RaiseArgs]
        * xref:cops_style.adoc#stylerandomwithoffset[Style/RandomWithOffset]
        * xref:cops_style.adoc#styleredundantargument[Style/RedundantArgument]
        * xref:cops_style.adoc#styleredundantarrayconstructor[Style/RedundantArrayConstructor]
        * xref:cops_style.adoc#styleredundantassignment[Style/RedundantAssignment]
        * xref:cops_style.adoc#styleredundantbegin[Style/RedundantBegin]
        * xref:cops_style.adoc#styleredundantcapitalw[Style/RedundantCapitalW]
        * xref:cops_style.adoc#styleredundantcondition[Style/RedundantCondition]
        * xref:cops_style.adoc#styleredundantconditional[Style/RedundantConditional]
        * xref:cops_style.adoc#styleredundantconstantbase[Style/RedundantConstantBase]
        * xref:cops_style.adoc#styleredundantcurrentdirectoryinpath[Style/RedundantCurrentDirectoryInPath]
        * xref:cops_style.adoc#styleredundantdoublesplathashbraces[Style/RedundantDoubleSplatHashBraces]
        * xref:cops_style.adoc#styleredundanteach[Style/RedundantEach]
        * xref:cops_style.adoc#styleredundantexception[Style/RedundantException]
        * xref:cops_style.adoc#styleredundantfetchblock[Style/RedundantFetchBlock]
        * xref:cops_style.adoc#styleredundantfileextensioninrequire[Style/RedundantFileExtensionInRequire]
        * xref:cops_style.adoc#styleredundantfilterchain[Style/RedundantFilterChain]
        * xref:cops_style.adoc#styleredundantfreeze[Style/RedundantFreeze]
        * xref:cops_style.adoc#styleredundantheredocdelimiterquotes[Style/RedundantHeredocDelimiterQuotes]
        * xref:cops_style.adoc#styleredundantinitialize[Style/RedundantInitialize]
        * xref:cops_style.adoc#styleredundantinterpolation[Style/RedundantInterpolation]
        * xref:cops_style.adoc#styleredundantlinecontinuation[Style/RedundantLineContinuation]
        * xref:cops_style.adoc#styleredundantparentheses[Style/RedundantParentheses]
        * xref:cops_style.adoc#styleredundantpercentq[Style/RedundantPercentQ]
        * xref:cops_style.adoc#styleredundantregexpargument[Style/RedundantRegexpArgument]
        * xref:cops_style.adoc#styleredundantregexpcharacterclass[Style/RedundantRegexpCharacterClass]
        * xref:cops_style.adoc#styleredundantregexpconstructor[Style/RedundantRegexpConstructor]
        * xref:cops_style.adoc#styleredundantregexpescape[Style/RedundantRegexpEscape]
        * xref:cops_style.adoc#styleredundantreturn[Style/RedundantReturn]
        * xref:cops_style.adoc#styleredundantself[Style/RedundantSelf]
        * xref:cops_style.adoc#styleredundantselfassignment[Style/RedundantSelfAssignment]
        * xref:cops_style.adoc#styleredundantselfassignmentbranch[Style/RedundantSelfAssignmentBranch]
        * xref:cops_style.adoc#styleredundantsort[Style/RedundantSort]
        * xref:cops_style.adoc#styleredundantsortby[Style/RedundantSortBy]
        * xref:cops_style.adoc#styleredundantstringescape[Style/RedundantStringEscape]
        * xref:cops_style.adoc#styleregexpliteral[Style/RegexpLiteral]
        * xref:cops_style.adoc#stylerequireorder[Style/RequireOrder]
        * xref:cops_style.adoc#stylerescuemodifier[Style/RescueModifier]
        * xref:cops_style.adoc#stylerescuestandarderror[Style/RescueStandardError]
        * xref:cops_style.adoc#stylereturnnil[Style/ReturnNil]
        * xref:cops_style.adoc#stylereturnnilinpredicatemethoddefinition[Style/ReturnNilInPredicateMethodDefinition]
        * xref:cops_style.adoc#stylesafenavigation[Style/SafeNavigation]
        * xref:cops_style.adoc#stylesample[Style/Sample]
        * xref:cops_style.adoc#styleselectbyregexp[Style/SelectByRegexp]
        * xref:cops_style.adoc#styleselfassignment[Style/SelfAssignment]
        * xref:cops_style.adoc#stylesemicolon[Style/Semicolon]
        * xref:cops_style.adoc#stylesend[Style/Send]
        * xref:cops_style.adoc#stylesendwithliteralmethodname[Style/SendWithLiteralMethodName]
        * xref:cops_style.adoc#stylesignalexception[Style/SignalException]
        * xref:cops_style.adoc#stylesingleargumentdig[Style/SingleArgumentDig]
        * xref:cops_style.adoc#stylesinglelineblockparams[Style/SingleLineBlockParams]
        * xref:cops_style.adoc#stylesinglelinedoendblock[Style/SingleLineDoEndBlock]
        * xref:cops_style.adoc#stylesinglelinemethods[Style/SingleLineMethods]
        * xref:cops_style.adoc#styleslicingwithrange[Style/SlicingWithRange]
        * xref:cops_style.adoc#stylesolenestedconditional[Style/SoleNestedConditional]
        * xref:cops_style.adoc#stylespecialglobalvars[Style/SpecialGlobalVars]
        * xref:cops_style.adoc#stylestabbylambdaparentheses[Style/StabbyLambdaParentheses]
        * xref:cops_style.adoc#stylestaticclass[Style/StaticClass]
        * xref:cops_style.adoc#stylestderrputs[Style/StderrPuts]
        * xref:cops_style.adoc#stylestringchars[Style/StringChars]
        * xref:cops_style.adoc#stylestringconcatenation[Style/StringConcatenation]
        * xref:cops_style.adoc#stylestringhashkeys[Style/StringHashKeys]
        * xref:cops_style.adoc#stylestringliterals[Style/StringLiterals]
        * xref:cops_style.adoc#stylestringliteralsininterpolation[Style/StringLiteralsInInterpolation]
        * xref:cops_style.adoc#stylestringmethods[Style/StringMethods]
        * xref:cops_style.adoc#stylestrip[Style/Strip]
        * xref:cops_style.adoc#stylestructinheritance[Style/StructInheritance]
        * xref:cops_style.adoc#stylesuperarguments[Style/SuperArguments]
        * xref:cops_style.adoc#stylesuperwithargsparentheses[Style/SuperWithArgsParentheses]
        * xref:cops_style.adoc#styleswapvalues[Style/SwapValues]
        * xref:cops_style.adoc#stylesymbolarray[Style/SymbolArray]
        * xref:cops_style.adoc#stylesymbolliteral[Style/SymbolLiteral]
        * xref:cops_style.adoc#stylesymbolproc[Style/SymbolProc]
        * xref:cops_style.adoc#styleternaryparentheses[Style/TernaryParentheses]
        * xref:cops_style.adoc#styletoplevelmethoddefinition[Style/TopLevelMethodDefinition]
        * xref:cops_style.adoc#styletrailingbodyonclass[Style/TrailingBodyOnClass]
        * xref:cops_style.adoc#styletrailingbodyonmethoddefinition[Style/TrailingBodyOnMethodDefinition]
        * xref:cops_style.adoc#styletrailingbodyonmodule[Style/TrailingBodyOnModule]
        * xref:cops_style.adoc#styletrailingcommainarguments[Style/TrailingCommaInArguments]
        * xref:cops_style.adoc#styletrailingcommainarrayliteral[Style/TrailingCommaInArrayLiteral]
        * xref:cops_style.adoc#styletrailingcommainblockargs[Style/TrailingCommaInBlockArgs]
        * xref:cops_style.adoc#styletrailingcommainhashliteral[Style/TrailingCommaInHashLiteral]
        * xref:cops_style.adoc#styletrailingmethodendstatement[Style/TrailingMethodEndStatement]
        * xref:cops_style.adoc#styletrailingunderscorevariable[Style/TrailingUnderscoreVariable]
        * xref:cops_style.adoc#styletrivialaccessors[Style/TrivialAccessors]
        * xref:cops_style.adoc#styleunlesselse[Style/UnlessElse]
        * xref:cops_style.adoc#styleunlesslogicaloperators[Style/UnlessLogicalOperators]
        * xref:cops_style.adoc#styleunpackfirst[Style/UnpackFirst]
        * xref:cops_style.adoc#stylevariableinterpolation[Style/VariableInterpolation]
        * xref:cops_style.adoc#stylewhenthen[Style/WhenThen]
        * xref:cops_style.adoc#stylewhileuntildo[Style/WhileUntilDo]
        * xref:cops_style.adoc#stylewhileuntilmodifier[Style/WhileUntilModifier]
        * xref:cops_style.adoc#stylewordarray[Style/WordArray]
        * xref:cops_style.adoc#styleyamlfileread[Style/YAMLFileRead]
        * xref:cops_style.adoc#styleyodacondition[Style/YodaCondition]
        * xref:cops_style.adoc#styleyodaexpression[Style/YodaExpression]
        * xref:cops_style.adoc#stylezerolengthpredicate[Style/ZeroLengthPredicate]

        // END_COP_LIST
  recorded_at: Mon, 27 May 2024 05:30:37 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop/v1.64.0/docs/modules/ROOT/pages/cops_bundler.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '8938'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"2db792edd11b9aefe7736697add7e8ec647d878365c8dd156e78786736cd970f"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 68D2:19D255:9DDA8E:A83CA0:66541A7D
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 27 May 2024 05:30:38 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-fra-eddf8230046-FRA
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1716787838.936384,VS0,VE188
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - 796602520d4123e2286b683e146cd86886702401
      Expires:
      - Mon, 27 May 2024 05:35:38 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        ////
          Do NOT edit this file by hand directly, as it is automatically generated.

          Please make any necessary changes to the cop documentation within the source files themselves.
        ////

        = Bundler

        == Bundler/DuplicatedGem

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | No
        | 0.46
        | 1.40
        |===

        A Gem's requirements should be listed only once in a Gemfile.

        === Examples

        [source,ruby]
        ----
        # bad
        gem 'rubocop'
        gem 'rubocop'

        # bad
        group :development do
          gem 'rubocop'
        end

        group :test do
          gem 'rubocop'
        end

        # good
        group :development, :test do
          gem 'rubocop'
        end

        # good
        gem 'rubocop', groups: [:development, :test]

        # good - conditional declaration
        if Dir.exist?(local)
          gem 'rubocop', path: local
        elsif ENV['RUBOCOP_VERSION'] == 'master'
          gem 'rubocop', git: 'https://github.com/rubocop/rubocop.git'
        else
          gem 'rubocop', '~> 0.90.0'
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Severity
        | `warning`
        | String

        | Include
        | `+**/*.gemfile+`, `+**/Gemfile+`, `+**/gems.rb+`
        | Array
        |===

        == Bundler/DuplicatedGroup

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | No
        | 1.56
        | -
        |===

        A Gem group, or a set of groups, should be listed only once in a Gemfile.

        For example, if the values of `source`, `git`, `platforms`, or `path`
        surrounding `group` are different, no offense will be registered:

        [source,ruby]
        -----
        platforms :ruby do
          group :default do
            gem 'openssl'
          end
        end

        platforms :jruby do
          group :default do
            gem 'jruby-openssl'
          end
        end
        -----

        === Examples

        [source,ruby]
        ----
        # bad
        group :development do
          gem 'rubocop'
        end

        group :development do
          gem 'rubocop-rails'
        end

        # bad (same set of groups declared twice)
        group :development, :test do
          gem 'rubocop'
        end

        group :test, :development do
          gem 'rspec'
        end

        # good
        group :development do
          gem 'rubocop'
        end

        group :development, :test do
          gem 'rspec'
        end

        # good
        gem 'rubocop', groups: [:development, :test]
        gem 'rspec', groups: [:development, :test]
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Severity
        | `warning`
        | String

        | Include
        | `+**/*.gemfile+`, `+**/Gemfile+`, `+**/gems.rb+`
        | Array
        |===

        == Bundler/GemComment

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Disabled
        | Yes
        | No
        | 0.59
        | 0.85
        |===

        Each gem in the Gemfile should have a comment explaining
        its purpose in the project, or the reason for its version
        or source.

        The optional "OnlyFor" configuration array
        can be used to only register offenses when the gems
        use certain options or have version specifiers.

        When "version_specifiers" is included, a comment
        will be enforced if the gem has any version specifier.

        When "restrictive_version_specifiers" is included, a comment
        will be enforced if the gem has a version specifier that
        holds back the version of the gem.

        For any other value in the array, a comment will be enforced for
        a gem if an option by the same name is present.
        A useful use case is to enforce a comment when using
        options that change the source of a gem:

        - `bitbucket`
        - `gist`
        - `git`
        - `github`
        - `source`

        For a full list of options supported by bundler,
        see https://bundler.io/man/gemfile.5.html
        .

        === Examples

        ==== OnlyFor: [] (default)

        [source,ruby]
        ----
        # bad

        gem 'foo'

        # good

        # Helpers for the foo things.
        gem 'foo'
        ----

        ==== OnlyFor: ['version_specifiers']

        [source,ruby]
        ----
        # bad

        gem 'foo', '< 2.1'

        # good

        # Version 2.1 introduces breaking change baz
        gem 'foo', '< 2.1'
        ----

        ==== OnlyFor: ['restrictive_version_specifiers']

        [source,ruby]
        ----
        # bad

        gem 'foo', '< 2.1'

        # good

        gem 'foo', '>= 1.0'

        # Version 2.1 introduces breaking change baz
        gem 'foo', '< 2.1'
        ----

        ==== OnlyFor: ['version_specifiers', 'github']

        [source,ruby]
        ----
        # bad

        gem 'foo', github: 'some_account/some_fork_of_foo'

        gem 'bar', '< 2.1'

        # good

        # Using this fork because baz
        gem 'foo', github: 'some_account/some_fork_of_foo'

        # Version 2.1 introduces breaking change baz
        gem 'bar', '< 2.1'
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `+**/*.gemfile+`, `+**/Gemfile+`, `+**/gems.rb+`
        | Array

        | IgnoredGems
        | `[]`
        | Array

        | OnlyFor
        | `[]`
        | Array
        |===

        == Bundler/GemFilename

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | No
        | 1.20
        | -
        |===

        Verifies that a project contains Gemfile or gems.rb file and correct
        associated lock file based on the configuration.

        === Examples

        ==== EnforcedStyle: Gemfile (default)

        [source,ruby]
        ----
        # bad
        Project contains gems.rb and gems.locked files

        # bad
        Project contains Gemfile and gems.locked file

        # good
        Project contains Gemfile and Gemfile.lock
        ----

        ==== EnforcedStyle: gems.rb

        [source,ruby]
        ----
        # bad
        Project contains Gemfile and Gemfile.lock files

        # bad
        Project contains gems.rb and Gemfile.lock file

        # good
        Project contains gems.rb and gems.locked files
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | EnforcedStyle
        | `Gemfile`
        | `Gemfile`, `gems.rb`

        | Include
        | `+**/Gemfile+`, `+**/gems.rb+`, `+**/Gemfile.lock+`, `+**/gems.locked+`
        | Array
        |===

        == Bundler/GemVersion

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Disabled
        | Yes
        | No
        | 1.14
        | -
        |===

        Enforce that Gem version specifications or a commit reference (branch,
        ref, or tag) are either required or forbidden.

        === Examples

        ==== EnforcedStyle: required (default)

        [source,ruby]
        ----
        # bad
        gem 'rubocop'

        # good
        gem 'rubocop', '~> 1.12'

        # good
        gem 'rubocop', '>= 1.10.0'

        # good
        gem 'rubocop', '>= 1.5.0', '< 1.10.0'

        # good
        gem 'rubocop', branch: 'feature-branch'

        # good
        gem 'rubocop', ref: '74b5bfbb2c4b6fd6cdbbc7254bd7084b36e0c85b'

        # good
        gem 'rubocop', tag: 'v1.17.0'
        ----

        ==== EnforcedStyle: forbidden

        [source,ruby]
        ----
        # good
        gem 'rubocop'

        # bad
        gem 'rubocop', '~> 1.12'

        # bad
        gem 'rubocop', '>= 1.10.0'

        # bad
        gem 'rubocop', '>= 1.5.0', '< 1.10.0'

        # bad
        gem 'rubocop', branch: 'feature-branch'

        # bad
        gem 'rubocop', ref: '74b5bfbb2c4b6fd6cdbbc7254bd7084b36e0c85b'

        # bad
        gem 'rubocop', tag: 'v1.17.0'
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | EnforcedStyle
        | `required`
        | `required`, `forbidden`

        | Include
        | `+**/*.gemfile+`, `+**/Gemfile+`, `+**/gems.rb+`
        | Array

        | AllowedGems
        | `[]`
        | Array
        |===

        == Bundler/InsecureProtocolSource

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always
        | 0.50
        | 1.40
        |===

        Passing symbol arguments to `source` (e.g. `source :rubygems`) is
        deprecated because they default to using HTTP requests. Instead, specify
        `'https://rubygems.org'` if possible, or `'http://rubygems.org'` if not.

        When autocorrecting, this cop will replace symbol arguments with
        `'https://rubygems.org'`.

        This cop will not replace existing sources that use `http://`. This may
        be necessary where HTTPS is not available. For example, where using an
        internal gem server via an intranet, or where HTTPS is prohibited.
        However, you should strongly prefer `https://` where possible, as it is
        more secure.

        If you don't allow `http://`, please set `false` to `AllowHttpProtocol`.
        This option is `true` by default for safe autocorrection.

        === Examples

        [source,ruby]
        ----
        # bad
        source :gemcutter
        source :rubygems
        source :rubyforge

        # good
        source 'https://rubygems.org' # strongly recommended
        ----

        ==== AllowHttpProtocol: true (default)

        [source,ruby]
        ----
        # good
        source 'http://rubygems.org' # use only if HTTPS is unavailable
        ----

        ==== AllowHttpProtocol: false

        [source,ruby]
        ----
        # bad
        source 'http://rubygems.org'
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Severity
        | `warning`
        | String

        | AllowHttpProtocol
        | `true`
        | Boolean

        | Include
        | `+**/*.gemfile+`, `+**/Gemfile+`, `+**/gems.rb+`
        | Array
        |===

        == Bundler/OrderedGems

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always
        | 0.46
        | 0.47
        |===

        Gems should be alphabetically sorted within groups.

        === Examples

        [source,ruby]
        ----
        # bad
        gem 'rubocop'
        gem 'rspec'

        # good
        gem 'rspec'
        gem 'rubocop'

        # good
        gem 'rubocop'

        gem 'rspec'
        ----

        ==== TreatCommentsAsGroupSeparators: true (default)

        [source,ruby]
        ----
        # good
        # For code quality
        gem 'rubocop'
        # For tests
        gem 'rspec'
        ----

        ==== TreatCommentsAsGroupSeparators: false

        [source,ruby]
        ----
        # bad
        # For code quality
        gem 'rubocop'
        # For tests
        gem 'rspec'
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | TreatCommentsAsGroupSeparators
        | `true`
        | Boolean

        | ConsiderPunctuation
        | `false`
        | Boolean

        | Include
        | `+**/*.gemfile+`, `+**/Gemfile+`, `+**/gems.rb+`
        | Array
        |===
  recorded_at: Mon, 27 May 2024 05:30:38 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop/v1.64.0/docs/modules/ROOT/pages/cops_gemspec.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '10984'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"e9751fd7435976774c62c66779c584390152ee3d324de2b9e0e6a42cfbc98f56"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - C98E:3BC15A:1331E6C:146AE25:66541A7D
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 27 May 2024 05:30:38 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-fra-eddf8230039-FRA
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1716787838.344481,VS0,VE199
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - 03b349f0cc9be34edf4259af0dfcfd1bcbce0926
      Expires:
      - Mon, 27 May 2024 05:35:38 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        ////
          Do NOT edit this file by hand directly, as it is automatically generated.

          Please make any necessary changes to the cop documentation within the source files themselves.
        ////

        = Gemspec

        == Gemspec/DependencyVersion

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Disabled
        | Yes
        | No
        | 1.29
        | -
        |===

        Enforce that gem dependency version specifications or a commit reference (branch,
        ref, or tag) are either required or forbidden.

        === Examples

        ==== EnforcedStyle: required (default)

        [source,ruby]
        ----
        # bad
        Gem::Specification.new do |spec|
          spec.add_dependency 'parser'
        end

        # bad
        Gem::Specification.new do |spec|
          spec.add_development_dependency 'parser'
        end

        # good
        Gem::Specification.new do |spec|
          spec.add_dependency 'parser', '>= 2.3.3.1', '< 3.0'
        end

        # good
        Gem::Specification.new do |spec|
          spec.add_development_dependency 'parser', '>= 2.3.3.1', '< 3.0'
        end
        ----

        ==== EnforcedStyle: forbidden

        [source,ruby]
        ----
        # bad
        Gem::Specification.new do |spec|
          spec.add_dependency 'parser', '>= 2.3.3.1', '< 3.0'
        end

        # bad
        Gem::Specification.new do |spec|
          spec.add_development_dependency 'parser', '>= 2.3.3.1', '< 3.0'
        end

        # good
        Gem::Specification.new do |spec|
          spec.add_dependency 'parser'
        end

        # good
        Gem::Specification.new do |spec|
          spec.add_development_dependency 'parser'
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | EnforcedStyle
        | `required`
        | `required`, `forbidden`

        | Include
        | `+**/*.gemspec+`
        | Array

        | AllowedGems
        | `[]`
        | Array
        |===

        == Gemspec/DeprecatedAttributeAssignment

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always
        | 1.30
        | 1.40
        |===

        Checks that deprecated attributes are not set in a gemspec file.
        Removing deprecated attributes allows the user to receive smaller packed gems.

        === Examples

        [source,ruby]
        ----
        # bad
        Gem::Specification.new do |spec|
          spec.name = 'your_cool_gem_name'
          spec.test_files = Dir.glob('test/**/*')
        end

        # bad
        Gem::Specification.new do |spec|
          spec.name = 'your_cool_gem_name'
          spec.test_files += Dir.glob('test/**/*')
        end

        # good
        Gem::Specification.new do |spec|
          spec.name = 'your_cool_gem_name'
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Severity
        | `warning`
        | String

        | Include
        | `+**/*.gemspec+`
        | Array
        |===

        == Gemspec/DevelopmentDependencies

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | No
        | 1.44
        | -
        |===

        Enforce that development dependencies for a gem are specified in
        `Gemfile`, rather than in the `gemspec` using
        `add_development_dependency`. Alternatively, using `EnforcedStyle:
        gemspec`, enforce that all dependencies are specified in `gemspec`,
        rather than in `Gemfile`.

        === Examples

        ==== EnforcedStyle: Gemfile (default)

        [source,ruby]
        ----
        # Specify runtime dependencies in your gemspec,
        # but all other dependencies in your Gemfile.

        # bad
        # example.gemspec
        s.add_development_dependency "foo"

        # good
        # Gemfile
        gem "foo"

        # good
        # gems.rb
        gem "foo"

        # good (with AllowedGems: ["bar"])
        # example.gemspec
        s.add_development_dependency "bar"
        ----

        ==== EnforcedStyle: gems.rb

        [source,ruby]
        ----
        # Specify runtime dependencies in your gemspec,
        # but all other dependencies in your Gemfile.
        #
        # Identical to `EnforcedStyle: Gemfile`, but with a different error message.
        # Rely on Bundler/GemFilename to enforce the use of `Gemfile` vs `gems.rb`.

        # bad
        # example.gemspec
        s.add_development_dependency "foo"

        # good
        # Gemfile
        gem "foo"

        # good
        # gems.rb
        gem "foo"

        # good (with AllowedGems: ["bar"])
        # example.gemspec
        s.add_development_dependency "bar"
        ----

        ==== EnforcedStyle: gemspec

        [source,ruby]
        ----
        # Specify all dependencies in your gemspec.

        # bad
        # Gemfile
        gem "foo"

        # good
        # example.gemspec
        s.add_development_dependency "foo"

        # good (with AllowedGems: ["bar"])
        # Gemfile
        gem "bar"
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | EnforcedStyle
        | `Gemfile`
        | `Gemfile`, `gems.rb`, `gemspec`

        | AllowedGems
        | `[]`
        | Array

        | Include
        | `+**/*.gemspec+`, `+**/Gemfile+`, `+**/gems.rb+`
        | Array
        |===

        == Gemspec/DuplicatedAssignment

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | No
        | 0.52
        | 1.40
        |===

        An attribute assignment method calls should be listed only once
        in a gemspec.

        Assigning to an attribute with the same name using `spec.foo =` will be
        an unintended usage. On the other hand, duplication of methods such
        as `spec.requirements`, `spec.add_runtime_dependency`, and others are
        permitted because it is the intended use of appending values.

        === Examples

        [source,ruby]
        ----
        # bad
        Gem::Specification.new do |spec|
          spec.name = 'rubocop'
          spec.name = 'rubocop2'
        end

        # good
        Gem::Specification.new do |spec|
          spec.name = 'rubocop'
        end

        # good
        Gem::Specification.new do |spec|
          spec.requirements << 'libmagick, v6.0'
          spec.requirements << 'A good graphics card'
        end

        # good
        Gem::Specification.new do |spec|
          spec.add_runtime_dependency('parallel', '~> 1.10')
          spec.add_runtime_dependency('parser', '>= 2.3.3.1', '< 3.0')
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Severity
        | `warning`
        | String

        | Include
        | `+**/*.gemspec+`
        | Array
        |===

        == Gemspec/OrderedDependencies

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always
        | 0.51
        | -
        |===

        Dependencies in the gemspec should be alphabetically sorted.

        === Examples

        [source,ruby]
        ----
        # bad
        spec.add_dependency 'rubocop'
        spec.add_dependency 'rspec'

        # good
        spec.add_dependency 'rspec'
        spec.add_dependency 'rubocop'

        # good
        spec.add_dependency 'rubocop'

        spec.add_dependency 'rspec'

        # bad
        spec.add_development_dependency 'rubocop'
        spec.add_development_dependency 'rspec'

        # good
        spec.add_development_dependency 'rspec'
        spec.add_development_dependency 'rubocop'

        # good
        spec.add_development_dependency 'rubocop'

        spec.add_development_dependency 'rspec'

        # bad
        spec.add_runtime_dependency 'rubocop'
        spec.add_runtime_dependency 'rspec'

        # good
        spec.add_runtime_dependency 'rspec'
        spec.add_runtime_dependency 'rubocop'

        # good
        spec.add_runtime_dependency 'rubocop'

        spec.add_runtime_dependency 'rspec'
        ----

        ==== TreatCommentsAsGroupSeparators: true (default)

        [source,ruby]
        ----
        # good
        # For code quality
        spec.add_dependency 'rubocop'
        # For tests
        spec.add_dependency 'rspec'
        ----

        ==== TreatCommentsAsGroupSeparators: false

        [source,ruby]
        ----
        # bad
        # For code quality
        spec.add_dependency 'rubocop'
        # For tests
        spec.add_dependency 'rspec'
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | TreatCommentsAsGroupSeparators
        | `true`
        | Boolean

        | ConsiderPunctuation
        | `false`
        | Boolean

        | Include
        | `+**/*.gemspec+`
        | Array
        |===

        == Gemspec/RequireMFA

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always
        | 1.23
        | 1.40
        |===

        Requires a gemspec to have `rubygems_mfa_required` metadata set.

        This setting tells RubyGems that MFA (Multi-Factor Authentication) is
        required for accounts to be able perform privileged operations, such as
        (see RubyGems' documentation for the full list of privileged
        operations):

        * `gem push`
        * `gem yank`
        * `gem owner --add/remove`
        * adding or removing owners using gem ownership page

        This helps make your gem more secure, as users can be more
        confident that gem updates were pushed by maintainers.

        === Examples

        [source,ruby]
        ----
        # bad
        Gem::Specification.new do |spec|
          # no `rubygems_mfa_required` metadata specified
        end

        # good
        Gem::Specification.new do |spec|
          spec.metadata = {
            'rubygems_mfa_required' => 'true'
          }
        end

        # good
        Gem::Specification.new do |spec|
          spec.metadata['rubygems_mfa_required'] = 'true'
        end

        # bad
        Gem::Specification.new do |spec|
          spec.metadata = {
            'rubygems_mfa_required' => 'false'
          }
        end

        # good
        Gem::Specification.new do |spec|
          spec.metadata = {
            'rubygems_mfa_required' => 'true'
          }
        end

        # bad
        Gem::Specification.new do |spec|
          spec.metadata['rubygems_mfa_required'] = 'false'
        end

        # good
        Gem::Specification.new do |spec|
          spec.metadata['rubygems_mfa_required'] = 'true'
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Severity
        | `warning`
        | String

        | Include
        | `+**/*.gemspec+`
        | Array
        |===

        === References

        * https://guides.rubygems.org/mfa-requirement-opt-in/

        == Gemspec/RequiredRubyVersion

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | No
        | 0.52
        | 1.40
        |===

        Checks that `required_ruby_version` in a gemspec file is set to a valid
        value (non-blank) and matches `TargetRubyVersion` as set in RuboCop's
        configuration for the gem.

        This ensures that RuboCop is using the same Ruby version as the gem.

        === Examples

        [source,ruby]
        ----
        # When `TargetRubyVersion` of .rubocop.yml is `2.5`.

        # bad
        Gem::Specification.new do |spec|
          # no `required_ruby_version` specified
        end

        # bad
        Gem::Specification.new do |spec|
          spec.required_ruby_version = '>= 2.4.0'
        end

        # bad
        Gem::Specification.new do |spec|
          spec.required_ruby_version = '>= 2.6.0'
        end

        # bad
        Gem::Specification.new do |spec|
          spec.required_ruby_version = ''
        end

        # good
        Gem::Specification.new do |spec|
          spec.required_ruby_version = '>= 2.5.0'
        end

        # good
        Gem::Specification.new do |spec|
          spec.required_ruby_version = '>= 2.5'
        end

        # accepted but not recommended
        Gem::Specification.new do |spec|
          spec.required_ruby_version = ['>= 2.5.0', '< 2.7.0']
        end

        # accepted but not recommended, since
        # Ruby does not really follow semantic versioning
        Gem::Specification.new do |spec|
          spec.required_ruby_version = '~> 2.5'
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Severity
        | `warning`
        | String

        | Include
        | `+**/*.gemspec+`
        | Array
        |===

        == Gemspec/RubyVersionGlobalsUsage

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | No
        | 0.72
        | 1.40
        |===

        Checks that `RUBY_VERSION` constant is not used in gemspec.
        Using `RUBY_VERSION` is dangerous because value of the
        constant is determined by `rake release`.
        It's possible to have dependency based on ruby version used
        to execute `rake release` and not user's ruby version.

        === Examples

        [source,ruby]
        ----
        # bad
        Gem::Specification.new do |spec|
          if RUBY_VERSION >= '3.0'
            spec.add_runtime_dependency 'gem_a'
          else
            spec.add_runtime_dependency 'gem_b'
          end
        end

        # good
        Gem::Specification.new do |spec|
          spec.add_runtime_dependency 'gem_a'
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Severity
        | `warning`
        | String

        | Include
        | `+**/*.gemspec+`
        | Array
        |===

        === References

        * https://rubystyle.guide#no-ruby-version-in-the-gemspec
  recorded_at: Mon, 27 May 2024 05:30:38 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop/v1.64.0/docs/modules/ROOT/pages/cops_layout.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '104775'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"fd4e84b71142e894dd1409df48d3fe34df38db9ed5641b0ef9dabfb7757cd897"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 7D80:23E66:13974FF:14D05F2:66541A7E
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 27 May 2024 05:30:38 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-fra-eddf8230068-FRA
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1716787839.657448,VS0,VE179
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - 4ffba6d952587c9ae954b289fc217aef68bb8a5c
      Expires:
      - Mon, 27 May 2024 05:35:38 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: "////\n  Do NOT edit this file by hand directly, as it is automatically
        generated.\n\n  Please make any necessary changes to the cop documentation
        within the source files themselves.\n////\n\n= Layout\n\n== Layout/AccessModifierIndentation\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n| -\n|===\n\nBare access modifiers
        (those not applying to specific methods) should be\nindented as deep as method
        definitions, or as deep as the class/module\nkeyword, depending on configuration.\n\n===
        Examples\n\n==== EnforcedStyle: indent (default)\n\n[source,ruby]\n----\n#
        bad\nclass Plumbus\nprivate\n  def smooth; end\nend\n\n# good\nclass Plumbus\n
        \ private\n  def smooth; end\nend\n----\n\n==== EnforcedStyle: outdent\n\n[source,ruby]\n----\n#
        bad\nclass Plumbus\n  private\n  def smooth; end\nend\n\n# good\nclass Plumbus\nprivate\n
        \ def smooth; end\nend\n----\n\n=== Configurable attributes\n\n|===\n| Name
        | Default value | Configurable values\n\n| EnforcedStyle\n| `indent`\n| `outdent`,
        `indent`\n\n| IndentationWidth\n| `<none>`\n| Integer\n|===\n\n=== References\n\n*
        https://rubystyle.guide#indent-public-private-protected\n\n== Layout/ArgumentAlignment\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.68\n| 0.77\n|===\n\nHere we check
        if the arguments on a multi-line method\ndefinition are aligned.\n\n=== Examples\n\n====
        EnforcedStyle: with_first_argument (default)\n\n[source,ruby]\n----\n# good\n\nfoo
        :bar,\n    :baz,\n    key: value\n\nfoo(\n  :bar,\n  :baz,\n  key: value\n)\n\n#
        bad\n\nfoo :bar,\n  :baz,\n  key: value\n\nfoo(\n  :bar,\n    :baz,\n    key:
        value\n)\n----\n\n==== EnforcedStyle: with_fixed_indentation\n\n[source,ruby]\n----\n#
        good\n\nfoo :bar,\n  :baz,\n  key: value\n\n# bad\n\nfoo :bar,\n    :baz,\n
        \   key: value\n----\n\n=== Configurable attributes\n\n|===\n| Name | Default
        value | Configurable values\n\n| EnforcedStyle\n| `with_first_argument`\n|
        `with_first_argument`, `with_fixed_indentation`\n\n| IndentationWidth\n| `<none>`\n|
        Integer\n|===\n\n=== References\n\n* https://rubystyle.guide#no-double-indent\n\n==
        Layout/ArrayAlignment\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n|
        0.77\n|===\n\nHere we check if the elements of a multi-line array literal
        are\naligned.\n\n=== Examples\n\n==== EnforcedStyle: with_first_element (default)\n\n[source,ruby]\n----\n#
        good\n\narray = [1, 2, 3,\n         4, 5, 6]\narray = ['run',\n         'forrest',\n
        \        'run']\n\n# bad\n\narray = [1, 2, 3,\n  4, 5, 6]\narray = ['run',\n
        \    'forrest',\n     'run']\n----\n\n==== EnforcedStyle: with_fixed_indentation\n\n[source,ruby]\n----\n#
        good\n\narray = [1, 2, 3,\n  4, 5, 6]\n\n# bad\n\narray = [1, 2, 3,\n         4,
        5, 6]\n----\n\n=== Configurable attributes\n\n|===\n| Name | Default value
        | Configurable values\n\n| EnforcedStyle\n| `with_first_element`\n| `with_first_element`,
        `with_fixed_indentation`\n\n| IndentationWidth\n| `<none>`\n| Integer\n|===\n\n===
        References\n\n* https://rubystyle.guide#no-double-indent\n\n== Layout/AssignmentIndentation\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n| 1.45\n|===\n\nChecks the
        indentation of the first line of the\nright-hand-side of a multi-line assignment.\n\nThe
        indentation of the remaining lines can be corrected with\nother cops such
        as `IndentationConsistency` and `EndAlignment`.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nvalue =\nif foo\n  'bar'\nend\n\n# good\nvalue =\n  if foo\n    'bar'\n
        \ end\n----\n\n=== Configurable attributes\n\n|===\n| Name | Default value
        | Configurable values\n\n| IndentationWidth\n| `<none>`\n| Integer\n|===\n\n==
        Layout/BeginEndAlignment\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n| 0.91\n|
        -\n|===\n\nChecks whether the end keyword of `begin` is aligned properly.\n\nTwo
        modes are supported through the `EnforcedStyleAlignWith` configuration\nparameter.
        If it's set to `start_of_line` (which is the default), the\n`end` shall be
        aligned with the start of the line where the `begin`\nkeyword is. If it's
        set to `begin`, the `end` shall be aligned with the\n`begin` keyword.\n\n`Layout/EndAlignment`
        cop aligns with keywords (e.g. `if`, `while`, `case`)\nby default. On the
        other hand, `||= begin` that this cop targets tends to\nalign with the start
        of the line, it defaults to `EnforcedStyleAlignWith: start_of_line`.\nThese
        style can be configured by each cop.\n\n=== Examples\n\n==== EnforcedStyleAlignWith:
        start_of_line (default)\n\n[source,ruby]\n----\n# bad\nfoo ||= begin\n          do_something\n
        \       end\n\n# good\nfoo ||= begin\n  do_something\nend\n----\n\n==== EnforcedStyleAlignWith:
        begin\n\n[source,ruby]\n----\n# bad\nfoo ||= begin\n  do_something\nend\n\n#
        good\nfoo ||= begin\n          do_something\n        end\n----\n\n=== Configurable
        attributes\n\n|===\n| Name | Default value | Configurable values\n\n| EnforcedStyleAlignWith\n|
        `start_of_line`\n| `start_of_line`, `begin`\n\n| Severity\n| `warning`\n|
        String\n|===\n\n== Layout/BlockAlignment\n\n|===\n| Enabled by default | Safe
        | Supports autocorrection | Version Added | Version Changed\n\n| Enabled\n|
        Yes\n| Always\n| 0.53\n| -\n|===\n\nChecks whether the end keywords are aligned
        properly for do\nend blocks.\n\nThree modes are supported through the `EnforcedStyleAlignWith`\nconfiguration
        parameter:\n\n`start_of_block` : the `end` shall be aligned with the\nstart
        of the line where the `do` appeared.\n\n`start_of_line` : the `end` shall
        be aligned with the\nstart of the line where the expression started.\n\n`either`
        (which is the default) : the `end` is allowed to be in either\nlocation. The
        autofixer will default to `start_of_line`.\n\n=== Examples\n\n==== EnforcedStyleAlignWith:
        either (default)\n\n[source,ruby]\n----\n# bad\n\nfoo.bar\n  .each do\n    baz\n
        \     end\n\n# good\n\nfoo.bar\n  .each do\n    baz\nend\n----\n\n==== EnforcedStyleAlignWith:
        start_of_block\n\n[source,ruby]\n----\n# bad\n\nfoo.bar\n  .each do\n    baz\n
        \     end\n\n# good\n\nfoo.bar\n  .each do\n    baz\n  end\n----\n\n==== EnforcedStyleAlignWith:
        start_of_line\n\n[source,ruby]\n----\n# bad\n\nfoo.bar\n  .each do\n    baz\n
        \     end\n\n# good\n\nfoo.bar\n  .each do\n    baz\nend\n----\n\n=== Configurable
        attributes\n\n|===\n| Name | Default value | Configurable values\n\n| EnforcedStyleAlignWith\n|
        `either`\n| `either`, `start_of_block`, `start_of_line`\n|===\n\n== Layout/BlockEndNewline\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n| -\n|===\n\nChecks whether
        the end statement of a do..end block\nis on its own line.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nblah do |i|\n  foo(i) end\n\n# good\nblah do |i|\n  foo(i)\nend\n\n#
        bad\nblah { |i|\n  foo(i) }\n\n# good\nblah { |i|\n  foo(i)\n}\n----\n\n==
        Layout/CaseIndentation\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n|
        1.16\n|===\n\nChecks how the `when` and ``in``s of a `case` expression\nare
        indented in relation to its `case` or `end` keyword.\n\nIt will register a
        separate offense for each misaligned `when` and `in`.\n\n=== Examples\n\n[source,ruby]\n----\n#
        If Layout/EndAlignment is set to keyword style (default)\n# *case* and *end*
        should always be aligned to same depth,\n# and therefore *when* should always
        be aligned to both -\n# regardless of configuration.\n\n# bad for all styles\ncase
        n\n  when 0\n    x * 2\n  else\n    y / 3\nend\n\ncase n\n  in pattern\n    x
        * 2\n  else\n    y / 3\nend\n\n# good for all styles\ncase n\nwhen 0\n  x
        * 2\nelse\n  y / 3\nend\n\ncase n\nin pattern\n  x * 2\nelse\n  y / 3\nend\n----\n\n====
        EnforcedStyle: case (default)\n\n[source,ruby]\n----\n# if EndAlignment is
        set to other style such as\n# start_of_line (as shown below), then *when*
        alignment\n# configuration does have an effect.\n\n# bad\na = case n\nwhen
        0\n  x * 2\nelse\n  y / 3\nend\n\na = case n\nin pattern\n  x * 2\nelse\n
        \ y / 3\nend\n\n# good\na = case n\n    when 0\n      x * 2\n    else\n      y
        / 3\nend\n\na = case n\n    in pattern\n      x * 2\n    else\n      y / 3\nend\n----\n\n====
        EnforcedStyle: end\n\n[source,ruby]\n----\n# bad\na = case n\n    when 0\n
        \     x * 2\n    else\n      y / 3\nend\n\na = case n\n    in pattern\n      x
        * 2\n    else\n      y / 3\nend\n\n# good\na = case n\nwhen 0\n  x * 2\nelse\n
        \ y / 3\nend\n\na = case n\nin pattern\n  x * 2\nelse\n  y / 3\nend\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        EnforcedStyle\n| `case`\n| `case`, `end`\n\n| IndentOneStep\n| `false`\n|
        Boolean\n\n| IndentationWidth\n| `<none>`\n| Integer\n|===\n\n=== References\n\n*
        https://rubystyle.guide#indent-when-to-case\n\n== Layout/ClassStructure\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Disabled\n| Yes\n| Always (Unsafe)\n| 0.52\n| 1.53\n|===\n\nChecks
        if the code style follows the ExpectedOrder configuration:\n\n`Categories`
        allows us to map macro names into a category.\n\nConsider an example of code
        style that covers the following order:\n\n* Module inclusion (include, prepend,
        extend)\n* Constants\n* Associations (has_one, has_many)\n* Public attribute
        macros (attr_accessor, attr_writer, attr_reader)\n* Other macros (validates,
        validate)\n* Public class methods\n* Initializer\n* Public instance methods\n*
        Protected attribute macros (attr_accessor, attr_writer, attr_reader)\n* Protected
        instance methods\n* Private attribute macros (attr_accessor, attr_writer,
        attr_reader)\n* Private instance methods\n\nYou can configure the following
        order:\n\n[source,yaml]\n----\n Layout/ClassStructure:\n   ExpectedOrder:\n
        \    - module_inclusion\n     - constants\n     - association\n     - public_attribute_macros\n
        \    - public_delegate\n     - macros\n     - public_class_methods\n     -
        initializer\n     - public_methods\n     - protected_attribute_macros\n     -
        protected_methods\n     - private_attribute_macros\n     - private_delegate\n
        \    - private_methods\n----\n\nInstead of putting all literals in the expected
        order, is also\npossible to group categories of macros. Visibility levels
        are handled\nautomatically.\n\n[source,yaml]\n----\n Layout/ClassStructure:\n
        \  Categories:\n     association:\n       - has_many\n       - has_one\n     attribute_macros:\n
        \      - attr_accessor\n       - attr_reader\n       - attr_writer\n     macros:\n
        \      - validates\n       - validate\n     module_inclusion:\n       - include\n
        \      - prepend\n       - extend\n----\n\n=== Safety\n\nAutocorrection is
        unsafe because class methods and module inclusion\ncan behave differently,
        based on which methods or constants have\nalready been defined.\n\nConstants
        will only be moved when they are assigned with literals.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\n# Expect extend be before constant\nclass Person < ApplicationRecord\n
        \ has_many :orders\n  ANSWER = 42\n\n  extend SomeModule\n  include AnotherModule\nend\n\n#
        good\nclass Person\n  # extend and include go first\n  extend SomeModule\n
        \ include AnotherModule\n\n  # inner classes\n  CustomError = Class.new(StandardError)\n\n
        \ # constants are next\n  SOME_CONSTANT = 20\n\n  # afterwards we have public
        attribute macros\n  attr_reader :name\n\n  # followed by other macros (if
        any)\n  validates :name\n\n  # then we have public delegate macros\n  delegate
        :to_s, to: :name\n\n  # public class methods are next in line\n  def self.some_method\n
        \ end\n\n  # initialization goes between class methods and instance methods\n
        \ def initialize\n  end\n\n  # followed by other public instance methods\n
        \ def some_method\n  end\n\n  # protected attribute macros and methods go
        next\n  protected\n\n  attr_reader :protected_name\n\n  def some_protected_method\n
        \ end\n\n  # private attribute macros, delegate macros and methods\n  # are
        grouped near the end\n  private\n\n  attr_reader :private_name\n\n  delegate
        :some_private_delegate, to: :name\n\n  def some_private_method\n  end\nend\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        Categories\n| `{\"module_inclusion\"=>[\"include\", \"prepend\", \"extend\"]}`\n|
        \n\n| ExpectedOrder\n| `module_inclusion`, `constants`, `public_class_methods`,
        `initializer`, `public_methods`, `protected_methods`, `private_methods`\n|
        Array\n|===\n\n=== References\n\n* https://rubystyle.guide#consistent-classes\n\n==
        Layout/ClosingHeredocIndentation\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n|
        0.57\n| -\n|===\n\nChecks the indentation of here document closings.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\nclass Foo\n  def bar\n    <<~SQL\n
        \     'Hi'\n  SQL\n  end\nend\n\n# good\nclass Foo\n  def bar\n    <<~SQL\n
        \     'Hi'\n    SQL\n  end\nend\n\n# bad\n\n# heredoc contents is before closing
        heredoc.\nfoo arg,\n    <<~EOS\n  Hi\n    EOS\n\n# good\nfoo arg,\n    <<~EOS\n
        \ Hi\nEOS\n\n# good\nfoo arg,\n    <<~EOS\n      Hi\n    EOS\n----\n\n== Layout/ClosingParenthesisIndentation\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n| -\n|===\n\nChecks the indentation
        of hanging closing parentheses in\nmethod calls, method definitions, and grouped
        expressions. A hanging\nclosing parenthesis means `)` preceded by a line break.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\nsome_method(\n  a,\n  b\n  )\n\nsome_method(\n
        \ a, b\n  )\n\nsome_method(a, b, c\n  )\n\nsome_method(a,\n            b,\n
        \           c\n  )\n\nsome_method(a,\n  x: 1,\n  y: 2\n  )\n\n# Scenario 1:
        When First Parameter Is On Its Own Line\n\n# good: when first param is on
        a new line, right paren is *always*\n#       outdented by IndentationWidth\nsome_method(\n
        \ a,\n  b\n)\n\n# good\nsome_method(\n  a, b\n)\n\n# Scenario 2: When First
        Parameter Is On The Same Line\n\n# good: when all other params are also on
        the same line, outdent\n#       right paren by IndentationWidth\nsome_method(a,
        b, c\n           )\n\n# good: when all other params are on multiple lines,
        but are lined\n#       up, align right paren with left paren\nsome_method(a,\n
        \           b,\n            c\n           )\n\n# good: when other params are
        not lined up on multiple lines, outdent\n#       right paren by IndentationWidth\nsome_method(a,\n
        \ x: 1,\n  y: 2\n)\n----\n\n== Layout/CommentIndentation\n\n|===\n| Enabled
        by default | Safe | Supports autocorrection | Version Added | Version Changed\n\n|
        Enabled\n| Yes\n| Always\n| 0.49\n| 1.24\n|===\n\nChecks the indentation of
        comments.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\n  # comment here\ndef
        method_name\nend\n\n  # comment here\na = 'hello'\n\n# yet another comment\n
        \ if true\n    true\n  end\n\n# good\n# comment here\ndef method_name\nend\n\n#
        comment here\na = 'hello'\n\n# yet another comment\nif true\n  true\nend\n----\n\n====
        AllowForAlignment: false (default)\n\n[source,ruby]\n----\n# bad\na = 1 #
        A really long comment\n      # spanning two lines.\n\n# good\n# A really long
        comment spanning one line.\na = 1\n----\n\n==== AllowForAlignment: true\n\n[source,ruby]\n----\n#
        good\na = 1 # A really long comment\n      # spanning two lines.\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        AllowForAlignment\n| `false`\n| Boolean\n|===\n\n== Layout/ConditionPosition\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.53\n| 0.83\n|===\n\nChecks for
        conditions that are not on the same line as\nif/while/until.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\n\nif\n  some_condition\n  do_something\nend\n----\n\n[source,ruby]\n----\n#
        good\n\nif some_condition\n  do_something\nend\n----\n\n=== References\n\n*
        https://rubystyle.guide#same-line-condition\n\n== Layout/DefEndAlignment\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.53\n| -\n|===\n\nChecks whether
        the end keywords of method definitions are\naligned properly.\n\nTwo modes
        are supported through the EnforcedStyleAlignWith configuration\nparameter.
        If it's set to `start_of_line` (which is the default), the\n`end` shall be
        aligned with the start of the line where the `def`\nkeyword is. If it's set
        to `def`, the `end` shall be aligned with the\n`def` keyword.\n\n=== Examples\n\n====
        EnforcedStyleAlignWith: start_of_line (default)\n\n[source,ruby]\n----\n#
        bad\n\nprivate def foo\n            end\n\n# good\n\nprivate def foo\nend\n----\n\n====
        EnforcedStyleAlignWith: def\n\n[source,ruby]\n----\n# bad\n\nprivate def foo\n
        \           end\n\n# good\n\nprivate def foo\n        end\n----\n\n=== Configurable
        attributes\n\n|===\n| Name | Default value | Configurable values\n\n| EnforcedStyleAlignWith\n|
        `start_of_line`\n| `start_of_line`, `def`\n\n| Severity\n| `warning`\n| String\n|===\n\n==
        Layout/DotPosition\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n|
        -\n|===\n\nChecks the . position in multi-line method calls.\n\n=== Examples\n\n====
        EnforcedStyle: leading (default)\n\n[source,ruby]\n----\n# bad\nsomething.\n
        \ method\n\n# good\nsomething\n  .method\n----\n\n==== EnforcedStyle: trailing\n\n[source,ruby]\n----\n#
        bad\nsomething\n  .method\n\n# good\nsomething.\n  method\n----\n\n=== Configurable
        attributes\n\n|===\n| Name | Default value | Configurable values\n\n| EnforcedStyle\n|
        `leading`\n| `leading`, `trailing`\n|===\n\n=== References\n\n* https://rubystyle.guide#consistent-multi-line-chains\n\n==
        Layout/ElseAlignment\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n|
        -\n|===\n\nChecks the alignment of else keywords. Normally they should\nbe
        aligned with an if/unless/while/until/begin/def/rescue keyword, but there\nare
        special cases when they should follow the same rules as the\nalignment of
        end.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\nif something\n  code\n
        else\n  code\nend\n\n# bad\nif something\n  code\n elsif something\n  code\nend\n\n#
        good\nif something\n  code\nelse\n  code\nend\n----\n\n== Layout/EmptyComment\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Command-line only\n| 0.53\n| 1.61\n|===\n\nChecks
        empty comment.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\n\n#\nclass Foo\nend\n\n#
        good\n\n#\n# Description of `Foo` class.\n#\nclass Foo\nend\n----\n\n====
        AllowBorderComment: true (default)\n\n[source,ruby]\n----\n# good\n\ndef foo\nend\n\n#################\n\ndef
        bar\nend\n----\n\n==== AllowBorderComment: false\n\n[source,ruby]\n----\n#
        bad\n\ndef foo\nend\n\n#################\n\ndef bar\nend\n----\n\n==== AllowMarginComment:
        true (default)\n\n[source,ruby]\n----\n# good\n\n#\n# Description of `Foo`
        class.\n#\nclass Foo\nend\n----\n\n==== AllowMarginComment: false\n\n[source,ruby]\n----\n#
        bad\n\n#\n# Description of `Foo` class.\n#\nclass Foo\nend\n----\n\n=== Configurable
        attributes\n\n|===\n| Name | Default value | Configurable values\n\n| AllowBorderComment\n|
        `true`\n| Boolean\n\n| AllowMarginComment\n| `true`\n| Boolean\n|===\n\n==
        Layout/EmptyLineAfterGuardClause\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n|
        0.56\n| 0.59\n|===\n\nEnforces empty line after guard clause.\n\nThis cop
        allows `# :nocov:` directive after guard clause because\nSimpleCov excludes
        code from the coverage report by wrapping it in `# :nocov:`:\n\n[source,ruby]\n----\ndef
        foo\n  # :nocov:\n  return if condition\n  # :nocov:\n  bar\nend\n----\n\nRefer
        to SimpleCov's documentation for more details:\nhttps://github.com/simplecov-ruby/simplecov#ignoringskipping-code\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\ndef foo\n  return if need_return?\n
        \ bar\nend\n\n# good\ndef foo\n  return if need_return?\n\n  bar\nend\n\n#
        good\ndef foo\n  return if something?\n  return if something_different?\n\n
        \ bar\nend\n\n# also good\ndef foo\n  if something?\n    do_something\n    return
        if need_return?\n  end\nend\n----\n\n== Layout/EmptyLineAfterMagicComment\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n| -\n|===\n\nChecks for a newline
        after the final magic comment.\n\n=== Examples\n\n[source,ruby]\n----\n# good\n#
        frozen_string_literal: true\n\n# Some documentation for Person\nclass Person\n
        \ # Some code\nend\n\n# bad\n# frozen_string_literal: true\n# Some documentation
        for Person\nclass Person\n  # Some code\nend\n----\n\n=== References\n\n*
        https://rubystyle.guide#separate-magic-comments-from-code\n\n== Layout/EmptyLineAfterMultilineCondition\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Disabled\n| Yes\n| Always\n| 0.90\n| -\n|===\n\nEnforces empty
        line after multiline condition.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nif multiline &&\n  condition\n  do_something\nend\n\n# good\nif multiline
        &&\n  condition\n\n  do_something\nend\n\n# bad\ncase x\nwhen foo,\n  bar\n
        \ do_something\nend\n\n# good\ncase x\nwhen foo,\n  bar\n\n  do_something\nend\n\n#
        bad\nbegin\n  do_something\nrescue FooError,\n  BarError\n  handle_error\nend\n\n#
        good\nbegin\n  do_something\nrescue FooError,\n  BarError\n\n  handle_error\nend\n----\n\n===
        References\n\n* https://github.com/airbnb/ruby#multiline-if-newline\n\n==
        Layout/EmptyLineBetweenDefs\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n|
        0.49\n| 1.23\n|===\n\nChecks whether class/module/method definitions are\nseparated
        by one or more empty lines.\n\n`NumberOfEmptyLines` can be an integer (default
        is 1) or\nan array (e.g. [1, 2]) to specify a minimum and maximum\nnumber
        of empty lines permitted.\n\n`AllowAdjacentOneLineDefs` configures whether
        adjacent\none-line definitions are considered an offense.\n\n=== Examples\n\n====
        EmptyLineBetweenMethodDefs: true (default)\n\n[source,ruby]\n----\n# checks
        for empty lines between method definitions.\n\n# bad\ndef a\nend\ndef b\nend\n----\n\n[source,ruby]\n----\n#
        good\ndef a\nend\n\ndef b\nend\n----\n\n==== EmptyLineBetweenClassDefs: true
        (default)\n\n[source,ruby]\n----\n# checks for empty lines between class definitions.\n\n#
        bad\nclass A\nend\nclass B\nend\ndef b\nend\n----\n\n[source,ruby]\n----\n#
        good\nclass A\nend\n\nclass B\nend\n\ndef b\nend\n----\n\n==== EmptyLineBetweenModuleDefs:
        true (default)\n\n[source,ruby]\n----\n# checks for empty lines between module
        definitions.\n\n# bad\nmodule A\nend\nmodule B\nend\ndef b\nend\n----\n\n[source,ruby]\n----\n#
        good\nmodule A\nend\n\nmodule B\nend\n\ndef b\nend\n----\n\n==== AllowAdjacentOneLineDefs:
        true (default)\n\n[source,ruby]\n----\n# good\nclass ErrorA < BaseError; end\nclass
        ErrorB < BaseError; end\nclass ErrorC < BaseError; end\n\n# good\nclass ErrorA
        < BaseError; end\n\nclass ErrorB < BaseError; end\n\nclass ErrorC < BaseError;
        end\n----\n\n==== AllowAdjacentOneLineDefs: false\n\n[source,ruby]\n----\n#
        bad\nclass ErrorA < BaseError; end\nclass ErrorB < BaseError; end\nclass ErrorC
        < BaseError; end\n\n# good\nclass ErrorA < BaseError; end\n\nclass ErrorB
        < BaseError; end\n\nclass ErrorC < BaseError; end\n----\n\n=== Configurable
        attributes\n\n|===\n| Name | Default value | Configurable values\n\n| EmptyLineBetweenMethodDefs\n|
        `true`\n| Boolean\n\n| EmptyLineBetweenClassDefs\n| `true`\n| Boolean\n\n|
        EmptyLineBetweenModuleDefs\n| `true`\n| Boolean\n\n| DefLikeMacros\n| `[]`\n|
        Array\n\n| AllowAdjacentOneLineDefs\n| `true`\n| Boolean\n\n| NumberOfEmptyLines\n|
        `1`\n| Integer\n|===\n\n=== References\n\n* https://rubystyle.guide#empty-lines-between-methods\n\n==
        Layout/EmptyLines\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n|
        -\n|===\n\nChecks for two or more consecutive blank lines.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad - It has two empty lines.\nsome_method\n# one empty line\n# two empty
        lines\nsome_method\n\n# good\nsome_method\n# one empty line\nsome_method\n----\n\n===
        References\n\n* https://rubystyle.guide#two-or-more-empty-lines\n\n== Layout/EmptyLinesAroundAccessModifier\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n| -\n|===\n\nAccess modifiers
        should be surrounded by blank lines.\n\n=== Examples\n\n==== EnforcedStyle:
        around (default)\n\n[source,ruby]\n----\n# bad\nclass Foo\n  def bar; end\n
        \ private\n  def baz; end\nend\n\n# good\nclass Foo\n  def bar; end\n\n  private\n\n
        \ def baz; end\nend\n----\n\n==== EnforcedStyle: only_before\n\n[source,ruby]\n----\n#
        bad\nclass Foo\n  def bar; end\n  private\n  def baz; end\nend\n\n# good\nclass
        Foo\n  def bar; end\n\n  private\n  def baz; end\nend\n----\n\n=== Configurable
        attributes\n\n|===\n| Name | Default value | Configurable values\n\n| EnforcedStyle\n|
        `around`\n| `around`, `only_before`\n|===\n\n=== References\n\n* https://rubystyle.guide#empty-lines-around-access-modifier\n*
        https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#follow-the-coding-conventions\n\n==
        Layout/EmptyLinesAroundArguments\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n|
        0.52\n| -\n|===\n\nChecks if empty lines exist around the arguments\nof a
        method invocation.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\ndo_something(\n
        \ foo\n\n)\n\nprocess(bar,\n\n        baz: qux,\n        thud: fred)\n\nsome_method(\n\n
        \ [1,2,3],\n  x: y\n)\n\n# good\ndo_something(\n  foo\n)\n\nprocess(bar,\n
        \       baz: qux,\n        thud: fred)\n\nsome_method(\n  [1,2,3],\n  x: y\n)\n----\n\n==
        Layout/EmptyLinesAroundAttributeAccessor\n\n|===\n| Enabled by default | Safe
        | Supports autocorrection | Version Added | Version Changed\n\n| Enabled\n|
        Yes\n| Always\n| 0.83\n| 0.84\n|===\n\nChecks for a newline after an attribute
        accessor or a group of them.\n`alias` syntax and `alias_method`, `public`,
        `protected`, and `private` methods are allowed\nby default. These are customizable
        with `AllowAliasSyntax` and `AllowedMethods` options.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nattr_accessor :foo\ndef do_something\nend\n\n# good\nattr_accessor :foo\n\ndef
        do_something\nend\n\n# good\nattr_accessor :foo\nattr_reader :bar\nattr_writer
        :baz\nattr :qux\n\ndef do_something\nend\n----\n\n==== AllowAliasSyntax: true
        (default)\n\n[source,ruby]\n----\n# good\nattr_accessor :foo\nalias :foo?
        :foo\n\ndef do_something\nend\n----\n\n==== AllowAliasSyntax: false\n\n[source,ruby]\n----\n#
        bad\nattr_accessor :foo\nalias :foo? :foo\n\ndef do_something\nend\n\n# good\nattr_accessor
        :foo\n\nalias :foo? :foo\n\ndef do_something\nend\n----\n\n==== AllowedMethods:
        ['private']\n\n[source,ruby]\n----\n# good\nattr_accessor :foo\nprivate :foo\n\ndef
        do_something\nend\n----\n\n=== Configurable attributes\n\n|===\n| Name | Default
        value | Configurable values\n\n| AllowAliasSyntax\n| `true`\n| Boolean\n\n|
        AllowedMethods\n| `alias_method`, `public`, `protected`, `private`\n| Array\n|===\n\n===
        References\n\n* https://rubystyle.guide#empty-lines-around-attribute-accessor\n\n==
        Layout/EmptyLinesAroundBeginBody\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n|
        0.49\n| -\n|===\n\nChecks if empty lines exist around the bodies of begin-end\nblocks.\n\n===
        Examples\n\n[source,ruby]\n----\n# good\n\nbegin\n  # ...\nend\n\n# bad\n\nbegin\n\n
        \ # ...\n\nend\n----\n\n=== References\n\n* https://rubystyle.guide#empty-lines-around-bodies\n\n==
        Layout/EmptyLinesAroundBlockBody\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n|
        0.49\n| -\n|===\n\nChecks if empty lines around the bodies of blocks match\nthe
        configuration.\n\n=== Examples\n\n==== EnforcedStyle: no_empty_lines (default)\n\n[source,ruby]\n----\n#
        good\n\nfoo do |bar|\n  # ...\nend\n----\n\n==== EnforcedStyle: empty_lines\n\n[source,ruby]\n----\n#
        good\n\nfoo do |bar|\n\n  # ...\n\nend\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| EnforcedStyle\n| `no_empty_lines`\n|
        `empty_lines`, `no_empty_lines`\n|===\n\n=== References\n\n* https://rubystyle.guide#empty-lines-around-bodies\n\n==
        Layout/EmptyLinesAroundClassBody\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n|
        0.49\n| 0.53\n|===\n\nChecks if empty lines around the bodies of classes match\nthe
        configuration.\n\n=== Examples\n\n==== EnforcedStyle: no_empty_lines (default)\n\n[source,ruby]\n----\n#
        good\n\nclass Foo\n  def bar\n    # ...\n  end\nend\n----\n\n==== EnforcedStyle:
        empty_lines\n\n[source,ruby]\n----\n# good\n\nclass Foo\n\n  def bar\n    #
        ...\n  end\n\nend\n----\n\n==== EnforcedStyle: empty_lines_except_namespace\n\n[source,ruby]\n----\n#
        good\n\nclass Foo\n  class Bar\n\n    # ...\n\n  end\nend\n----\n\n==== EnforcedStyle:
        empty_lines_special\n\n[source,ruby]\n----\n# good\nclass Foo\n\n  def bar;
        end\n\nend\n----\n\n==== EnforcedStyle: beginning_only\n\n[source,ruby]\n----\n#
        good\n\nclass Foo\n\n  def bar\n    # ...\n  end\nend\n----\n\n==== EnforcedStyle:
        ending_only\n\n[source,ruby]\n----\n# good\n\nclass Foo\n  def bar\n    #
        ...\n  end\n\nend\n----\n\n=== Configurable attributes\n\n|===\n| Name | Default
        value | Configurable values\n\n| EnforcedStyle\n| `no_empty_lines`\n| `empty_lines`,
        `empty_lines_except_namespace`, `empty_lines_special`, `no_empty_lines`, `beginning_only`,
        `ending_only`\n|===\n\n=== References\n\n* https://rubystyle.guide#empty-lines-around-bodies\n\n==
        Layout/EmptyLinesAroundExceptionHandlingKeywords\n\n|===\n| Enabled by default
        | Safe | Supports autocorrection | Version Added | Version Changed\n\n| Enabled\n|
        Yes\n| Always\n| 0.49\n| -\n|===\n\nChecks if empty lines exist around the
        bodies of `begin`\nsections. This cop doesn't check empty lines at `begin`
        body\nbeginning/end and around method definition body.\n`Style/EmptyLinesAroundBeginBody`
        or `Style/EmptyLinesAroundMethodBody`\ncan be used for this purpose.\n\n===
        Examples\n\n[source,ruby]\n----\n# good\n\nbegin\n  do_something\nrescue\n
        \ do_something2\nelse\n  do_something3\nensure\n  do_something4\nend\n\n#
        good\n\ndef foo\n  do_something\nrescue\n  do_something2\nend\n\n# bad\n\nbegin\n
        \ do_something\n\nrescue\n\n  do_something2\n\nelse\n\n  do_something3\n\nensure\n\n
        \ do_something4\nend\n\n# bad\n\ndef foo\n  do_something\n\nrescue\n\n  do_something2\nend\n----\n\n===
        References\n\n* https://rubystyle.guide#empty-lines-around-bodies\n\n== Layout/EmptyLinesAroundMethodBody\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n| -\n|===\n\nChecks if empty
        lines exist around the bodies of methods.\n\n=== Examples\n\n[source,ruby]\n----\n#
        good\n\ndef foo\n  # ...\nend\n\n# bad\n\ndef bar\n\n  # ...\n\nend\n----\n\n===
        References\n\n* https://rubystyle.guide#empty-lines-around-bodies\n\n== Layout/EmptyLinesAroundModuleBody\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n| -\n|===\n\nChecks if empty
        lines around the bodies of modules match\nthe configuration.\n\n=== Examples\n\n====
        EnforcedStyle: no_empty_lines (default)\n\n[source,ruby]\n----\n# good\n\nmodule
        Foo\n  def bar\n    # ...\n  end\nend\n----\n\n==== EnforcedStyle: empty_lines\n\n[source,ruby]\n----\n#
        good\n\nmodule Foo\n\n  def bar\n    # ...\n  end\n\nend\n----\n\n==== EnforcedStyle:
        empty_lines_except_namespace\n\n[source,ruby]\n----\n# good\n\nmodule Foo\n
        \ module Bar\n\n    # ...\n\n  end\nend\n----\n\n==== EnforcedStyle: empty_lines_special\n\n[source,ruby]\n----\n#
        good\nmodule Foo\n\n  def bar; end\n\nend\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| EnforcedStyle\n| `no_empty_lines`\n|
        `empty_lines`, `empty_lines_except_namespace`, `empty_lines_special`, `no_empty_lines`\n|===\n\n===
        References\n\n* https://rubystyle.guide#empty-lines-around-bodies\n\n== Layout/EndAlignment\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.53\n| -\n|===\n\nChecks whether
        the end keywords are aligned properly.\n\nThree modes are supported through
        the `EnforcedStyleAlignWith`\nconfiguration parameter:\n\nIf it's set to `keyword`
        (which is the default), the `end`\nshall be aligned with the start of the
        keyword (if, class, etc.).\n\nIf it's set to `variable` the `end` shall be
        aligned with the\nleft-hand-side of the variable assignment, if there is one.\n\nIf
        it's set to `start_of_line`, the `end` shall be aligned with the\nstart of
        the line where the matching keyword appears.\n\nThis `Layout/EndAlignment`
        cop aligns with keywords (e.g. `if`, `while`, `case`)\nby default. On the
        other hand, `Layout/BeginEndAlignment` cop aligns with\n`EnforcedStyleAlignWith:
        start_of_line` by default due to `||= begin` tends\nto align with the start
        of the line. `Layout/DefEndAlignment` cop also aligns with\n`EnforcedStyleAlignWith:
        start_of_line` by default.\nThese style can be configured by each cop.\n\n===
        Examples\n\n==== EnforcedStyleAlignWith: keyword (default)\n\n[source,ruby]\n----\n#
        bad\n\nvariable = if true\n    end\n\n# good\n\nvariable = if true\n           end\n\nvariable
        =\n  if true\n  end\n----\n\n==== EnforcedStyleAlignWith: variable\n\n[source,ruby]\n----\n#
        bad\n\nvariable = if true\n    end\n\n# good\n\nvariable = if true\nend\n\nvariable
        =\n  if true\n  end\n----\n\n==== EnforcedStyleAlignWith: start_of_line\n\n[source,ruby]\n----\n#
        bad\n\nvariable = if true\n    end\n\nputs(if true\n     end)\n\n# good\n\nvariable
        = if true\nend\n\nputs(if true\nend)\n\nvariable =\n  if true\n  end\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        EnforcedStyleAlignWith\n| `keyword`\n| `keyword`, `variable`, `start_of_line`\n\n|
        Severity\n| `warning`\n| String\n|===\n\n== Layout/EndOfLine\n\n|===\n| Enabled
        by default | Safe | Supports autocorrection | Version Added | Version Changed\n\n|
        Enabled\n| Yes\n| No\n| 0.49\n| -\n|===\n\nChecks for Windows-style line endings
        in the source code.\n\n=== Examples\n\n==== EnforcedStyle: native (default)\n\n[source,ruby]\n----\n#
        The `native` style means that CR+LF (Carriage Return + Line Feed) is\n# enforced
        on Windows, and LF is enforced on other platforms.\n\n# bad\nputs 'Hello'
        # Return character is LF on Windows.\nputs 'Hello' # Return character is CR+LF
        on other than Windows.\n\n# good\nputs 'Hello' # Return character is CR+LF
        on Windows.\nputs 'Hello' # Return character is LF on other than Windows.\n----\n\n====
        EnforcedStyle: lf\n\n[source,ruby]\n----\n# The `lf` style means that LF (Line
        Feed) is enforced on\n# all platforms.\n\n# bad\nputs 'Hello' # Return character
        is CR+LF on all platforms.\n\n# good\nputs 'Hello' # Return character is LF
        on all platforms.\n----\n\n==== EnforcedStyle: crlf\n\n[source,ruby]\n----\n#
        The `crlf` style means that CR+LF (Carriage Return + Line Feed) is\n# enforced
        on all platforms.\n\n# bad\nputs 'Hello' # Return character is LF on all platforms.\n\n#
        good\nputs 'Hello' # Return character is CR+LF on all platforms.\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        EnforcedStyle\n| `native`\n| `native`, `lf`, `crlf`\n|===\n\n=== References\n\n*
        https://rubystyle.guide#crlf\n\n== Layout/ExtraSpacing\n\n|===\n| Enabled
        by default | Safe | Supports autocorrection | Version Added | Version Changed\n\n|
        Enabled\n| Yes\n| Always\n| 0.49\n| -\n|===\n\nChecks for extra/unnecessary
        whitespace.\n\n=== Examples\n\n[source,ruby]\n----\n# good if AllowForAlignment
        is true\nname      = \"RuboCop\"\n# Some comment and an empty line\n\nwebsite
        \ += \"/rubocop/rubocop\" unless cond\nputs        \"rubocop\"          if
        \    debug\n\n# bad for any configuration\nset_app(\"RuboCop\")\nwebsite  =
        \"https://github.com/rubocop/rubocop\"\n\n# good only if AllowBeforeTrailingComments
        is true\nobject.method(arg)  # this is a comment\n\n# good even if AllowBeforeTrailingComments
        is false or not set\nobject.method(arg) # this is a comment\n\n# good with
        either AllowBeforeTrailingComments or AllowForAlignment\nobject.method(arg)
        \        # this is a comment\nanother_object.method(arg) # this is another
        comment\nsome_object.method(arg)    # this is some comment\n----\n\n=== Configurable
        attributes\n\n|===\n| Name | Default value | Configurable values\n\n| AllowForAlignment\n|
        `true`\n| Boolean\n\n| AllowBeforeTrailingComments\n| `false`\n| Boolean\n\n|
        ForceEqualSignAlignment\n| `false`\n| Boolean\n|===\n\n== Layout/FirstArgumentIndentation\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.68\n| 0.77\n|===\n\nChecks the
        indentation of the first argument in a method call.\nArguments after the first
        one are checked by `Layout/ArgumentAlignment`,\nnot by this cop.\n\nFor indenting
        the first parameter of method _definitions_, check out\n`Layout/FirstParameterIndentation`.\n\nThis
        cop will respect `Layout/ArgumentAlignment` and will not work when\n`EnforcedStyle:
        with_fixed_indentation` is specified for `Layout/ArgumentAlignment`.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\nsome_method(\nfirst_param,\nsecond_param)\n\nfoo
        = some_method(\nfirst_param,\nsecond_param)\n\nfoo = some_method(nested_call(\nnested_first_param),\nsecond_param)\n\nfoo
        = some_method(\nnested_call(\nnested_first_param),\nsecond_param)\n\nsome_method
        nested_call(\nnested_first_param),\nsecond_param\n----\n\n==== EnforcedStyle:
        special_for_inner_method_call_in_parentheses (default)\n\n[source,ruby]\n----\n#
        Same as `special_for_inner_method_call` except that the special rule\n# only
        applies if the outer method call encloses its arguments in\n# parentheses.\n\n#
        good\nsome_method(\n  first_param,\nsecond_param)\n\nfoo = some_method(\n
        \ first_param,\nsecond_param)\n\nfoo = some_method(nested_call(\n                    nested_first_param),\nsecond_param)\n\nfoo
        = some_method(\n  nested_call(\n    nested_first_param),\nsecond_param)\n\nsome_method
        nested_call(\n  nested_first_param),\nsecond_param\n----\n\n==== EnforcedStyle:
        consistent\n\n[source,ruby]\n----\n# The first argument should always be indented
        one step more than the\n# preceding line.\n\n# good\nsome_method(\n  first_param,\nsecond_param)\n\nfoo
        = some_method(\n  first_param,\nsecond_param)\n\nfoo = some_method(nested_call(\n
        \ nested_first_param),\nsecond_param)\n\nfoo = some_method(\n  nested_call(\n
        \   nested_first_param),\nsecond_param)\n\nsome_method nested_call(\n  nested_first_param),\nsecond_param\n----\n\n====
        EnforcedStyle: consistent_relative_to_receiver\n\n[source,ruby]\n----\n# The
        first argument should always be indented one level relative to\n# the parent
        that is receiving the argument\n\n# good\nsome_method(\n  first_param,\nsecond_param)\n\nfoo
        = some_method(\n        first_param,\nsecond_param)\n\nfoo = some_method(nested_call(\n
        \                   nested_first_param),\nsecond_param)\n\nfoo = some_method(\n
        \       nested_call(\n          nested_first_param),\nsecond_param)\n\nsome_method
        nested_call(\n              nested_first_param),\nsecond_params\n----\n\n====
        EnforcedStyle: special_for_inner_method_call\n\n[source,ruby]\n----\n# The
        first argument should normally be indented one step more than\n# the preceding
        line, but if it's a argument for a method call that\n# is itself a argument
        in a method call, then the inner argument\n# should be indented relative to
        the inner method.\n\n# good\nsome_method(\n  first_param,\nsecond_param)\n\nfoo
        = some_method(\n  first_param,\nsecond_param)\n\nfoo = some_method(nested_call(\n
        \                   nested_first_param),\nsecond_param)\n\nfoo = some_method(\n
        \ nested_call(\n    nested_first_param),\nsecond_param)\n\nsome_method nested_call(\n
        \             nested_first_param),\nsecond_param\n----\n\n=== Configurable
        attributes\n\n|===\n| Name | Default value | Configurable values\n\n| EnforcedStyle\n|
        `special_for_inner_method_call_in_parentheses`\n| `consistent`, `consistent_relative_to_receiver`,
        `special_for_inner_method_call`, `special_for_inner_method_call_in_parentheses`\n\n|
        IndentationWidth\n| `<none>`\n| Integer\n|===\n\n== Layout/FirstArrayElementIndentation\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.68\n| 0.77\n|===\n\nChecks the
        indentation of the first element in an array literal\nwhere the opening bracket
        and the first element are on separate lines.\nThe other elements' indentations
        are handled by `Layout/ArrayAlignment` cop.\n\nThis cop will respect `Layout/ArrayAlignment`
        and will not work when\n`EnforcedStyle: with_fixed_indentation` is specified
        for `Layout/ArrayAlignment`.\n\nBy default, array literals that are arguments
        in a method call with\nparentheses, and where the opening square bracket of
        the array is on the\nsame line as the opening parenthesis of the method call,
        shall have\ntheir first element indented one step (two spaces) more than the\nposition
        inside the opening parenthesis.\n\nOther array literals shall have their first
        element indented one step\nmore than the start of the line where the opening
        square bracket is.\n\nThis default style is called 'special_inside_parentheses'.
        Alternative\nstyles are 'consistent' and 'align_brackets'. Here are examples:\n\n===
        Examples\n\n==== EnforcedStyle: special_inside_parentheses (default)\n\n[source,ruby]\n----\n#
        The `special_inside_parentheses` style enforces that the first\n# element
        in an array literal where the opening bracket and first\n# element are on
        separate lines is indented one step (two spaces) more\n# than the position
        inside the opening parenthesis.\n\n# bad\narray = [\n  :value\n]\nand_in_a_method_call([\n
        \ :no_difference\n                     ])\n\n# good\narray = [\n  :value\n]\nbut_in_a_method_call([\n
        \                      :its_like_this\n                     ])\n----\n\n====
        EnforcedStyle: consistent\n\n[source,ruby]\n----\n# The `consistent` style
        enforces that the first element in an array\n# literal where the opening bracket
        and the first element are on\n# separate lines is indented the same as an
        array literal which is not\n# defined inside a method call.\n\n# bad\n# consistent\narray
        = [\n  :value\n]\nbut_in_a_method_call([\n                       :its_like_this\n])\n\n#
        good\narray = [\n  :value\n]\nand_in_a_method_call([\n  :no_difference\n])\n----\n\n====
        EnforcedStyle: align_brackets\n\n[source,ruby]\n----\n# The `align_brackets`
        style enforces that the opening and closing\n# brackets are indented to the
        same position.\n\n# bad\n# align_brackets\nand_now_for_something = [\n                          :completely_different\n]\n\n#
        good\n# align_brackets\nand_now_for_something = [\n                          :completely_different\n
        \                       ]\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| EnforcedStyle\n| `special_inside_parentheses`\n|
        `special_inside_parentheses`, `consistent`, `align_brackets`\n\n| IndentationWidth\n|
        `<none>`\n| Integer\n|===\n\n== Layout/FirstArrayElementLineBreak\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Disabled\n| Yes\n| Always\n| 0.49\n| -\n|===\n\nChecks for a
        line break before the first element in a\nmulti-line array.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\n[ :a,\n  :b]\n\n# good\n[\n  :a,\n  :b]\n\n# good\n[:a, :b]\n----\n\n====
        AllowMultilineFinalElement: false (default)\n\n[source,ruby]\n----\n# bad\n[
        :a, {\n  :b => :c\n}]\n\n# good\n[\n  :a, {\n  :b => :c\n}]\n----\n\n====
        AllowMultilineFinalElement: true\n\n[source,ruby]\n----\n# good\n[:a, {\n
        \ :b => :c\n}]\n----\n\n=== Configurable attributes\n\n|===\n| Name | Default
        value | Configurable values\n\n| xref:cops_layout.adoc#allowmultilinefinalelement[AllowMultilineFinalElement]\n|
        `false`\n| Boolean\n|===\n\n== Layout/FirstHashElementIndentation\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.68\n| 0.77\n|===\n\nChecks the
        indentation of the first key in a hash literal\nwhere the opening brace and
        the first key are on separate lines. The\nother keys' indentations are handled
        by the HashAlignment cop.\n\nBy default, Hash literals that are arguments
        in a method call with\nparentheses, and where the opening curly brace of the
        hash is on the\nsame line as the opening parenthesis of the method call, shall
        have\ntheir first key indented one step (two spaces) more than the position\ninside
        the opening parenthesis.\n\nOther hash literals shall have their first key
        indented one step more\nthan the start of the line where the opening curly
        brace is.\n\nThis default style is called 'special_inside_parentheses'. Alternative\nstyles
        are 'consistent' and 'align_braces'. Here are examples:\n\n=== Examples\n\n====
        EnforcedStyle: special_inside_parentheses (default)\n\n[source,ruby]\n----\n#
        The `special_inside_parentheses` style enforces that the first key\n# in a
        hash literal where the opening brace and the first key are on\n# separate
        lines is indented one step (two spaces) more than the\n# position inside the
        opening parentheses.\n\n# bad\nhash = {\n  key: :value\n}\nand_in_a_method_call({\n
        \ no: :difference\n                     })\ntakes_multi_pairs_hash(x: {\n
        \ a: 1,\n  b: 2\n},\n                       y: {\n                         c:
        1,\n                         d: 2\n                       })\n\n# good\nspecial_inside_parentheses\nhash
        = {\n  key: :value\n}\nbut_in_a_method_call({\n                       its_like:
        :this\n                     })\ntakes_multi_pairs_hash(x: {\n                         a:
        1,\n                         b: 2\n                       },\n                       y:
        {\n                         c: 1,\n                         d: 2\n                       })\n----\n\n====
        EnforcedStyle: consistent\n\n[source,ruby]\n----\n# The `consistent` style
        enforces that the first key in a hash\n# literal where the opening brace and
        the first key are on\n# separate lines is indented the same as a hash literal
        which is not\n# defined inside a method call.\n\n# bad\nhash = {\n  key: :value\n}\nbut_in_a_method_call({\n
        \                      its_like: :this\n                      })\n\n# good\nhash
        = {\n  key: :value\n}\nand_in_a_method_call({\n  no: :difference\n})\n----\n\n====
        EnforcedStyle: align_braces\n\n[source,ruby]\n----\n# The `align_brackets`
        style enforces that the opening and closing\n# braces are indented to the
        same position.\n\n# bad\nand_now_for_something = {\n                          completely:
        :different\n}\ntakes_multi_pairs_hash(x: {\n  a: 1,\n  b: 2\n},\n                        y:
        {\n                             c: 1,\n                             d: 2\n
        \                          })\n\n# good\nand_now_for_something = {\n                          completely:
        :different\n                        }\ntakes_multi_pairs_hash(x: {\n                            a:
        1,\n                            b: 2\n                          },\n                       y:
        {\n                            c: 1,\n                            d: 2\n                          })\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        EnforcedStyle\n| `special_inside_parentheses`\n| `special_inside_parentheses`,
        `consistent`, `align_braces`\n\n| IndentationWidth\n| `<none>`\n| Integer\n|===\n\n==
        Layout/FirstHashElementLineBreak\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Disabled\n| Yes\n| Always\n|
        0.49\n| -\n|===\n\nChecks for a line break before the first element in a\nmulti-line
        hash.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\n{ a: 1,\n  b: 2}\n\n#
        good\n{\n  a: 1,\n  b: 2 }\n\n# good\n{\n  a: 1, b: {\n  c: 3\n}}\n----\n\n====
        AllowMultilineFinalElement: false (default)\n\n[source,ruby]\n----\n# bad\n{
        a: 1, b: {\n  c: 3\n}}\n----\n\n==== AllowMultilineFinalElement: true\n\n[source,ruby]\n----\n#
        bad\n{ a: 1,\n  b: {\n  c: 3\n}}\n\n# good\n{ a: 1, b: {\n  c: 3\n}}\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        xref:cops_layout.adoc#allowmultilinefinalelement[AllowMultilineFinalElement]\n|
        `false`\n| Boolean\n|===\n\n== Layout/FirstMethodArgumentLineBreak\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Disabled\n| Yes\n| Always\n| 0.49\n| -\n|===\n\nChecks for a
        line break before the first argument in a\nmulti-line method call.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\nmethod(foo, bar,\n  baz)\n\n# good\nmethod(\n
        \ foo, bar,\n  baz)\n\n  # ignored\n  method foo, bar,\n    baz\n----\n\n====
        AllowMultilineFinalElement: false (default)\n\n[source,ruby]\n----\n# bad\nmethod(foo,
        bar, {\n  baz: \"a\",\n  qux: \"b\",\n})\n\n# good\nmethod(\n  foo, bar, {\n
        \ baz: \"a\",\n  qux: \"b\",\n})\n----\n\n==== AllowMultilineFinalElement:
        true\n\n[source,ruby]\n----\n# bad\nmethod(foo,\n  bar,\n  {\n    baz: \"a\",\n
        \   qux: \"b\",\n  }\n)\n\n# good\nmethod(foo, bar, {\n  baz: \"a\",\n  qux:
        \"b\",\n})\n\n# good\nmethod(\n  foo,\n  bar,\n  {\n    baz: \"a\",\n    qux:
        \"b\",\n  }\n)\n----\n\n=== Configurable attributes\n\n|===\n| Name | Default
        value | Configurable values\n\n| xref:cops_layout.adoc#allowmultilinefinalelement[AllowMultilineFinalElement]\n|
        `false`\n| Boolean\n|===\n\n== Layout/FirstMethodParameterLineBreak\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Disabled\n| Yes\n| Always\n| 0.49\n| -\n|===\n\nChecks for a
        line break before the first parameter in a\nmulti-line method parameter definition.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\ndef method(foo, bar,\n    baz)\n  do_something\nend\n\n#
        good\ndef method(\n    foo, bar,\n    baz)\n  do_something\nend\n\n# ignored\ndef
        method foo,\n    bar\n  do_something\nend\n----\n\n==== AllowMultilineFinalElement:
        false (default)\n\n[source,ruby]\n----\n# bad\ndef method(foo, bar, baz =
        {\n  :a => \"b\",\n})\n  do_something\nend\n\n# good\ndef method(\n  foo,
        bar, baz = {\n  :a => \"b\",\n})\n  do_something\nend\n----\n\n==== AllowMultilineFinalElement:
        true\n\n[source,ruby]\n----\n# good\ndef method(foo, bar, baz = {\n  :a =>
        \"b\",\n})\n  do_something\nend\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| xref:cops_layout.adoc#allowmultilinefinalelement[AllowMultilineFinalElement]\n|
        `false`\n| Boolean\n|===\n\n== Layout/FirstParameterIndentation\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n| 0.77\n|===\n\nChecks the
        indentation of the first parameter in a method\ndefinition. Parameters after
        the first one are checked by\nLayout/ParameterAlignment, not by this cop.\n\nFor
        indenting the first argument of method _calls_, check out\nLayout/FirstArgumentIndentation,
        which supports options related to\nnesting that are irrelevant for method
        _definitions_.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\ndef some_method(\nfirst_param,\nsecond_param)\n
        \ 123\nend\n----\n\n==== EnforcedStyle: consistent (default)\n\n[source,ruby]\n----\n#
        The first parameter should always be indented one step more than the\n# preceding
        line.\n\n# good\ndef some_method(\n  first_param,\nsecond_param)\n  123\nend\n----\n\n====
        EnforcedStyle: align_parentheses\n\n[source,ruby]\n----\n# The first parameter
        should always be indented one step more than the\n# opening parenthesis.\n\n#
        good\ndef some_method(\n                 first_param,\nsecond_param)\n  123\nend\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        EnforcedStyle\n| `consistent`\n| `consistent`, `align_parentheses`\n\n| IndentationWidth\n|
        `<none>`\n| Integer\n|===\n\n== Layout/HashAlignment\n\n|===\n| Enabled by
        default | Safe | Supports autocorrection | Version Added | Version Changed\n\n|
        Enabled\n| Yes\n| Always\n| 0.49\n| 1.16\n|===\n\nCheck that the keys, separators,
        and values of a multi-line hash\nliteral are aligned according to configuration.
        The configuration\noptions are:\n\n* key (left align keys, one space before
        hash rockets and values)\n* separator (align hash rockets and colons, right
        align keys)\n* table (left align keys, hash rockets, and values)\n\nThe treatment
        of hashes passed as the last argument to a method call\ncan also be configured.
        The options are:\n\n* always_inspect\n* always_ignore\n* ignore_implicit (without
        curly braces)\n\nAlternatively you can specify multiple allowed styles. That's
        done by\npassing a list of styles to EnforcedStyles.\n\n=== Examples\n\n====
        EnforcedHashRocketStyle: key (default)\n\n[source,ruby]\n----\n# bad\n{\n
        \ :foo => bar,\n   :ba => baz\n}\n{\n  :foo => bar,\n  :ba  => baz\n}\n\n#
        good\n{\n  :foo => bar,\n  :ba => baz\n}\n----\n\n==== EnforcedHashRocketStyle:
        separator\n\n[source,ruby]\n----\n# bad\n{\n  :foo => bar,\n  :ba => baz\n}\n{\n
        \ :foo => bar,\n  :ba  => baz\n}\n\n# good\n{\n  :foo => bar,\n   :ba => baz\n}\n----\n\n====
        EnforcedHashRocketStyle: table\n\n[source,ruby]\n----\n# bad\n{\n  :foo =>
        bar,\n   :ba => baz\n}\n\n# good\n{\n  :foo => bar,\n  :ba  => baz\n}\n----\n\n====
        EnforcedColonStyle: key (default)\n\n[source,ruby]\n----\n# bad\n{\n  foo:
        bar,\n   ba: baz\n}\n{\n  foo: bar,\n  ba:  baz\n}\n\n# good\n{\n  foo: bar,\n
        \ ba: baz\n}\n----\n\n==== EnforcedColonStyle: separator\n\n[source,ruby]\n----\n#
        bad\n{\n  foo: bar,\n  ba: baz\n}\n\n# good\n{\n  foo: bar,\n   ba: baz\n}\n----\n\n====
        EnforcedColonStyle: table\n\n[source,ruby]\n----\n# bad\n{\n  foo: bar,\n
        \ ba: baz\n}\n\n# good\n{\n  foo: bar,\n  ba:  baz\n}\n----\n\n==== EnforcedLastArgumentHashStyle:
        always_inspect (default)\n\n[source,ruby]\n----\n# Inspect both implicit and
        explicit hashes.\n\n# bad\ndo_something(foo: 1,\n  bar: 2)\n\n# bad\ndo_something({foo:
        1,\n  bar: 2})\n\n# good\ndo_something(foo: 1,\n             bar: 2)\n\n#
        good\ndo_something(\n  foo: 1,\n  bar: 2\n)\n\n# good\ndo_something({foo:
        1,\n              bar: 2})\n\n# good\ndo_something({\n  foo: 1,\n  bar: 2\n})\n----\n\n====
        EnforcedLastArgumentHashStyle: always_ignore\n\n[source,ruby]\n----\n# Ignore
        both implicit and explicit hashes.\n\n# good\ndo_something(foo: 1,\n  bar:
        2)\n\n# good\ndo_something({foo: 1,\n  bar: 2})\n----\n\n==== EnforcedLastArgumentHashStyle:
        ignore_implicit\n\n[source,ruby]\n----\n# Ignore only implicit hashes.\n\n#
        bad\ndo_something({foo: 1,\n  bar: 2})\n\n# good\ndo_something(foo: 1,\n  bar:
        2)\n----\n\n==== EnforcedLastArgumentHashStyle: ignore_explicit\n\n[source,ruby]\n----\n#
        Ignore only explicit hashes.\n\n# bad\ndo_something(foo: 1,\n  bar: 2)\n\n#
        good\ndo_something({foo: 1,\n  bar: 2})\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| EnforcedHashRocketStyle\n|
        `key`\n| `key`, `separator`, `table`\n\n| EnforcedColonStyle\n| `key`\n| `key`,
        `separator`, `table`\n\n| EnforcedLastArgumentHashStyle\n| `always_inspect`\n|
        `always_inspect`, `always_ignore`, `ignore_implicit`, `ignore_explicit`\n|===\n\n==
        Layout/HeredocArgumentClosingParenthesis\n\n|===\n| Enabled by default | Safe
        | Supports autocorrection | Version Added | Version Changed\n\n| Disabled\n|
        Yes\n| Always\n| 0.68\n| -\n|===\n\nChecks for the placement of the closing
        parenthesis\nin a method call that passes a HEREDOC string as an argument.\nIt
        should be placed at the end of the line containing the\nopening HEREDOC tag.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\n\n   foo(<<-SQL\n     bar\n   SQL\n
        \  )\n\n   foo(<<-SQL, 123, <<-NOSQL,\n     bar\n   SQL\n     baz\n   NOSQL\n
        \  )\n\n   foo(\n     bar(<<-SQL\n       baz\n     SQL\n     ),\n     123,\n
        \  )\n\n# good\n\n   foo(<<-SQL)\n     bar\n   SQL\n\n   foo(<<-SQL, 123,
        <<-NOSQL)\n     bar\n   SQL\n     baz\n   NOSQL\n\n   foo(\n     bar(<<-SQL),\n
        \      baz\n     SQL\n     123,\n   )\n----\n\n=== References\n\n* https://rubystyle.guide#heredoc-argument-closing-parentheses\n\n==
        Layout/HeredocIndentation\n\nNOTE: Required Ruby version: 2.3\n\n|===\n| Enabled
        by default | Safe | Supports autocorrection | Version Added | Version Changed\n\n|
        Enabled\n| Yes\n| Always\n| 0.49\n| 0.85\n|===\n\nChecks the indentation of
        the here document bodies. The bodies\nare indented one step.\n\nNote: When
        ``Layout/LineLength``'s `AllowHeredoc` is false (not default),\n      this
        cop does not add any offenses for long here documents to\n      avoid ``Layout/LineLength``'s
        offenses.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\n<<-RUBY\nsomething\nRUBY\n\n#
        good\n<<~RUBY\n  something\nRUBY\n----\n\n=== References\n\n* https://rubystyle.guide#squiggly-heredocs\n\n==
        Layout/IndentationConsistency\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n|
        0.49\n| -\n|===\n\nChecks for inconsistent indentation.\n\nThe difference
        between `indented_internal_methods` and `normal` is\nthat the `indented_internal_methods`
        style prescribes that in\nclasses and modules the `protected` and `private`
        modifier keywords\nshall be indented the same as public methods and that protected
        and\nprivate members shall be indented one step more than the modifiers.\nOther
        than that, both styles mean that entities on the same logical\ndepth shall
        have the same indentation.\n\n=== Examples\n\n==== EnforcedStyle: normal (default)\n\n[source,ruby]\n----\n#
        bad\nclass A\n  def test\n    puts 'hello'\n     puts 'world'\n  end\nend\n\n#
        bad\nclass A\n  def test\n    puts 'hello'\n    puts 'world'\n  end\n\n  protected\n\n
        \   def foo\n    end\n\n  private\n\n    def bar\n    end\nend\n\n# good\nclass
        A\n  def test\n    puts 'hello'\n    puts 'world'\n  end\nend\n\n# good\nclass
        A\n  def test\n    puts 'hello'\n    puts 'world'\n  end\n\n  protected\n\n
        \ def foo\n  end\n\n  private\n\n  def bar\n  end\nend\n----\n\n==== EnforcedStyle:
        indented_internal_methods\n\n[source,ruby]\n----\n# bad\nclass A\n  def test\n
        \   puts 'hello'\n     puts 'world'\n  end\nend\n\n# bad\nclass A\n  def test\n
        \   puts 'hello'\n    puts 'world'\n  end\n\n  protected\n\n  def foo\n  end\n\n
        \ private\n\n  def bar\n  end\nend\n\n# good\nclass A\n  def test\n    puts
        'hello'\n    puts 'world'\n  end\nend\n\n# good\nclass A\n  def test\n    puts
        'hello'\n    puts 'world'\n  end\n\n  protected\n\n    def foo\n    end\n\n
        \ private\n\n    def bar\n    end\nend\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| EnforcedStyle\n| `normal`\n|
        `normal`, `indented_internal_methods`\n|===\n\n=== References\n\n* https://rubystyle.guide#spaces-indentation\n*
        https://edgeguides.rubyonrails.org/contributing_to_ruby_on_rails.html#follow-the-coding-conventions\n\n==
        Layout/IndentationStyle\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n|
        0.82\n|===\n\nChecks that the indentation method is consistent.\nEither tabs
        only or spaces only are used for indentation.\n\n=== Examples\n\n==== EnforcedStyle:
        spaces (default)\n\n[source,ruby]\n----\n# bad\n# This example uses a tab
        to indent bar.\ndef foo\n  bar\nend\n\n# good\n# This example uses spaces
        to indent bar.\ndef foo\n  bar\nend\n----\n\n==== EnforcedStyle: tabs\n\n[source,ruby]\n----\n#
        bad\n# This example uses spaces to indent bar.\ndef foo\n  bar\nend\n\n# good\n#
        This example uses a tab to indent bar.\ndef foo\n  bar\nend\n----\n\n=== Configurable
        attributes\n\n|===\n| Name | Default value | Configurable values\n\n| IndentationWidth\n|
        `<none>`\n| Integer\n\n| EnforcedStyle\n| `spaces`\n| `spaces`, `tabs`\n|===\n\n===
        References\n\n* https://rubystyle.guide#spaces-indentation\n\n== Layout/IndentationWidth\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n| -\n|===\n\nChecks for indentation
        that doesn't use the specified number\nof spaces.\n\nSee also the IndentationConsistency
        cop which is the companion to this\none.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nclass A\n def test\n  puts 'hello'\n end\nend\n\n# good\nclass A\n  def
        test\n    puts 'hello'\n  end\nend\n----\n\n==== AllowedPatterns: ['^\\s*module']\n\n[source,ruby]\n----\n#
        bad\nmodule A\nclass B\n  def test\n  puts 'hello'\n  end\nend\nend\n\n# good\nmodule
        A\nclass B\n  def test\n    puts 'hello'\n  end\nend\nend\n----\n\n=== Configurable
        attributes\n\n|===\n| Name | Default value | Configurable values\n\n| Width\n|
        `2`\n| Integer\n\n| AllowedPatterns\n| `[]`\n| Array\n|===\n\n=== References\n\n*
        https://rubystyle.guide#spaces-indentation\n\n== Layout/InitialIndentation\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n| -\n|===\n\nChecks for indentation
        of the first non-blank non-comment\nline in a file.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\n   class A\n     def foo; end\n   end\n\n# good\nclass A\n  def foo;
        end\nend\n----\n\n== Layout/LeadingCommentSpace\n\n|===\n| Enabled by default
        | Safe | Supports autocorrection | Version Added | Version Changed\n\n| Enabled\n|
        Yes\n| Always\n| 0.49\n| 0.73\n|===\n\nChecks whether comments have a leading
        space after the\n`#` denoting the start of the comment. The leading space
        is not\nrequired for some RDoc special syntax, like `#++`, `#--`,\n`#:nodoc`,
        `=begin`- and `=end` comments, \"shebang\" directives,\nor rackup options.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\n#Some comment\n\n# good\n# Some comment\n----\n\n====
        AllowDoxygenCommentStyle: false (default)\n\n[source,ruby]\n----\n# bad\n\n#**\n#
        Some comment\n# Another line of comment\n#*\n----\n\n==== AllowDoxygenCommentStyle:
        true\n\n[source,ruby]\n----\n# good\n\n#**\n# Some comment\n# Another line
        of comment\n#*\n----\n\n==== AllowGemfileRubyComment: false (default)\n\n[source,ruby]\n----\n#
        bad\n\n#ruby=2.7.0\n#ruby-gemset=myproject\n----\n\n==== AllowGemfileRubyComment:
        true\n\n[source,ruby]\n----\n# good\n\n#ruby=2.7.0\n#ruby-gemset=myproject\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        AllowDoxygenCommentStyle\n| `false`\n| Boolean\n\n| AllowGemfileRubyComment\n|
        `false`\n| Boolean\n|===\n\n=== References\n\n* https://rubystyle.guide#hash-space\n\n==
        Layout/LeadingEmptyLines\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n| 0.57\n|
        0.77\n|===\n\nChecks for unnecessary leading blank lines at the beginning\nof
        a file.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\n# (start of file)\n\nclass
        Foo\nend\n\n# bad\n# (start of file)\n\n# a comment\n\n# good\n# (start of
        file)\nclass Foo\nend\n\n# good\n# (start of file)\n# a comment\n----\n\n==
        Layout/LineContinuationLeadingSpace\n\n|===\n| Enabled by default | Safe |
        Supports autocorrection | Version Added | Version Changed\n\n| Pending\n|
        Yes\n| Always\n| 1.31\n| 1.45\n|===\n\nChecks that strings broken over multiple
        lines (by a backslash) contain\ntrailing spaces instead of leading spaces
        (default) or leading spaces\ninstead of trailing spaces.\n\n=== Examples\n\n====
        EnforcedStyle: trailing (default)\n\n[source,ruby]\n----\n# bad\n'this text
        contains a lot of' \\\n'               spaces'\n\n# good\n'this text contains
        a lot of               ' \\\n'spaces'\n\n# bad\n'this text is too' \\\n' long'\n\n#
        good\n'this text is too ' \\\n'long'\n----\n\n==== EnforcedStyle: leading\n\n[source,ruby]\n----\n#
        bad\n'this text contains a lot of               ' \\\n'spaces'\n\n# good\n'this
        text contains a lot of' \\\n'               spaces'\n\n# bad\n'this text is
        too ' \\\n'long'\n\n# good\n'this text is too' \\\n' long'\n----\n\n=== Configurable
        attributes\n\n|===\n| Name | Default value | Configurable values\n\n| EnforcedStyle\n|
        `trailing`\n| `leading`, `trailing`\n|===\n\n== Layout/LineContinuationSpacing\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Pending\n| Yes\n| Always\n| 1.31\n| -\n|===\n\nChecks that the
        backslash of a line continuation is separated from\npreceding text by exactly
        one space (default) or zero spaces.\n\n=== Examples\n\n==== EnforcedStyle:
        space (default)\n\n[source,ruby]\n----\n# bad\n'a'\\\n'b'  \\\n'c'\n\n# good\n'a'
        \\\n'b' \\\n'c'\n----\n\n==== EnforcedStyle: no_space\n\n[source,ruby]\n----\n#
        bad\n'a' \\\n'b'  \\\n'c'\n\n# good\n'a'\\\n'b'\\\n'c'\n----\n\n=== Configurable
        attributes\n\n|===\n| Name | Default value | Configurable values\n\n| EnforcedStyle\n|
        `space`\n| `space`, `no_space`\n|===\n\n== Layout/LineEndStringConcatenationIndentation\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Pending\n| Yes\n| Always\n| 1.18\n| -\n|===\n\nChecks the indentation
        of the next line after a line that ends with a string\nliteral and a backslash.\n\nIf
        `EnforcedStyle: aligned` is set, the concatenated string parts shall be aligned
        with the\nfirst part. There are some exceptions, such as implicit return values,
        where the\nconcatenated string parts shall be indented regardless of `EnforcedStyle`
        configuration.\n\nIf `EnforcedStyle: indented` is set, it's the second line
        that shall be indented one step\nmore than the first line. Lines 3 and forward
        shall be aligned with line 2.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\ndef
        some_method\n  'x' \\\n  'y' \\\n  'z'\nend\n\nmy_hash = {\n  first: 'a message'
        \\\n    'in two parts'\n}\n\n# good\ndef some_method\n  'x' \\\n    'y' \\\n
        \   'z'\nend\n----\n\n==== EnforcedStyle: aligned (default)\n\n[source,ruby]\n----\n#
        bad\nputs 'x' \\\n  'y'\n\nmy_hash = {\n  first: 'a message' \\\n    'in two
        parts'\n}\n\n# good\nputs 'x' \\\n     'y'\n\nmy_hash = {\n  first: 'a message'
        \\\n         'in two parts'\n}\n----\n\n==== EnforcedStyle: indented\n\n[source,ruby]\n----\n#
        bad\nresult = 'x' \\\n         'y'\n\nmy_hash = {\n  first: 'a message' \\\n
        \        'in two parts'\n}\n\n# good\nresult = 'x' \\\n  'y'\n\nmy_hash =
        {\n  first: 'a message' \\\n    'in two parts'\n}\n----\n\n=== Configurable
        attributes\n\n|===\n| Name | Default value | Configurable values\n\n| EnforcedStyle\n|
        `aligned`\n| `aligned`, `indented`\n\n| IndentationWidth\n| `<none>`\n| Integer\n|===\n\n==
        Layout/LineLength\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n| 0.25\n|
        1.4\n|===\n\nChecks the length of lines in the source code.\nThe maximum length
        is configurable.\nThe tab size is configured in the `IndentationWidth`\nof
        the `Layout/IndentationStyle` cop.\nIt also ignores a shebang line by default.\n\nThis
        cop has some autocorrection capabilities.\nIt can programmatically shorten
        certain long lines by\ninserting line breaks into expressions that can be
        safely\nsplit across lines. These include arrays, hashes, and\nmethod calls
        with argument lists.\n\nIf autocorrection is enabled, the following Layout
        cops\nare recommended to further format the broken lines.\n(Many of these
        are enabled by default.)\n\n* ArgumentAlignment\n* ArrayAlignment\n* BlockAlignment\n*
        BlockDelimiters\n* BlockEndNewline\n* ClosingParenthesisIndentation\n* FirstArgumentIndentation\n*
        FirstArrayElementIndentation\n* FirstHashElementIndentation\n* FirstParameterIndentation\n*
        HashAlignment\n* IndentationWidth\n* MultilineArrayLineBreaks\n* MultilineBlockLayout\n*
        MultilineHashBraceLayout\n* MultilineHashKeyLineBreaks\n* MultilineMethodArgumentLineBreaks\n*
        MultilineMethodParameterLineBreaks\n* ParameterAlignment\n\nTogether, these
        cops will pretty print hashes, arrays,\nmethod calls, etc. For example, let's
        say the max columns\nis 25:\n\n=== Examples\n\n[source,ruby]\n----\n# bad\n{foo:
        \"0000000000\", bar: \"0000000000\", baz: \"0000000000\"}\n\n# good\n{foo:
        \"0000000000\",\nbar: \"0000000000\", baz: \"0000000000\"}\n\n# good (with
        recommended cops enabled)\n{\n  foo: \"0000000000\",\n  bar: \"0000000000\",\n
        \ baz: \"0000000000\",\n}\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| Max\n| `120`\n| Integer\n\n|
        AllowHeredoc\n| `true`\n| Boolean\n\n| AllowURI\n| `true`\n| Boolean\n\n|
        URISchemes\n| `http`, `https`\n| Array\n\n| IgnoreCopDirectives\n| `true`\n|
        Boolean\n\n| AllowedPatterns\n| `[]`\n| Array\n|===\n\n=== References\n\n*
        https://rubystyle.guide#max-line-length\n\n== Layout/MultilineArrayBraceLayout\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n| -\n|===\n\nChecks that the
        closing brace in an array literal is either\non the same line as the last
        array element or on a new line.\n\nWhen using the `symmetrical` (default)
        style:\n\nIf an array's opening brace is on the same line as the first element\nof
        the array, then the closing brace should be on the same line as\nthe last
        element of the array.\n\nIf an array's opening brace is on the line above
        the first element\nof the array, then the closing brace should be on the line
        below\nthe last element of the array.\n\nWhen using the `new_line` style:\n\nThe
        closing brace of a multi-line array literal must be on the line\nafter the
        last element of the array.\n\nWhen using the `same_line` style:\n\nThe closing
        brace of a multi-line array literal must be on the same\nline as the last
        element of the array.\n\n=== Examples\n\n==== EnforcedStyle: symmetrical (default)\n\n[source,ruby]\n----\n#
        bad\n[ :a,\n  :b\n]\n\n# bad\n[\n  :a,\n  :b ]\n\n# good\n[ :a,\n  :b ]\n\n#
        good\n[\n  :a,\n  :b\n]\n----\n\n==== EnforcedStyle: new_line\n\n[source,ruby]\n----\n#
        bad\n[\n  :a,\n  :b ]\n\n# bad\n[ :a,\n  :b ]\n\n# good\n[ :a,\n  :b\n]\n\n#
        good\n[\n  :a,\n  :b\n]\n----\n\n==== EnforcedStyle: same_line\n\n[source,ruby]\n----\n#
        bad\n[ :a,\n  :b\n]\n\n# bad\n[\n  :a,\n  :b\n]\n\n# good\n[\n  :a,\n  :b
        ]\n\n# good\n[ :a,\n  :b ]\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| EnforcedStyle\n| `symmetrical`\n|
        `symmetrical`, `new_line`, `same_line`\n|===\n\n== Layout/MultilineArrayLineBreaks\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Disabled\n| Yes\n| Always\n| 0.67\n| -\n|===\n\nEnsures that
        each item in a multi-line array\nstarts on a separate line.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\n[\n  a, b,\n  c\n]\n\n# good\n[\n  a,\n  b,\n  c\n]\n\n# good\n[\n  a,\n
        \ b,\n  foo(\n    bar\n  )\n]\n----\n\n==== AllowMultilineFinalElement: false
        (default)\n\n[source,ruby]\n----\n# bad\n[a, b, foo(\n  bar\n)]\n----\n\n====
        AllowMultilineFinalElement: true\n\n[source,ruby]\n----\n# good\n[a, b, foo(\n
        \ bar\n)]\n----\n\n=== Configurable attributes\n\n|===\n| Name | Default value
        | Configurable values\n\n| xref:cops_layout.adoc#allowmultilinefinalelement[AllowMultilineFinalElement]\n|
        `false`\n| Boolean\n|===\n\n== Layout/MultilineAssignmentLayout\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Disabled\n| Yes\n| Always\n| 0.49\n| -\n|===\n\nChecks whether
        the multiline assignments have a newline\nafter the assignment operator.\n\n===
        Examples\n\n==== EnforcedStyle: new_line (default)\n\n[source,ruby]\n----\n#
        bad\nfoo = if expression\n  'bar'\nend\n\n# good\nfoo =\n  if expression\n
        \   'bar'\n  end\n\n# good\nfoo =\n  begin\n    compute\n  rescue => e\n    nil\n
        \ end\n----\n\n==== EnforcedStyle: same_line\n\n[source,ruby]\n----\n# good\nfoo
        = if expression\n  'bar'\nend\n----\n\n==== SupportedTypes: ['block', 'case',
        'class', 'if', 'kwbegin', 'module'] (default)\n\n[source,ruby]\n----\n# good\nfoo
        =\n  if expression\n    'bar'\n  end\n\n# good\nfoo =\n  [1].map do |i|\n
        \   i + 1\n  end\n----\n\n==== SupportedTypes: ['block']\n\n[source,ruby]\n----\n#
        good\nfoo = if expression\n  'bar'\nend\n\n# good\nfoo =\n  [1].map do |i|\n
        \   'bar' * i\n  end\n----\n\n=== Configurable attributes\n\n|===\n| Name
        | Default value | Configurable values\n\n| EnforcedStyle\n| `new_line`\n|
        `same_line`, `new_line`\n|===\n\n=== References\n\n* https://rubystyle.guide#indent-conditional-assignment\n\n==
        Layout/MultilineBlockLayout\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n|
        0.49\n| -\n|===\n\nChecks whether the multiline do end blocks have a newline\nafter
        the start of the block. Additionally, it checks whether the block\narguments,
        if any, are on the same line as the start of the\nblock. Putting block arguments
        on separate lines, because the whole\nline would otherwise be too long, is
        accepted.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\nblah do |i| foo(i)\n
        \ bar(i)\nend\n\n# bad\nblah do\n  |i| foo(i)\n  bar(i)\nend\n\n# good\nblah
        do |i|\n  foo(i)\n  bar(i)\nend\n\n# bad\nblah { |i| foo(i)\n  bar(i)\n}\n\n#
        good\nblah { |i|\n  foo(i)\n  bar(i)\n}\n\n# good\nblah { |\n  long_list,\n
        \ of_parameters,\n  that_would_not,\n  fit_on_one_line\n|\n  foo(i)\n  bar(i)\n}\n----\n\n==
        Layout/MultilineHashBraceLayout\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n|
        0.49\n| -\n|===\n\nChecks that the closing brace in a hash literal is either\non
        the same line as the last hash element, or a new line.\n\nWhen using the `symmetrical`
        (default) style:\n\nIf a hash's opening brace is on the same line as the first
        element\nof the hash, then the closing brace should be on the same line as\nthe
        last element of the hash.\n\nIf a hash's opening brace is on the line above
        the first element\nof the hash, then the closing brace should be on the line
        below\nthe last element of the hash.\n\nWhen using the `new_line` style:\n\nThe
        closing brace of a multi-line hash literal must be on the line\nafter the
        last element of the hash.\n\nWhen using the `same_line` style:\n\nThe closing
        brace of a multi-line hash literal must be on the same\nline as the last element
        of the hash.\n\n=== Examples\n\n==== EnforcedStyle: symmetrical (default)\n\n[source,ruby]\n----\n#
        bad\n{ a: 1,\n  b: 2\n}\n# bad\n{\n  a: 1,\n  b: 2 }\n\n# good\n{ a: 1,\n
        \ b: 2 }\n\n# good\n{\n  a: 1,\n  b: 2\n}\n----\n\n==== EnforcedStyle: new_line\n\n[source,ruby]\n----\n#
        bad\n{\n  a: 1,\n  b: 2 }\n\n# bad\n{ a: 1,\n  b: 2 }\n\n# good\n{ a: 1,\n
        \ b: 2\n}\n\n# good\n{\n  a: 1,\n  b: 2\n}\n----\n\n==== EnforcedStyle: same_line\n\n[source,ruby]\n----\n#
        bad\n{ a: 1,\n  b: 2\n}\n\n# bad\n{\n  a: 1,\n  b: 2\n}\n\n# good\n{\n  a:
        1,\n  b: 2 }\n\n# good\n{ a: 1,\n  b: 2 }\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| EnforcedStyle\n| `symmetrical`\n|
        `symmetrical`, `new_line`, `same_line`\n|===\n\n== Layout/MultilineHashKeyLineBreaks\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Disabled\n| Yes\n| Always\n| 0.67\n| -\n|===\n\nEnsures that
        each key in a multi-line hash\nstarts on a separate line.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\n{\n  a: 1, b: 2,\n  c: 3\n}\n\n# good\n{\n  a: 1,\n  b: 2,\n  c: 3\n}\n\n#
        good\n{\n  a: 1,\n  b: {\n    c: 3,\n  }\n}\n----\n\n==== AllowMultilineFinalElement:
        false (default)\n\n[source,ruby]\n----\n# bad\n{ a: 1, b: {\n  c: 3,\n}}\n----\n\n====
        AllowMultilineFinalElement: true\n\n[source,ruby]\n----\n# good\n{ a: 1, b:
        {\n  c: 3,\n}}\n----\n\n=== Configurable attributes\n\n|===\n| Name | Default
        value | Configurable values\n\n| xref:cops_layout.adoc#allowmultilinefinalelement[AllowMultilineFinalElement]\n|
        `false`\n| Boolean\n|===\n\n== Layout/MultilineMethodArgumentLineBreaks\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Disabled\n| Yes\n| Always\n| 0.67\n| -\n|===\n\nEnsures that
        each argument in a multi-line method call\nstarts on a separate line.\n\nNOTE:
        This cop does not move the first argument, if you want that to\nbe on a separate
        line, see `Layout/FirstMethodArgumentLineBreak`.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nfoo(a, b,\n  c\n)\n\n# bad\nfoo(a, b, {\n  foo: \"bar\",\n})\n\n# good\nfoo(\n
        \ a,\n  b,\n  c\n)\n\n# good\nfoo(a, b, c)\n----\n\n==== AllowMultilineFinalElement:
        false (default)\n\n[source,ruby]\n----\n# good\nfoo(\n  a,\n  b,\n  {\n    foo:
        \"bar\",\n  }\n)\n----\n\n==== AllowMultilineFinalElement: true\n\n[source,ruby]\n----\n#
        good\nfoo(\n  a,\n  b,\n  {\n    foo: \"bar\",\n  }\n)\n----\n\n=== Configurable
        attributes\n\n|===\n| Name | Default value | Configurable values\n\n| xref:cops_layout.adoc#allowmultilinefinalelement[AllowMultilineFinalElement]\n|
        `false`\n| Boolean\n|===\n\n== Layout/MultilineMethodCallBraceLayout\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n| -\n|===\n\nChecks that the
        closing brace in a method call is either\non the same line as the last method
        argument, or a new line.\n\nWhen using the `symmetrical` (default) style:\n\nIf
        a method call's opening brace is on the same line as the first\nargument of
        the call, then the closing brace should be on the same\nline as the last argument
        of the call.\n\nIf an method call's opening brace is on the line above the
        first\nargument of the call, then the closing brace should be on the line\nbelow
        the last argument of the call.\n\nWhen using the `new_line` style:\n\nThe
        closing brace of a multi-line method call must be on the line\nafter the last
        argument of the call.\n\nWhen using the `same_line` style:\n\nThe closing
        brace of a multi-line method call must be on the same\nline as the last argument
        of the call.\n\n=== Examples\n\n==== EnforcedStyle: symmetrical (default)\n\n[source,ruby]\n----\n#
        bad\nfoo(a,\n  b\n)\n\n# bad\nfoo(\n  a,\n  b)\n\n# good\nfoo(a,\n  b)\n\n#
        good\nfoo(\n  a,\n  b\n)\n----\n\n==== EnforcedStyle: new_line\n\n[source,ruby]\n----\n#
        bad\nfoo(\n  a,\n  b)\n\n# bad\nfoo(a,\n  b)\n\n# good\nfoo(a,\n  b\n)\n\n#
        good\nfoo(\n  a,\n  b\n)\n----\n\n==== EnforcedStyle: same_line\n\n[source,ruby]\n----\n#
        bad\nfoo(a,\n  b\n)\n\n# bad\nfoo(\n  a,\n  b\n)\n\n# good\nfoo(\n  a,\n  b)\n\n#
        good\nfoo(a,\n  b)\n----\n\n=== Configurable attributes\n\n|===\n| Name |
        Default value | Configurable values\n\n| EnforcedStyle\n| `symmetrical`\n|
        `symmetrical`, `new_line`, `same_line`\n|===\n\n== Layout/MultilineMethodCallIndentation\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n| -\n|===\n\nChecks the indentation
        of the method name part in method calls\nthat span more than one line.\n\n===
        Examples\n\n==== EnforcedStyle: aligned (default)\n\n[source,ruby]\n----\n#
        bad\nwhile myvariable\n.b\n  # do something\nend\n\n# good\nwhile myvariable\n
        \     .b\n  # do something\nend\n\n# good\nThing.a\n     .b\n     .c\n----\n\n====
        EnforcedStyle: indented\n\n[source,ruby]\n----\n# good\nwhile myvariable\n
        \ .b\n\n  # do something\nend\n----\n\n==== EnforcedStyle: indented_relative_to_receiver\n\n[source,ruby]\n----\n#
        good\nwhile myvariable\n        .a\n        .b\n\n  # do something\nend\n\n#
        good\nmyvariable = Thing\n               .a\n               .b\n               .c\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        EnforcedStyle\n| `aligned`\n| `aligned`, `indented`, `indented_relative_to_receiver`\n\n|
        IndentationWidth\n| `<none>`\n| Integer\n|===\n\n== Layout/MultilineMethodDefinitionBraceLayout\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n| -\n|===\n\nChecks that the
        closing brace in a method definition is either\non the same line as the last
        method parameter, or a new line.\n\nWhen using the `symmetrical` (default)
        style:\n\nIf a method definition's opening brace is on the same line as the\nfirst
        parameter of the definition, then the closing brace should be\non the same
        line as the last parameter of the definition.\n\nIf an method definition's
        opening brace is on the line above the first\nparameter of the definition,
        then the closing brace should be on the\nline below the last parameter of
        the definition.\n\nWhen using the `new_line` style:\n\nThe closing brace of
        a multi-line method definition must be on the line\nafter the last parameter
        of the definition.\n\nWhen using the `same_line` style:\n\nThe closing brace
        of a multi-line method definition must be on the same\nline as the last parameter
        of the definition.\n\n=== Examples\n\n==== EnforcedStyle: symmetrical (default)\n\n[source,ruby]\n----\n#
        bad\ndef foo(a,\n  b\n)\nend\n\n# bad\ndef foo(\n  a,\n  b)\nend\n\n# good\ndef
        foo(a,\n  b)\nend\n\n# good\ndef foo(\n  a,\n  b\n)\nend\n----\n\n==== EnforcedStyle:
        new_line\n\n[source,ruby]\n----\n# bad\ndef foo(\n  a,\n  b)\nend\n\n# bad\ndef
        foo(a,\n  b)\nend\n\n# good\ndef foo(a,\n  b\n)\nend\n\n# good\ndef foo(\n
        \ a,\n  b\n)\nend\n----\n\n==== EnforcedStyle: same_line\n\n[source,ruby]\n----\n#
        bad\ndef foo(a,\n  b\n)\nend\n\n# bad\ndef foo(\n  a,\n  b\n)\nend\n\n# good\ndef
        foo(\n  a,\n  b)\nend\n\n# good\ndef foo(a,\n  b)\nend\n----\n\n=== Configurable
        attributes\n\n|===\n| Name | Default value | Configurable values\n\n| EnforcedStyle\n|
        `symmetrical`\n| `symmetrical`, `new_line`, `same_line`\n|===\n\n== Layout/MultilineMethodParameterLineBreaks\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Disabled\n| Yes\n| Always\n| 1.32\n| -\n|===\n\nEnsures that
        each parameter in a multi-line method definition\nstarts on a separate line.\n\nNOTE:
        This cop does not move the first argument, if you want that to\nbe on a separate
        line, see `Layout/FirstMethodParameterLineBreak`.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\ndef foo(a, b,\n  c\n)\nend\n\n# good\ndef foo(\n  a,\n  b,\n  c\n)\nend\n\n#
        good\ndef foo(\n  a,\n  b = {\n    foo: \"bar\",\n  }\n)\nend\n\n# good\ndef
        foo(a, b, c)\nend\n----\n\n==== AllowMultilineFinalElement: false (default)\n\n[source,ruby]\n----\n#
        bad\ndef foo(a, b = {\n  foo: \"bar\",\n})\nend\n----\n\n==== AllowMultilineFinalElement:
        true\n\n[source,ruby]\n----\n# good\ndef foo(a, b = {\n  foo: \"bar\",\n})\nend\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        xref:cops_layout.adoc#allowmultilinefinalelement[AllowMultilineFinalElement]\n|
        `false`\n| Boolean\n|===\n\n== Layout/MultilineOperationIndentation\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n| -\n|===\n\nChecks the indentation
        of the right hand side operand in binary operations that\nspan more than one
        line.\n\nThe `aligned` style checks that operators are aligned if they are
        part of an `if` or `while`\ncondition, an explicit `return` statement, etc.
        In other contexts, the second operand should\nbe indented regardless of enforced
        style.\n\n=== Examples\n\n==== EnforcedStyle: aligned (default)\n\n[source,ruby]\n----\n#
        bad\nif a +\n    b\n  something &&\n  something_else\nend\n\n# good\nif a
        +\n   b\n  something &&\n    something_else\nend\n----\n\n==== EnforcedStyle:
        indented\n\n[source,ruby]\n----\n# bad\nif a +\n   b\n  something &&\n  something_else\nend\n\n#
        good\nif a +\n    b\n  something &&\n    something_else\nend\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        EnforcedStyle\n| `aligned`\n| `aligned`, `indented`\n\n| IndentationWidth\n|
        `<none>`\n| Integer\n|===\n\n== Layout/ParameterAlignment\n\n|===\n| Enabled
        by default | Safe | Supports autocorrection | Version Added | Version Changed\n\n|
        Enabled\n| Yes\n| Always\n| 0.49\n| 0.77\n|===\n\nHere we check if the parameters
        on a multi-line method call or\ndefinition are aligned.\n\nTo set the alignment
        of the first argument, use the cop\nFirstParameterIndentation.\n\n=== Examples\n\n====
        EnforcedStyle: with_first_parameter (default)\n\n[source,ruby]\n----\n# good\n\ndef
        foo(bar,\n        baz)\n  123\nend\n\ndef foo(\n  bar,\n  baz\n)\n  123\nend\n\n#
        bad\n\ndef foo(bar,\n     baz)\n  123\nend\n\n# bad\n\ndef foo(\n  bar,\n
        \    baz)\n  123\nend\n----\n\n==== EnforcedStyle: with_fixed_indentation\n\n[source,ruby]\n----\n#
        good\n\ndef foo(bar,\n  baz)\n  123\nend\n\ndef foo(\n  bar,\n  baz\n)\n  123\nend\n\n#
        bad\n\ndef foo(bar,\n        baz)\n  123\nend\n\n# bad\n\ndef foo(\n  bar,\n
        \    baz)\n  123\nend\n----\n\n=== Configurable attributes\n\n|===\n| Name
        | Default value | Configurable values\n\n| EnforcedStyle\n| `with_first_parameter`\n|
        `with_first_parameter`, `with_fixed_indentation`\n\n| IndentationWidth\n|
        `<none>`\n| Integer\n|===\n\n=== References\n\n* https://rubystyle.guide#no-double-indent\n\n==
        Layout/RedundantLineBreak\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Disabled\n| Yes\n| Always\n|
        1.13\n| -\n|===\n\nChecks whether certain expressions, e.g. method calls,
        that could fit\ncompletely on a single line, are broken up into multiple lines
        unnecessarily.\n\n=== Examples\n\n==== any configuration\n\n[source,ruby]\n----\n#
        bad\nfoo(\n  a,\n  b\n)\n\nputs 'string that fits on ' \\\n     'a single
        line'\n\nthings\n  .select { |thing| thing.cond? }\n  .join('-')\n\n# good\nfoo(a,
        b)\n\nputs 'string that fits on a single line'\n\nthings.select { |thing|
        thing.cond? }.join('-')\n----\n\n==== InspectBlocks: false (default)\n\n[source,ruby]\n----\n#
        good\nfoo(a) do |x|\n  puts x\nend\n----\n\n==== InspectBlocks: true\n\n[source,ruby]\n----\n#
        bad\nfoo(a) do |x|\n  puts x\nend\n\n# good\nfoo(a) { |x| puts x }\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        InspectBlocks\n| `false`\n| Boolean\n|===\n\n== Layout/RescueEnsureAlignment\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n| -\n|===\n\nChecks whether
        the rescue and ensure keywords are aligned\nproperly.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nbegin\n  something\n  rescue\n  puts 'error'\nend\n\n# good\nbegin\n
        \ something\nrescue\n  puts 'error'\nend\n----\n\n== Layout/SingleLineBlockChain\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Disabled\n| Yes\n| Always\n| 1.14\n| -\n|===\n\nChecks if method
        calls are chained onto single line blocks. It considers that a\nline break
        before the dot improves the readability of the code.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nexample.select { |item| item.cond? }.join('-')\n\n# good\nexample.select
        { |item| item.cond? }\n       .join('-')\n\n# good (not a concern for this
        cop)\nexample.select do |item|\n  item.cond?\nend.join('-')\n----\n\n== Layout/SpaceAfterColon\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n| -\n|===\n\nChecks for colon
        (:) not followed by some kind of space.\nN.B. this cop does not handle spaces
        after a ternary operator, which are\ninstead handled by Layout/SpaceAroundOperators.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\ndef f(a:, b:2); {a:3}; end\n\n# good\ndef
        f(a:, b: 2); {a: 3}; end\n----\n\n=== References\n\n* https://rubystyle.guide#spaces-operators\n\n==
        Layout/SpaceAfterComma\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n|
        -\n|===\n\nChecks for comma (,) not followed by some kind of space.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\n[1,2]\n{ foo:bar,}\n\n# good\n[1,
        2]\n{ foo:bar, }\n----\n\n=== References\n\n* https://rubystyle.guide#spaces-operators\n\n==
        Layout/SpaceAfterMethodName\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n|
        0.49\n| -\n|===\n\nChecks for space between a method name and a left parenthesis
        in defs.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\ndef func (x) end\ndef
        method= (y) end\n\n# good\ndef func(x) end\ndef method=(y) end\n----\n\n===
        References\n\n* https://rubystyle.guide#parens-no-spaces\n\n== Layout/SpaceAfterNot\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n| -\n|===\n\nChecks for space
        after `!`.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\n! something\n\n#
        good\n!something\n----\n\n=== References\n\n* https://rubystyle.guide#no-space-bang\n\n==
        Layout/SpaceAfterSemicolon\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n|
        0.49\n| -\n|===\n\nChecks for semicolon (;) not followed by some kind of space.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\nx = 1;y = 2\n\n# good\nx = 1; y =
        2\n----\n\n=== References\n\n* https://rubystyle.guide#spaces-operators\n\n==
        Layout/SpaceAroundBlockParameters\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n|
        0.49\n| -\n|===\n\nChecks the spacing inside and after block parameters pipes.
        Line breaks\ninside parameter pipes are checked by `Layout/MultilineBlockLayout`
        and\nnot by this cop.\n\n=== Examples\n\n==== EnforcedStyleInsidePipes: no_space
        (default)\n\n[source,ruby]\n----\n# bad\n{}.each { | x,  y |puts x }\n->(
        x,  y ) { puts x }\n\n# good\n{}.each { |x, y| puts x }\n->(x, y) { puts x
        }\n----\n\n==== EnforcedStyleInsidePipes: space\n\n[source,ruby]\n----\n#
        bad\n{}.each { |x,  y| puts x }\n->(x,  y) { puts x }\n\n# good\n{}.each {
        | x, y | puts x }\n->( x, y ) { puts x }\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| EnforcedStyleInsidePipes\n|
        `no_space`\n| `space`, `no_space`\n|===\n\n== Layout/SpaceAroundEqualsInParameterDefault\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n| -\n|===\n\nChecks that the
        equals signs in parameter default assignments\nhave or don't have surrounding
        space depending on configuration.\n\n=== Examples\n\n==== EnforcedStyle: space
        (default)\n\n[source,ruby]\n----\n# bad\ndef some_method(arg1=:default, arg2=nil,
        arg3=[])\n  # do something...\nend\n\n# good\ndef some_method(arg1 = :default,
        arg2 = nil, arg3 = [])\n  # do something...\nend\n----\n\n==== EnforcedStyle:
        no_space\n\n[source,ruby]\n----\n# bad\ndef some_method(arg1 = :default, arg2
        = nil, arg3 = [])\n  # do something...\nend\n\n# good\ndef some_method(arg1=:default,
        arg2=nil, arg3=[])\n  # do something...\nend\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| EnforcedStyle\n| `space`\n|
        `space`, `no_space`\n|===\n\n=== References\n\n* https://rubystyle.guide#spaces-around-equals\n\n==
        Layout/SpaceAroundKeyword\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n|
        0.49\n| -\n|===\n\nChecks the spacing around the keywords.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nsomething 'test'do|x|\nend\n\nwhile(something)\nend\n\nsomething = 123if
        test\n\n# good\nsomething 'test' do |x|\nend\n\nwhile (something)\nend\n\nsomething
        = 123 if test\n----\n\n== Layout/SpaceAroundMethodCallOperator\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.82\n| -\n|===\n\nChecks method
        call operators to not have spaces around them.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nfoo. bar\nfoo .bar\nfoo . bar\nfoo. bar .buzz\nfoo\n  . bar\n  . buzz\nfoo&.
        bar\nfoo &.bar\nfoo &. bar\nfoo &. bar&. buzz\nRuboCop:: Cop\nRuboCop:: Cop::
        Base\n:: RuboCop::Cop\n\n# good\nfoo.bar\nfoo.bar.buzz\nfoo\n  .bar\n  .buzz\nfoo&.bar\nfoo&.bar&.buzz\nRuboCop::Cop\nRuboCop::Cop::Base\n::RuboCop::Cop\n----\n\n==
        Layout/SpaceAroundOperators\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n|
        0.49\n| -\n|===\n\nChecks that operators have space around them, except for
        ** which\nshould or shouldn't have surrounding space depending on configuration.\nIt
        allows vertical alignment consisting of one or more whitespace\naround operators.\n\nThis
        cop has `AllowForAlignment` option. When `true`, allows most\nuses of extra
        spacing if the intent is to align with an operator on\nthe previous or next
        line, not counting empty lines or comment lines.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\ntotal = 3*4\n\"apple\"+\"juice\"\nmy_number = 38/4\n\n# good\ntotal =
        3 * 4\n\"apple\" + \"juice\"\nmy_number = 38 / 4\n----\n\n==== AllowForAlignment:
        true (default)\n\n[source,ruby]\n----\n# good\n{\n  1 =>  2,\n  11 => 3\n}\n----\n\n====
        AllowForAlignment: false\n\n[source,ruby]\n----\n# bad\n{\n  1 =>  2,\n  11
        => 3\n}\n----\n\n==== EnforcedStyleForExponentOperator: no_space (default)\n\n[source,ruby]\n----\n#
        bad\na ** b\n\n# good\na**b\n----\n\n==== EnforcedStyleForExponentOperator:
        space\n\n[source,ruby]\n----\n# bad\na**b\n\n# good\na ** b\n----\n\n====
        EnforcedStyleForRationalLiterals: no_space (default)\n\n[source,ruby]\n----\n#
        bad\n1 / 48r\n\n# good\n1/48r\n----\n\n==== EnforcedStyleForRationalLiterals:
        space\n\n[source,ruby]\n----\n# bad\n1/48r\n\n# good\n1 / 48r\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        AllowForAlignment\n| `true`\n| Boolean\n\n| EnforcedStyleForExponentOperator\n|
        `no_space`\n| `space`, `no_space`\n\n| EnforcedStyleForRationalLiterals\n|
        `no_space`\n| `space`, `no_space`\n|===\n\n=== References\n\n* https://rubystyle.guide#spaces-operators\n\n==
        Layout/SpaceBeforeBlockBraces\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n|
        0.49\n| 0.52\n|===\n\nChecks that block braces have or don't have a space
        before the opening\nbrace depending on configuration.\n\n=== Examples\n\n====
        EnforcedStyle: space (default)\n\n[source,ruby]\n----\n# bad\nfoo.map{ |a|\n
        \ a.bar.to_s\n}\n\n# good\nfoo.map { |a|\n  a.bar.to_s\n}\n----\n\n==== EnforcedStyle:
        no_space\n\n[source,ruby]\n----\n# bad\nfoo.map { |a|\n  a.bar.to_s\n}\n\n#
        good\nfoo.map{ |a|\n  a.bar.to_s\n}\n----\n\n==== EnforcedStyleForEmptyBraces:
        space (default)\n\n[source,ruby]\n----\n# bad\n7.times{}\n\n# good\n7.times
        {}\n----\n\n==== EnforcedStyleForEmptyBraces: no_space\n\n[source,ruby]\n----\n#
        bad\n7.times {}\n\n# good\n7.times{}\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| EnforcedStyle\n| `space`\n|
        `space`, `no_space`\n\n| EnforcedStyleForEmptyBraces\n| `space`\n| `space`,
        `no_space`\n|===\n\n== Layout/SpaceBeforeBrackets\n\n|===\n| Enabled by default
        | Safe | Supports autocorrection | Version Added | Version Changed\n\n| Pending\n|
        Yes\n| Always\n| 1.7\n| -\n|===\n\nChecks for space between the name of a
        receiver and a left\nbrackets.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\ncollection
        [index_or_key]\n\n# good\ncollection[index_or_key]\n----\n\n=== References\n\n*
        https://rubystyle.guide#space-in-brackets-access\n\n== Layout/SpaceBeforeComma\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n| -\n|===\n\nChecks for comma
        (,) preceded by space.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\n[1 ,
        2 , 3]\na(1 , 2)\neach { |a , b| }\n\n# good\n[1, 2, 3]\na(1, 2)\neach { |a,
        b| }\n----\n\n== Layout/SpaceBeforeComment\n\n|===\n| Enabled by default |
        Safe | Supports autocorrection | Version Added | Version Changed\n\n| Enabled\n|
        Yes\n| Always\n| 0.49\n| -\n|===\n\nChecks for missing space between a token
        and a comment on the\nsame line.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\n1 + 1# this operation does ...\n\n# good\n1 + 1 # this operation does
        ...\n----\n\n== Layout/SpaceBeforeFirstArg\n\n|===\n| Enabled by default |
        Safe | Supports autocorrection | Version Added | Version Changed\n\n| Enabled\n|
        Yes\n| Always\n| 0.49\n| -\n|===\n\nChecks that exactly one space is used
        between a method name and the\nfirst argument for method calls without parentheses.\n\nAlternatively,
        extra spaces can be added to align the argument with\nsomething on a preceding
        or following line, if the AllowForAlignment\nconfig parameter is true.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\nsomething  x\nsomething   y, z\nsomething'hello'\n\n#
        good\nsomething x\nsomething y, z\nsomething 'hello'\n----\n\n=== Configurable
        attributes\n\n|===\n| Name | Default value | Configurable values\n\n| AllowForAlignment\n|
        `true`\n| Boolean\n|===\n\n== Layout/SpaceBeforeSemicolon\n\n|===\n| Enabled
        by default | Safe | Supports autocorrection | Version Added | Version Changed\n\n|
        Enabled\n| Yes\n| Always\n| 0.49\n| -\n|===\n\nChecks for semicolon (;) preceded
        by space.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\nx = 1 ; y = 2\n\n#
        good\nx = 1; y = 2\n----\n\n== Layout/SpaceInLambdaLiteral\n\n|===\n| Enabled
        by default | Safe | Supports autocorrection | Version Added | Version Changed\n\n|
        Enabled\n| Yes\n| Always\n| 0.49\n| -\n|===\n\nChecks for spaces between `->`
        and opening parameter\nparenthesis (`(`) in lambda literals.\n\n=== Examples\n\n====
        EnforcedStyle: require_no_space (default)\n\n[source,ruby]\n----\n# bad\na
        = -> (x, y) { x + y }\n\n# good\na = ->(x, y) { x + y }\n----\n\n==== EnforcedStyle:
        require_space\n\n[source,ruby]\n----\n# bad\na = ->(x, y) { x + y }\n\n# good\na
        = -> (x, y) { x + y }\n----\n\n=== Configurable attributes\n\n|===\n| Name
        | Default value | Configurable values\n\n| EnforcedStyle\n| `require_no_space`\n|
        `require_no_space`, `require_space`\n|===\n\n== Layout/SpaceInsideArrayLiteralBrackets\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.52\n| -\n|===\n\nChecks that brackets
        used for array literals have or don't have\nsurrounding space depending on
        configuration.\n\n=== Examples\n\n==== EnforcedStyle: no_space (default)\n\n[source,ruby]\n----\n#
        The `no_space` style enforces that array literals have\n# no surrounding space.\n\n#
        bad\narray = [ a, b, c, d ]\n\n# good\narray = [a, b, c, d]\n----\n\n====
        EnforcedStyle: space\n\n[source,ruby]\n----\n# The `space` style enforces
        that array literals have\n# surrounding space.\n\n# bad\narray = [a, b, c,
        d]\n\n# good\narray = [ a, b, c, d ]\n----\n\n==== EnforcedStyle: compact\n\n[source,ruby]\n----\n#
        The `compact` style normally requires a space inside\n# array brackets, with
        the exception that successive left\n# or right brackets are collapsed together
        in nested arrays.\n\n# bad\narray = [ a, [ b, c ] ]\narray = [\n  [ a ],\n
        \ [ b, c ]\n]\n\n# good\narray = [ a, [ b, c ]]\narray = [[ a ],\n  [ b, c
        ]]\n----\n\n==== EnforcedStyleForEmptyBrackets: no_space (default)\n\n[source,ruby]\n----\n#
        The `no_space` EnforcedStyleForEmptyBrackets style enforces that\n# empty
        array brackets do not contain spaces.\n\n# bad\nfoo = [ ]\nbar = [     ]\n\n#
        good\nfoo = []\nbar = []\n----\n\n==== EnforcedStyleForEmptyBrackets: space\n\n[source,ruby]\n----\n#
        The `space` EnforcedStyleForEmptyBrackets style enforces that\n# empty array
        brackets contain exactly one space.\n\n# bad\nfoo = []\nbar = [    ]\n\n#
        good\nfoo = [ ]\nbar = [ ]\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| EnforcedStyle\n| `no_space`\n|
        `space`, `no_space`, `compact`\n\n| EnforcedStyleForEmptyBrackets\n| `no_space`\n|
        `space`, `no_space`\n|===\n\n== Layout/SpaceInsideArrayPercentLiteral\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n| -\n|===\n\nChecks for unnecessary
        additional spaces inside array percent literals\n(i.e. %i/%w).\n\nNote that
        blank percent literals (e.g. `%i( )`) are checked by\n`Layout/SpaceInsidePercentLiteralDelimiters`.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\n%w(foo  bar  baz)\n# good\n%i(foo
        bar baz)\n----\n\n== Layout/SpaceInsideBlockBraces\n\n|===\n| Enabled by default
        | Safe | Supports autocorrection | Version Added | Version Changed\n\n| Enabled\n|
        Yes\n| Always\n| 0.49\n| -\n|===\n\nChecks that block braces have or don't
        have surrounding space inside\nthem on configuration. For blocks taking parameters,
        it checks that the\nleft brace has or doesn't have trailing space depending
        on\nconfiguration.\n\n=== Examples\n\n==== EnforcedStyle: space (default)\n\n[source,ruby]\n----\n#
        The `space` style enforces that block braces have\n# surrounding space.\n\n#
        bad\nsome_array.each {puts e}\n\n# good\nsome_array.each { puts e }\n----\n\n====
        EnforcedStyle: no_space\n\n[source,ruby]\n----\n# The `no_space` style enforces
        that block braces don't\n# have surrounding space.\n\n# bad\nsome_array.each
        { puts e }\n\n# good\nsome_array.each {puts e}\n----\n\n==== EnforcedStyleForEmptyBraces:
        no_space (default)\n\n[source,ruby]\n----\n# The `no_space` EnforcedStyleForEmptyBraces
        style enforces that\n# block braces don't have a space in between when empty.\n\n#
        bad\nsome_array.each {   }\nsome_array.each {  }\nsome_array.each { }\n\n#
        good\nsome_array.each {}\n----\n\n==== EnforcedStyleForEmptyBraces: space\n\n[source,ruby]\n----\n#
        The `space` EnforcedStyleForEmptyBraces style enforces that\n# block braces
        have at least a space in between when empty.\n\n# bad\nsome_array.each {}\n\n#
        good\nsome_array.each { }\nsome_array.each {  }\nsome_array.each {   }\n----\n\n====
        SpaceBeforeBlockParameters: true (default)\n\n[source,ruby]\n----\n# The SpaceBeforeBlockParameters
        style set to `true` enforces that\n# there is a space between `{` and `|`.
        Overrides `EnforcedStyle`\n# if there is a conflict.\n\n# bad\n[1, 2, 3].each
        {|n| n * 2 }\n\n# good\n[1, 2, 3].each { |n| n * 2 }\n----\n\n==== SpaceBeforeBlockParameters:
        false\n\n[source,ruby]\n----\n# The SpaceBeforeBlockParameters style set to
        `false` enforces that\n# there is no space between `{` and `|`. Overrides
        `EnforcedStyle`\n# if there is a conflict.\n\n# bad\n[1, 2, 3].each { |n|
        n * 2 }\n\n# good\n[1, 2, 3].each {|n| n * 2 }\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| EnforcedStyle\n| `space`\n|
        `space`, `no_space`\n\n| EnforcedStyleForEmptyBraces\n| `no_space`\n| `space`,
        `no_space`\n\n| SpaceBeforeBlockParameters\n| `true`\n| Boolean\n|===\n\n==
        Layout/SpaceInsideHashLiteralBraces\n\n|===\n| Enabled by default | Safe |
        Supports autocorrection | Version Added | Version Changed\n\n| Enabled\n|
        Yes\n| Always\n| 0.49\n| -\n|===\n\nChecks that braces used for hash literals
        have or don't have\nsurrounding space depending on configuration.\n\n=== Examples\n\n====
        EnforcedStyle: space (default)\n\n[source,ruby]\n----\n# The `space` style
        enforces that hash literals have\n# surrounding space.\n\n# bad\nh = {a: 1,
        b: 2}\n\n# good\nh = { a: 1, b: 2 }\n----\n\n==== EnforcedStyle: no_space\n\n[source,ruby]\n----\n#
        The `no_space` style enforces that hash literals have\n# no surrounding space.\n\n#
        bad\nh = { a: 1, b: 2 }\n\n# good\nh = {a: 1, b: 2}\n----\n\n==== EnforcedStyle:
        compact\n\n[source,ruby]\n----\n# The `compact` style normally requires a
        space inside\n# hash braces, with the exception that successive left\n# braces
        or right braces are collapsed together in nested hashes.\n\n# bad\nh = { a:
        { b: 2 } }\nfoo = { { a: 1 } => { b: { c: 2 } } }\n\n# good\nh = { a: { b:
        2 }}\nfoo = {{ a: 1 } => { b: { c: 2 }}}\n----\n\n==== EnforcedStyleForEmptyBraces:
        no_space (default)\n\n[source,ruby]\n----\n# The `no_space` EnforcedStyleForEmptyBraces
        style enforces that\n# empty hash braces do not contain spaces.\n\n# bad\nfoo
        = { }\nbar = {    }\nbaz = {\n}\n\n# good\nfoo = {}\nbar = {}\nbaz = {}\n----\n\n====
        EnforcedStyleForEmptyBraces: space\n\n[source,ruby]\n----\n# The `space` EnforcedStyleForEmptyBraces
        style enforces that\n# empty hash braces contain space.\n\n# bad\nfoo = {}\n\n#
        good\nfoo = { }\nfoo = {    }\nfoo = {\n}\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| EnforcedStyle\n| `space`\n|
        `space`, `no_space`, `compact`\n\n| EnforcedStyleForEmptyBraces\n| `no_space`\n|
        `space`, `no_space`\n|===\n\n=== References\n\n* https://rubystyle.guide#spaces-braces\n\n==
        Layout/SpaceInsideParens\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n|
        1.22\n|===\n\nChecks for spaces inside ordinary round parentheses.\n\n===
        Examples\n\n==== EnforcedStyle: no_space (default)\n\n[source,ruby]\n----\n#
        The `no_space` style enforces that parentheses do not have spaces.\n\n# bad\nf(
        3)\ng = (a + 3 )\nf( )\n\n# good\nf(3)\ng = (a + 3)\nf()\n----\n\n==== EnforcedStyle:
        space\n\n[source,ruby]\n----\n# The `space` style enforces that parentheses
        have a space at the\n# beginning and end.\n# Note: Empty parentheses should
        not have spaces.\n\n# bad\nf(3)\ng = (a + 3)\ny( )\n\n# good\nf( 3 )\ng =
        ( a + 3 )\ny()\n----\n\n==== EnforcedStyle: compact\n\n[source,ruby]\n----\n#
        The `compact` style enforces that parentheses have a space at the\n# beginning
        with the exception that successive parentheses are allowed.\n# Note: Empty
        parentheses should not have spaces.\n\n# bad\nf(3)\ng = (a + 3)\ny( )\ng(
        f( x ) )\ng( f( x( 3 ) ), 5 )\ng( ( ( 3 + 5 ) * f) ** x, 5 )\n\n# good\nf(
        3 )\ng = ( a + 3 )\ny()\ng( f( x ))\ng( f( x( 3 )), 5 )\ng((( 3 + 5 ) * f
        ) ** x, 5 )\n----\n\n=== Configurable attributes\n\n|===\n| Name | Default
        value | Configurable values\n\n| EnforcedStyle\n| `no_space`\n| `space`, `compact`,
        `no_space`\n|===\n\n=== References\n\n* https://rubystyle.guide#spaces-braces\n\n==
        Layout/SpaceInsidePercentLiteralDelimiters\n\n|===\n| Enabled by default |
        Safe | Supports autocorrection | Version Added | Version Changed\n\n| Enabled\n|
        Yes\n| Always\n| 0.49\n| -\n|===\n\nChecks for unnecessary additional spaces
        inside the delimiters of\n%i/%w/%x literals.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\n%i( foo bar baz )\n\n# good\n%i(foo bar baz)\n\n# bad\n%w( foo bar baz
        )\n\n# good\n%w(foo bar baz)\n\n# bad\n%x(  ls -l )\n\n# good\n%x(ls -l)\n\n#
        bad\n%w( )\n%w(\n)\n\n# good\n%w()\n----\n\n== Layout/SpaceInsideRangeLiteral\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n| -\n|===\n\nChecks for spaces
        inside range literals.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\n1 ..
        3\n\n# good\n1..3\n\n# bad\n'a' .. 'z'\n\n# good\n'a'..'z'\n----\n\n=== References\n\n*
        https://rubystyle.guide#no-space-inside-range-literals\n\n== Layout/SpaceInsideReferenceBrackets\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.52\n| 0.53\n|===\n\nChecks that
        reference brackets have or don't have\nsurrounding space depending on configuration.\n\n===
        Examples\n\n==== EnforcedStyle: no_space (default)\n\n[source,ruby]\n----\n#
        The `no_space` style enforces that reference brackets have\n# no surrounding
        space.\n\n# bad\nhash[ :key ]\narray[ index ]\n\n# good\nhash[:key]\narray[index]\n----\n\n====
        EnforcedStyle: space\n\n[source,ruby]\n----\n# The `space` style enforces
        that reference brackets have\n# surrounding space.\n\n# bad\nhash[:key]\narray[index]\n\n#
        good\nhash[ :key ]\narray[ index ]\n----\n\n==== EnforcedStyleForEmptyBrackets:
        no_space (default)\n\n[source,ruby]\n----\n# The `no_space` EnforcedStyleForEmptyBrackets
        style enforces that\n# empty reference brackets do not contain spaces.\n\n#
        bad\nfoo[ ]\nfoo[     ]\nfoo[\n]\n\n# good\nfoo[]\n----\n\n==== EnforcedStyleForEmptyBrackets:
        space\n\n[source,ruby]\n----\n# The `space` EnforcedStyleForEmptyBrackets
        style enforces that\n# empty reference brackets contain exactly one space.\n\n#
        bad\nfoo[]\nfoo[    ]\nfoo[\n]\n\n# good\nfoo[ ]\n----\n\n=== Configurable
        attributes\n\n|===\n| Name | Default value | Configurable values\n\n| EnforcedStyle\n|
        `no_space`\n| `space`, `no_space`\n\n| EnforcedStyleForEmptyBrackets\n| `no_space`\n|
        `space`, `no_space`\n|===\n\n== Layout/SpaceInsideStringInterpolation\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n| -\n|===\n\nChecks for whitespace
        within string interpolations.\n\n=== Examples\n\n==== EnforcedStyle: no_space
        (default)\n\n[source,ruby]\n----\n# bad\n   var = \"This is the #{ space }
        example\"\n\n# good\n   var = \"This is the #{no_space} example\"\n----\n\n====
        EnforcedStyle: space\n\n[source,ruby]\n----\n# bad\n   var = \"This is the
        #{no_space} example\"\n\n# good\n   var = \"This is the #{ space } example\"\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        EnforcedStyle\n| `no_space`\n| `space`, `no_space`\n|===\n\n=== References\n\n*
        https://rubystyle.guide#string-interpolation\n\n== Layout/TrailingEmptyLines\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n| 0.77\n|===\n\nLooks for trailing
        blank lines and a final newline in the\nsource code.\n\n=== Examples\n\n====
        EnforcedStyle: final_newline (default)\n\n[source,ruby]\n----\n# `final_newline`
        looks for one newline at the end of files.\n\n# bad\nclass Foo; end\n\n# EOF\n\n#
        bad\nclass Foo; end # EOF\n\n# good\nclass Foo; end\n# EOF\n----\n\n==== EnforcedStyle:
        final_blank_line\n\n[source,ruby]\n----\n# `final_blank_line` looks for one
        blank line followed by a new line\n# at the end of files.\n\n# bad\nclass
        Foo; end\n# EOF\n\n# bad\nclass Foo; end # EOF\n\n# good\nclass Foo; end\n\n#
        EOF\n----\n\n=== Configurable attributes\n\n|===\n| Name | Default value |
        Configurable values\n\n| EnforcedStyle\n| `final_newline`\n| `final_newline`,
        `final_blank_line`\n|===\n\n=== References\n\n* https://rubystyle.guide#newline-eof\n\n==
        Layout/TrailingWhitespace\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n|
        0.49\n| 1.0\n|===\n\nLooks for trailing whitespace in the source code.\n\n===
        Examples\n\n[source,ruby]\n----\n# The line in this example contains spaces
        after the 0.\n# bad\nx = 0\n\n# The line in this example ends directly after
        the 0.\n# good\nx = 0\n----\n\n==== AllowInHeredoc: false (default)\n\n[source,ruby]\n----\n#
        The line in this example contains spaces after the 0.\n# bad\ncode = <<~RUBY\n
        \ x = 0\nRUBY\n\n# ok\ncode = <<~RUBY\n  x = 0 #{}\nRUBY\n\n# good\ntrailing_whitespace
        = ' '\ncode = <<~RUBY\n  x = 0#{trailing_whitespace}\nRUBY\n----\n\n==== AllowInHeredoc:
        true\n\n[source,ruby]\n----\n# The line in this example contains spaces after
        the 0.\n# good\ncode = <<~RUBY\n  x = 0\nRUBY\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| AllowInHeredoc\n| `false`\n|
        Boolean\n|===\n\n=== References\n\n* https://rubystyle.guide#no-trailing-whitespace\n\ninclude::../partials/cops_layout_footer.adoc[]\n"
  recorded_at: Mon, 27 May 2024 05:30:39 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop/v1.64.0/docs/modules/ROOT/pages/cops_lint.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '123499'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"b2251455dfd7a296fad6e4c5b2c1f2af065ae787354a09e7ec7ee43d10997089"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - ED48:3BC15A:1331EAB:146AE6B:66541A7D
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 27 May 2024 05:30:39 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-fra-eddf8230140-FRA
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1716787839.040424,VS0,VE217
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - 298122e13dca9568edce1b5f03cc7d76b7df4e5b
      Expires:
      - Mon, 27 May 2024 05:35:39 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: "////\n  Do NOT edit this file by hand directly, as it is automatically
        generated.\n\n  Please make any necessary changes to the cop documentation
        within the source files themselves.\n////\n\n= Lint\n\n== Lint/AmbiguousAssignment\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Pending\n| Yes\n| No\n| 1.7\n| -\n|===\n\nChecks for mistyped
        shorthand assignments.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\nx =-
        y\nx =+ y\nx =* y\nx =! y\n\n# good\nx -= y # or x = -y\nx += y # or x = +y\nx
        *= y # or x = *y\nx != y # or x = !y\n----\n\n== Lint/AmbiguousBlockAssociation\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.48\n| 1.13\n|===\n\nChecks for
        ambiguous block association with method\nwhen param passed without parentheses.\n\nThis
        cop can customize allowed methods with `AllowedMethods`.\nBy default, there
        are no methods to allowed.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\nsome_method
        a { |val| puts val }\n----\n\n[source,ruby]\n----\n# good\n# With parentheses,
        there's no ambiguity.\nsome_method(a { |val| puts val })\n# or (different
        meaning)\nsome_method(a) { |val| puts val }\n\n# good\n# Operator methods
        require no disambiguation\nfoo == bar { |b| b.baz }\n\n# good\n# Lambda arguments
        require no disambiguation\nfoo = ->(bar) { bar.baz }\n----\n\n==== AllowedMethods:
        [] (default)\n\n[source,ruby]\n----\n# bad\nexpect { do_something }.to change
        { object.attribute }\n----\n\n==== AllowedMethods: [change]\n\n[source,ruby]\n----\n#
        good\nexpect { do_something }.to change { object.attribute }\n----\n\n====
        AllowedPatterns: [] (default)\n\n[source,ruby]\n----\n# bad\nexpect { do_something
        }.to change { object.attribute }\n----\n\n==== AllowedPatterns: ['change']\n\n[source,ruby]\n----\n#
        good\nexpect { do_something }.to change { object.attribute }\nexpect { do_something
        }.to not_change { object.attribute }\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| AllowedMethods\n| `[]`\n|
        Array\n\n| AllowedPatterns\n| `[]`\n| Array\n|===\n\n== Lint/AmbiguousOperator\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.17\n| 0.83\n|===\n\nChecks for
        ambiguous operators in the first argument of a\nmethod invocation without
        parentheses.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\n\n# The `*` is
        interpreted as a splat operator but it could possibly be\n# a `*` method invocation
        (i.e. `do_something.*(some_array)`).\ndo_something *some_array\n----\n\n[source,ruby]\n----\n#
        good\n\n# With parentheses, there's no ambiguity.\ndo_something(*some_array)\n----\n\n===
        References\n\n* https://rubystyle.guide#method-invocation-parens\n\n== Lint/AmbiguousOperatorPrecedence\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Pending\n| Yes\n| Always\n| 1.21\n| -\n|===\n\nLooks for expressions
        containing multiple binary operators\nwhere precedence is ambiguous due to
        lack of parentheses. For example,\nin `1 + 2 * 3`, the multiplication will
        happen before the addition, but\nlexically it appears that the addition will
        happen first.\n\nThe cop does not consider unary operators (ie. `!a` or `-b`)
        or comparison\noperators (ie. `a =~ b`) because those are not ambiguous.\n\nNOTE:
        Ranges are handled by `Lint/AmbiguousRange`.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\na + b * c\na || b && c\na ** b + c\n\n# good (different precedence)\na
        + (b * c)\na || (b && c)\n(a ** b) + c\n\n# good (same precedence)\na + b
        + c\na * b / c % d\n----\n\n== Lint/AmbiguousRange\n\n|===\n| Enabled by default
        | Safe | Supports autocorrection | Version Added | Version Changed\n\n| Pending\n|
        Yes\n| Always (Unsafe)\n| 1.19\n| -\n|===\n\nChecks for ambiguous ranges.\n\nRanges
        have quite low precedence, which leads to unexpected behavior when\nusing
        a range with other operators. This cop avoids that by making ranges\nexplicit
        by requiring parenthesis around complex range boundaries (anything\nthat is
        not a literal: numerics, strings, symbols, etc.).\n\nThis cop can be configured
        with `RequireParenthesesForMethodChains` in order to\nspecify whether method
        chains (including `self.foo`) should be wrapped in parens\nby this cop.\n\nNOTE:
        Regardless of this configuration, if a method receiver is a basic literal\nvalue,
        it will be wrapped in order to prevent the ambiguity of `1..2.to_a`.\n\n===
        Safety\n\nThe cop autocorrects by wrapping the entire boundary in parentheses,
        which\nmakes the outcome more explicit but is possible to not be the intention
        of the\nprogrammer. For this reason, this cop's autocorrect is unsafe (it
        will not\nchange the behavior of the code, but will not necessarily match
        the\nintent of the program).\n\n=== Examples\n\n[source,ruby]\n----\n# bad\nx
        || 1..2\n(x || 1..2)\n1..2.to_a\n\n# good, unambiguous\n1..2\n'a'..'z'\n:bar..:baz\nMyClass::MIN..MyClass::MAX\n@min..@max\na..b\n-a..b\n\n#
        good, ambiguity removed\nx || (1..2)\n(x || 1)..2\n(x || 1)..(y || 2)\n(1..2).to_a\n----\n\n====
        RequireParenthesesForMethodChains: false (default)\n\n[source,ruby]\n----\n#
        good\na.foo..b.bar\n(a.foo)..(b.bar)\n----\n\n==== RequireParenthesesForMethodChains:
        true\n\n[source,ruby]\n----\n# bad\na.foo..b.bar\n\n# good\n(a.foo)..(b.bar)\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        RequireParenthesesForMethodChains\n| `false`\n| Boolean\n|===\n\n== Lint/AmbiguousRegexpLiteral\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.17\n| 0.83\n|===\n\nChecks for
        ambiguous regexp literals in the first argument of\na method invocation without
        parentheses.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\n\n# This is interpreted
        as a method invocation with a regexp literal,\n# but it could possibly be
        `/` method invocations.\n# (i.e. `do_something./(pattern)./(i)`)\ndo_something
        /pattern/i\n----\n\n[source,ruby]\n----\n# good\n\n# With parentheses, there's
        no ambiguity.\ndo_something(/pattern/i)\n----\n\n== Lint/AssignmentInCondition\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always (Unsafe)\n| 0.9\n| 1.45\n|===\n\nChecks
        for assignments in the conditions of\nif/while/until.\n\n`AllowSafeAssignment`
        option for safe assignment.\nBy safe assignment we mean putting parentheses
        around\nan assignment to indicate \"I know I'm using an assignment\nas a condition.
        It's not a mistake.\"\n\n=== Safety\n\nThis cop's autocorrection is unsafe
        because it assumes that\nthe author meant to use an assignment result as a
        condition.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\nif some_var = value\n
        \ do_something\nend\n\n# good\nif some_var == value\n  do_something\nend\n----\n\n====
        AllowSafeAssignment: true (default)\n\n[source,ruby]\n----\n# good\nif (some_var
        = value)\n  do_something\nend\n----\n\n==== AllowSafeAssignment: false\n\n[source,ruby]\n----\n#
        bad\nif (some_var = value)\n  do_something\nend\n----\n\n=== Configurable
        attributes\n\n|===\n| Name | Default value | Configurable values\n\n| AllowSafeAssignment\n|
        `true`\n| Boolean\n|===\n\n=== References\n\n* https://rubystyle.guide#safe-assignment-in-condition\n\n==
        Lint/BigDecimalNew\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n| 0.53\n|
        -\n|===\n\n`BigDecimal.new()` is deprecated since BigDecimal 1.3.3.\nThis
        cop identifies places where `BigDecimal.new()`\ncan be replaced by `BigDecimal()`.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\nBigDecimal.new(123.456, 3)\n\n# good\nBigDecimal(123.456,
        3)\n----\n\n== Lint/BinaryOperatorWithIdenticalOperands\n\n|===\n| Enabled
        by default | Safe | Supports autocorrection | Version Added | Version Changed\n\n|
        Enabled\n| No\n| No\n| 0.89\n| 1.7\n|===\n\nChecks for places where binary
        operator has identical operands.\n\nIt covers arithmetic operators: `-`, `/`,
        `%`;\ncomparison operators: `==`, `===`, `=~`, `>`, `>=`, `<`, ``<=``;\nbitwise
        operators: `|`, `^`, `&`;\nboolean operators: `&&`, `||`\nand \"spaceship\"
        operator - ``<=>``.\n\nSimple arithmetic operations are allowed by this cop:
        `+`, `*`, `**`, `<<` and `>>`.\nAlthough these can be rewritten in a different
        way, it should not be necessary to\ndo so. This does not include operations
        such as `-` or `/` where the result will\nalways be the same (`x - x` will
        always be 0; `x / x` will always be 1), and\nthus are legitimate offenses.\n\n===
        Safety\n\nThis cop is unsafe as it does not consider side effects when calling
        methods\nand thus can generate false positives, for example:\n\n[source,ruby]\n----\nif
        wr.take_char == '\\0' && wr.take_char == '\\0'\n  # ...\nend\n----\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\nx / x\nx.top >= x.top\n\nif a.x !=
        0 && a.x != 0\n  do_something\nend\n\ndef child?\n  left_child || left_child\nend\n\n#
        good\nx + x\n1 << 1\n----\n\n== Lint/BooleanSymbol\n\n|===\n| Enabled by default
        | Safe | Supports autocorrection | Version Added | Version Changed\n\n| Enabled\n|
        Yes\n| Always (Unsafe)\n| 0.50\n| 1.22\n|===\n\nChecks for `:true` and `:false`
        symbols.\nIn most cases it would be a typo.\n\n=== Safety\n\nAutocorrection
        is unsafe for this cop because code relying\non `:true` or `:false` symbols
        will break when those are\nchanged to actual booleans.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\n:true\n\n# good\ntrue\n----\n\n[source,ruby]\n----\n# bad\n:false\n\n#
        good\nfalse\n----\n\n== Lint/CircularArgumentReference\n\n|===\n| Enabled
        by default | Safe | Supports autocorrection | Version Added | Version Changed\n\n|
        Enabled\n| Yes\n| No\n| 0.33\n| -\n|===\n\nChecks for circular argument references
        in optional keyword\narguments and optional ordinal arguments.\n\nThis cop
        mirrors a warning produced by MRI since 2.2.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\n\ndef bake(pie: pie)\n  pie.heat_up\nend\n----\n\n[source,ruby]\n----\n#
        good\n\ndef bake(pie:)\n  pie.refrigerate\nend\n----\n\n[source,ruby]\n----\n#
        good\n\ndef bake(pie: self.pie)\n  pie.feed_to(user)\nend\n----\n\n[source,ruby]\n----\n#
        bad\n\ndef cook(dry_ingredients = dry_ingredients)\n  dry_ingredients.reduce(&:+)\nend\n----\n\n[source,ruby]\n----\n#
        good\n\ndef cook(dry_ingredients = self.dry_ingredients)\n  dry_ingredients.combine\nend\n----\n\n==
        Lint/ConstantDefinitionInBlock\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Enabled\n| Yes\n| No\n|
        0.91\n| 1.3\n|===\n\nDo not define constants within a block, since the block's
        scope does not\nisolate or namespace the constant in any way.\n\nIf you are
        trying to define that constant once, define it outside of\nthe block instead,
        or use a variable or method if defining the constant\nin the outer scope would
        be problematic.\n\nFor meta-programming, use `const_set`.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\ntask :lint do\n  FILES_TO_LINT = Dir['lib/*.rb']\nend\n\n# bad\ndescribe
        'making a request' do\n  class TestRequest; end\nend\n\n# bad\nmodule M\n
        \ extend ActiveSupport::Concern\n  included do\n    LIST = []\n  end\nend\n\n#
        good\ntask :lint do\n  files_to_lint = Dir['lib/*.rb']\nend\n\n# good\ndescribe
        'making a request' do\n  let(:test_request) { Class.new }\n  # see also `stub_const`
        for RSpec\nend\n\n# good\nmodule M\n  extend ActiveSupport::Concern\n  included
        do\n    const_set(:LIST, [])\n  end\nend\n----\n\n==== AllowedMethods: ['enums']
        (default)\n\n[source,ruby]\n----\n# good\n\n# `enums` for Typed Enums via
        `T::Enum` in Sorbet.\n# https://sorbet.org/docs/tenum\nclass TestEnum < T::Enum\n
        \ enums do\n    Foo = new(\"foo\")\n  end\nend\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| AllowedMethods\n| `enums`\n|
        Array\n|===\n\n=== References\n\n* https://rubystyle.guide#no-constant-definition-in-block\n\n==
        Lint/ConstantOverwrittenInRescue\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Pending\n| Yes\n| Always\n|
        1.31\n| -\n|===\n\nChecks for overwriting an exception with an exception result
        by use ``rescue =>``.\n\nYou intended to write as `rescue StandardError`.\nHowever,
        you have written `rescue => StandardError`.\nIn that case, the result of `rescue`
        will overwrite `StandardError`.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nbegin\n  something\nrescue => StandardError\nend\n\n# good\nbegin\n  something\nrescue
        StandardError\nend\n----\n\n== Lint/ConstantResolution\n\n|===\n| Enabled
        by default | Safe | Supports autocorrection | Version Added | Version Changed\n\n|
        Disabled\n| Yes\n| No\n| 0.86\n| -\n|===\n\nCheck that certain constants are
        fully qualified.\n\nThis is not enabled by default because it would mark a
        lot of offenses\nunnecessarily.\n\nGenerally, gems should fully qualify all
        constants to avoid conflicts with\nthe code that uses the gem. Enable this
        cop without using `Only`/`Ignore`\n\nLarge projects will over time end up
        with one or two constant names that\nare problematic because of a conflict
        with a library or just internally\nusing the same name a namespace and a class.
        To avoid too many unnecessary\noffenses, Enable this cop with `Only: [The,
        Constant, Names, Causing, Issues]`\n\nNOTE: `Style/RedundantConstantBase`
        cop is disabled if this cop is enabled to prevent\nconflicting rules. Because
        it respects user configurations that want to enable\nthis cop which is disabled
        by default.\n\n=== Examples\n\n[source,ruby]\n----\n# By default checks every
        constant\n\n# bad\nUser\n\n# bad\nUser::Login\n\n# good\n::User\n\n# good\n::User::Login\n----\n\n====
        Only: ['Login']\n\n[source,ruby]\n----\n# Restrict this cop to only being
        concerned about certain constants\n\n# bad\nLogin\n\n# good\n::Login\n\n#
        good\nUser::Login\n----\n\n==== Ignore: ['Login']\n\n[source,ruby]\n----\n#
        Restrict this cop not being concerned about certain constants\n\n# bad\nUser\n\n#
        good\n::User::Login\n\n# good\nLogin\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| Only\n| `[]`\n| Array\n\n|
        Ignore\n| `[]`\n| Array\n|===\n\n== Lint/Debugger\n\n|===\n| Enabled by default
        | Safe | Supports autocorrection | Version Added | Version Changed\n\n| Enabled\n|
        Yes\n| No\n| 0.14\n| 1.63\n|===\n\nChecks for debug calls (such as `debugger`
        or `binding.pry`) that should\nnot be kept for production code.\n\nThe cop
        can be configured using `DebuggerMethods`. By default, a number of gems\ndebug
        entrypoints are configured (`Kernel`, `Byebug`, `Capybara`, `debug.rb`,\n`Pry`,
        `Rails`, `RubyJard`, and `WebConsole`). Additional methods can be added.\n\nSpecific
        default groups can be disabled if necessary:\n\n[source,yaml]\n----\nLint/Debugger:\n
        \ DebuggerMethods:\n    WebConsole: ~\n----\n\nYou can also add your own methods
        by adding a new category:\n\n[source,yaml]\n----\nLint/Debugger:\n  DebuggerMethods:\n
        \   MyDebugger:\n      MyDebugger.debug_this\n----\n\nSome gems also ship
        files that will start a debugging session when required,\nfor example `require
        'debug/start'` from `ruby/debug`. These requires can\nbe configured through
        `DebuggerRequires`. It has the same structure as\n`DebuggerMethods`, which
        you can read about above.\n\n=== Examples\n\n[source,ruby]\n----\n# bad (ok
        during development)\n\n# using pry\ndef some_method\n  binding.pry\n  do_something\nend\n----\n\n[source,ruby]\n----\n#
        bad (ok during development)\n\n# using byebug\ndef some_method\n  byebug\n
        \ do_something\nend\n----\n\n[source,ruby]\n----\n# good\n\ndef some_method\n
        \ do_something\nend\n----\n\n==== DebuggerMethods: [my_debugger]\n\n[source,ruby]\n----\n#
        bad (ok during development)\n\ndef some_method\n  my_debugger\nend\n----\n\n====
        DebuggerRequires: [my_debugger/start]\n\n[source,ruby]\n----\n# bad (ok during
        development)\n\nrequire 'my_debugger/start'\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| DebuggerMethods\n| `{\"Kernel\"=>[\"binding.irb\",
        \"Kernel.binding.irb\"], \"Byebug\"=>[\"byebug\", \"remote_byebug\", \"Kernel.byebug\",
        \"Kernel.remote_byebug\"], \"Capybara\"=>[\"page.save_and_open_page\", \"page.save_and_open_screenshot\",
        \"page.save_page\", \"page.save_screenshot\", \"save_and_open_page\", \"save_and_open_screenshot\",
        \"save_page\", \"save_screenshot\"], \"debug.rb\"=>[\"binding.b\", \"binding.break\",
        \"Kernel.binding.b\", \"Kernel.binding.break\"], \"Pry\"=>[\"binding.pry\",
        \"binding.remote_pry\", \"binding.pry_remote\", \"Kernel.binding.pry\", \"Kernel.binding.remote_pry\",
        \"Kernel.binding.pry_remote\", \"Pry.rescue\", \"pry\"], \"Rails\"=>[\"debugger\",
        \"Kernel.debugger\"], \"RubyJard\"=>[\"jard\"], \"WebConsole\"=>[\"binding.console\"]}`\n|
        \n\n| DebuggerRequires\n| `{\"debug.rb\"=>[\"debug/open\", \"debug/start\"]}`\n|
        \n|===\n\n== Lint/DeprecatedClassMethods\n\n|===\n| Enabled by default | Safe
        | Supports autocorrection | Version Added | Version Changed\n\n| Enabled\n|
        Yes\n| Always\n| 0.19\n| -\n|===\n\nChecks for uses of the deprecated class
        method usages.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\nFile.exists?(some_path)\nDir.exists?(some_path)\niterator?\nattr
        :name, true\nattr :name, false\nENV.freeze # Calling `Env.freeze` raises `TypeError`
        since Ruby 2.7.\nENV.clone\nENV.dup # Calling `Env.dup` raises `TypeError`
        since Ruby 3.1.\nSocket.gethostbyname(host)\nSocket.gethostbyaddr(host)\n\n#
        good\nFile.exist?(some_path)\nDir.exist?(some_path)\nblock_given?\nattr_accessor
        :name\nattr_reader :name\nENV # `ENV.freeze` cannot prohibit changes to environment
        variables.\nENV.to_h\nENV.to_h # `ENV.dup` cannot dup `ENV`, use `ENV.to_h`
        to get a copy of `ENV` as a hash.\nAddrinfo.getaddrinfo(nodename, service)\nAddrinfo.tcp(host,
        port).getnameinfo\n----\n\n== Lint/DeprecatedConstants\n\n|===\n| Enabled
        by default | Safe | Supports autocorrection | Version Added | Version Changed\n\n|
        Pending\n| Yes\n| Always\n| 1.8\n| 1.40\n|===\n\nChecks for deprecated constants.\n\nIt
        has `DeprecatedConstants` config. If there is an alternative method, you can
        set\nalternative value as `Alternative`. And you can set the deprecated version
        as\n`DeprecatedVersion`. These options can be omitted if they are not needed.\n\n
        \ DeprecatedConstants:\n    'DEPRECATED_CONSTANT':\n      Alternative: 'alternative_value'\n
        \     DeprecatedVersion: 'deprecated_version'\n\nBy default, `NIL`, `TRUE`,
        `FALSE`, `Net::HTTPServerException, `Random::DEFAULT`,\n`Struct::Group`, and
        `Struct::Passwd` are configured.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nNIL\nTRUE\nFALSE\nNet::HTTPServerException\nRandom::DEFAULT # Return
        value of Ruby 2 is `Random` instance, Ruby 3.0 is `Random` class.\nStruct::Group\nStruct::Passwd\n\n#
        good\nnil\ntrue\nfalse\nNet::HTTPClientException\nRandom.new # `::DEFAULT`
        has been deprecated in Ruby 3, `.new` is compatible with Ruby 2.\nEtc::Group\nEtc::Passwd\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        DeprecatedConstants\n| `{\"NIL\"=>{\"Alternative\"=>\"nil\", \"DeprecatedVersion\"=>\"2.4\"},
        \"TRUE\"=>{\"Alternative\"=>\"true\", \"DeprecatedVersion\"=>\"2.4\"}, \"FALSE\"=>{\"Alternative\"=>\"false\",
        \"DeprecatedVersion\"=>\"2.4\"}, \"Net::HTTPServerException\"=>{\"Alternative\"=>\"Net::HTTPClientException\",
        \"DeprecatedVersion\"=>\"2.6\"}, \"Random::DEFAULT\"=>{\"Alternative\"=>\"Random.new\",
        \"DeprecatedVersion\"=>\"3.0\"}, \"Struct::Group\"=>{\"Alternative\"=>\"Etc::Group\",
        \"DeprecatedVersion\"=>\"3.0\"}, \"Struct::Passwd\"=>{\"Alternative\"=>\"Etc::Passwd\",
        \"DeprecatedVersion\"=>\"3.0\"}}`\n| \n|===\n\n== Lint/DeprecatedOpenSSLConstant\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.84\n| -\n|===\n\nAlgorithmic constants
        for `OpenSSL::Cipher` and `OpenSSL::Digest`\ndeprecated since OpenSSL version
        2.2.0. Prefer passing a string\ninstead.\n\n=== Examples\n\n[source,ruby]\n----\n#
        Example for OpenSSL::Cipher instantiation.\n\n# bad\nOpenSSL::Cipher::AES.new(128,
        :GCM)\n\n# good\nOpenSSL::Cipher.new('aes-128-gcm')\n----\n\n[source,ruby]\n----\n#
        Example for OpenSSL::Digest instantiation.\n\n# bad\nOpenSSL::Digest::SHA256.new\n\n#
        good\nOpenSSL::Digest.new('SHA256')\n----\n\n[source,ruby]\n----\n# Example
        for ::Digest inherited class methods.\n\n# bad\nOpenSSL::Digest::SHA256.digest('foo')\n\n#
        good\nOpenSSL::Digest.digest('SHA256', 'foo')\n----\n\n== Lint/DisjunctiveAssignmentInConstructor\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| No\n| Always (Unsafe)\n| 0.62\n| 0.88\n|===\n\nChecks
        constructors for disjunctive assignments (`||=`) that should\nbe plain assignments.\n\nSo
        far, this cop is only concerned with disjunctive assignment of\ninstance variables.\n\nIn
        ruby, an instance variable is nil until a value is assigned, so the\ndisjunction
        is unnecessary. A plain assignment has the same effect.\n\n=== Safety\n\nThis
        cop is unsafe because it can register a false positive when a\nmethod is redefined
        in a subclass that calls super. For example:\n\n[source,ruby]\n----\nclass
        Base\n  def initialize\n    @config ||= 'base'\n  end\nend\n\nclass Derived
        < Base\n  def initialize\n    @config = 'derived'\n    super\n  end\nend\n----\n\nWithout
        the disjunctive assignment, `Derived` will be unable to override\nthe value
        for `@config`.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\ndef initialize\n
        \ @x ||= 1\nend\n\n# good\ndef initialize\n  @x = 1\nend\n----\n\n== Lint/DuplicateBranch\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Pending\n| Yes\n| No\n| 1.3\n| 1.7\n|===\n\nChecks that there
        are no repeated bodies\nwithin `if/unless`, `case-when`, `case-in` and `rescue`
        constructs.\n\nWith `IgnoreLiteralBranches: true`, branches are not registered\nas
        offenses if they return a basic literal value (string, symbol,\ninteger, float,
        rational, complex, `true`, `false`, or `nil`), or\nreturn an array, hash,
        regexp or range that only contains one of\nthe above basic literal values.\n\nWith
        `IgnoreConstantBranches: true`, branches are not registered\nas offenses if
        they return a constant value.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\nif
        foo\n  do_foo\n  do_something_else\nelsif bar\n  do_foo\n  do_something_else\nend\n\n#
        good\nif foo || bar\n  do_foo\n  do_something_else\nend\n\n# bad\ncase x\nwhen
        foo\n  do_foo\nwhen bar\n  do_foo\nelse\n  do_something_else\nend\n\n# good\ncase
        x\nwhen foo, bar\n  do_foo\nelse\n  do_something_else\nend\n\n# bad\nbegin\n
        \ do_something\nrescue FooError\n  handle_error\nrescue BarError\n  handle_error\nend\n\n#
        good\nbegin\n  do_something\nrescue FooError, BarError\n  handle_error\nend\n----\n\n====
        IgnoreLiteralBranches: true\n\n[source,ruby]\n----\n# good\ncase size\nwhen
        \"small\" then 100\nwhen \"medium\" then 250\nwhen \"large\" then 1000\nelse
        250\nend\n----\n\n==== IgnoreConstantBranches: true\n\n[source,ruby]\n----\n#
        good\ncase size\nwhen \"small\" then SMALL_SIZE\nwhen \"medium\" then MEDIUM_SIZE\nwhen
        \"large\" then LARGE_SIZE\nelse MEDIUM_SIZE\nend\n----\n\n=== Configurable
        attributes\n\n|===\n| Name | Default value | Configurable values\n\n| IgnoreLiteralBranches\n|
        `false`\n| Boolean\n\n| IgnoreConstantBranches\n| `false`\n| Boolean\n|===\n\n==
        Lint/DuplicateCaseCondition\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Enabled\n| Yes\n| No\n|
        0.45\n| -\n|===\n\nChecks that there are no repeated conditions\nused in case
        'when' expressions.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\n\ncase
        x\nwhen 'first'\n  do_something\nwhen 'first'\n  do_something_else\nend\n----\n\n[source,ruby]\n----\n#
        good\n\ncase x\nwhen 'first'\n  do_something\nwhen 'second'\n  do_something_else\nend\n----\n\n==
        Lint/DuplicateElsifCondition\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Enabled\n| Yes\n| No\n|
        0.88\n| -\n|===\n\nChecks that there are no repeated conditions used in if
        'elsif'.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\nif x == 1\n  do_something\nelsif
        x == 1\n  do_something_else\nend\n\n# good\nif x == 1\n  do_something\nelsif
        x == 2\n  do_something_else\nend\n----\n\n== Lint/DuplicateHashKey\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| No\n| 0.34\n| 0.77\n|===\n\nChecks for duplicated
        keys in hash literals.\nThis cop considers both primitive types and constants
        for the hash keys.\n\nThis cop mirrors a warning in Ruby 2.2.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\n\nhash = { food: 'apple', food: 'orange' }\n----\n\n[source,ruby]\n----\n#
        good\n\nhash = { food: 'apple', other_food: 'orange' }\n----\n\n== Lint/DuplicateMagicComment\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Pending\n| Yes\n| Always\n| 1.37\n| -\n|===\n\nChecks for duplicated
        magic comments.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\n\n# encoding:
        ascii\n# encoding: ascii\n\n# good\n\n# encoding: ascii\n\n# bad\n\n# frozen_string_literal:
        true\n# frozen_string_literal: true\n\n# good\n\n# frozen_string_literal:
        true\n----\n\n== Lint/DuplicateMatchPattern\n\nNOTE: Required Ruby version:
        2.7\n\n|===\n| Enabled by default | Safe | Supports autocorrection | Version
        Added | Version Changed\n\n| Pending\n| Yes\n| No\n| 1.50\n| -\n|===\n\nChecks
        that there are no repeated patterns used in `in` keywords.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\ncase x\nin 'first'\n  do_something\nin 'first'\n  do_something_else\nend\n\n#
        good\ncase x\nin 'first'\n  do_something\nin 'second'\n  do_something_else\nend\n\n#
        bad - repeated alternate patterns with the same conditions don't depend on
        the order\ncase x\nin foo | bar\n  first_method\nin bar | foo\n  second_method\nend\n\n#
        good\ncase x\nin foo | bar\n  first_method\nin bar | baz\n  second_method\nend\n\n#
        bad - repeated hash patterns with the same conditions don't depend on the
        order\ncase x\nin foo: a, bar: b\n  first_method\nin bar: b, foo: a\n  second_method\nend\n\n#
        good\ncase x\nin foo: a, bar: b\n  first_method\nin bar: b, baz: c\n  second_method\nend\n\n#
        bad - repeated array patterns with elements in the same order\ncase x\nin
        [foo, bar]\n  first_method\nin [foo, bar]\n  second_method\nend\n\n# good\ncase
        x\nin [foo, bar]\n  first_method\nin [bar, foo]\n  second_method\nend\n\n#
        bad - repeated the same patterns and guard conditions\ncase x\nin foo if bar\n
        \ first_method\nin foo if bar\n  second_method\nend\n\n# good\ncase x\nin
        foo if bar\n  first_method\nin foo if baz\n  second_method\nend\n----\n\n==
        Lint/DuplicateMethods\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| Yes\n| No\n| 0.29\n| -\n|===\n\nChecks
        for duplicated instance (or singleton) method\ndefinitions.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\n\ndef foo\n  1\nend\n\ndef foo\n  2\nend\n----\n\n[source,ruby]\n----\n#
        bad\n\ndef foo\n  1\nend\n\nalias foo bar\n----\n\n[source,ruby]\n----\n#
        good\n\ndef foo\n  1\nend\n\ndef bar\n  2\nend\n----\n\n[source,ruby]\n----\n#
        good\n\ndef foo\n  1\nend\n\nalias bar foo\n----\n\n== Lint/DuplicateRegexpCharacterClassElement\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Pending\n| Yes\n| Always\n| 1.1\n| -\n|===\n\nChecks for duplicate
        elements in Regexp character classes.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nr = /[xyx]/\n\n# bad\nr = /[0-9x0-9]/\n\n# good\nr = /[xy]/\n\n# good\nr
        = /[0-9x]/\n----\n\n== Lint/DuplicateRequire\n\n|===\n| Enabled by default
        | Safe | Supports autocorrection | Version Added | Version Changed\n\n| Enabled\n|
        Yes\n| Always (Unsafe)\n| 0.90\n| 1.28\n|===\n\nChecks for duplicate ``require``s
        and ``require_relative``s.\n\n=== Safety\n\nThis cop's autocorrection is unsafe
        because it may break the dependency order\nof `require`.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nrequire 'foo'\nrequire 'bar'\nrequire 'foo'\n\n# good\nrequire 'foo'\nrequire
        'bar'\n\n# good\nrequire 'foo'\nrequire_relative 'foo'\n----\n\n== Lint/DuplicateRescueException\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| No\n| 0.89\n| -\n|===\n\nChecks that there
        are no repeated exceptions\nused in 'rescue' expressions.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nbegin\n  something\nrescue FirstException\n  handle_exception\nrescue
        FirstException\n  handle_other_exception\nend\n\n# good\nbegin\n  something\nrescue
        FirstException\n  handle_exception\nrescue SecondException\n  handle_other_exception\nend\n----\n\n==
        Lint/EachWithObjectArgument\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Enabled\n| Yes\n| No\n|
        0.31\n| -\n|===\n\nChecks if each_with_object is called with an immutable\nargument.
        Since the argument is the object that the given block shall\nmake calls on
        to build something based on the enumerable that\neach_with_object iterates
        over, an immutable argument makes no sense.\nIt's definitely a bug.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\n\nsum = numbers.each_with_object(0)
        { |e, a| a += e }\n----\n\n[source,ruby]\n----\n# good\n\nnum = 0\nsum = numbers.each_with_object(num)
        { |e, a| a += e }\n----\n\n== Lint/ElseLayout\n\n|===\n| Enabled by default
        | Safe | Supports autocorrection | Version Added | Version Changed\n\n| Enabled\n|
        Yes\n| Always\n| 0.17\n| 1.2\n|===\n\nChecks for odd `else` block layout -
        like\nhaving an expression on the same line as the `else` keyword,\nwhich
        is usually a mistake.\n\nIts autocorrection tweaks layout to keep the syntax.
        So, this autocorrection\nis compatible correction for bad case syntax, but
        if your code makes a mistake\nwith `elsif` and `else`, you will have to correct
        it manually.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\n\nif something\n
        \ # ...\nelse do_this\n  do_that\nend\n----\n\n[source,ruby]\n----\n# good\n\n#
        This code is compatible with the bad case. It will be autocorrected like this.\nif
        something\n  # ...\nelse\n  do_this\n  do_that\nend\n\n# This code is incompatible
        with the bad case.\n# If `do_this` is a condition, `elsif` should be used
        instead of `else`.\nif something\n  # ...\nelsif do_this\n  do_that\nend\n----\n\n==
        Lint/EmptyBlock\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Pending\n| Yes\n| No\n| 1.1\n| 1.15\n|===\n\nChecks
        for blocks without a body.\nSuch empty blocks are typically an oversight or
        we should provide a comment\nto clarify what we're aiming for.\n\nEmpty lambdas
        and procs are ignored by default.\n\nNOTE: For backwards compatibility, the
        configuration that allows/disallows\nempty lambdas and procs is called `AllowEmptyLambdas`,
        even though it also\napplies to procs.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nitems.each { |item| }\n\n# good\nitems.each { |item| puts item }\n----\n\n====
        AllowComments: true (default)\n\n[source,ruby]\n----\n# good\nitems.each do
        |item|\n  # TODO: implement later (inner comment)\nend\n\nitems.each { |item|
        } # TODO: implement later (inline comment)\n----\n\n==== AllowComments: false\n\n[source,ruby]\n----\n#
        bad\nitems.each do |item|\n  # TODO: implement later (inner comment)\nend\n\nitems.each
        { |item| } # TODO: implement later (inline comment)\n----\n\n==== AllowEmptyLambdas:
        true (default)\n\n[source,ruby]\n----\n# good\nallow(subject).to receive(:callable).and_return(->
        {})\n\nplaceholder = lambda do\nend\n(callable || placeholder).call\n\nproc
        { }\n\nProc.new { }\n----\n\n==== AllowEmptyLambdas: false\n\n[source,ruby]\n----\n#
        bad\nallow(subject).to receive(:callable).and_return(-> {})\n\nplaceholder
        = lambda do\nend\n(callable || placeholder).call\n\nproc { }\n\nProc.new {
        }\n----\n\n=== Configurable attributes\n\n|===\n| Name | Default value | Configurable
        values\n\n| AllowComments\n| `true`\n| Boolean\n\n| AllowEmptyLambdas\n| `true`\n|
        Boolean\n|===\n\n== Lint/EmptyClass\n\n|===\n| Enabled by default | Safe |
        Supports autocorrection | Version Added | Version Changed\n\n| Pending\n|
        Yes\n| No\n| 1.3\n| -\n|===\n\nChecks for classes and metaclasses without
        a body.\nSuch empty classes and metaclasses are typically an oversight or
        we should provide a comment\nto be clearer what we're aiming for.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nclass Foo\nend\n\nclass Bar\n  class << self\n  end\nend\n\nclass <<
        obj\nend\n\n# good\nclass Foo\n  def do_something\n    # ... code\n  end\nend\n\nclass
        Bar\n  class << self\n    attr_reader :bar\n  end\nend\n\nclass << obj\n  attr_reader
        :bar\nend\n----\n\n==== AllowComments: false (default)\n\n[source,ruby]\n----\n#
        bad\nclass Foo\n  # TODO: implement later\nend\n\nclass Bar\n  class << self\n
        \   # TODO: implement later\n  end\nend\n\nclass << obj\n  # TODO: implement
        later\nend\n----\n\n==== AllowComments: true\n\n[source,ruby]\n----\n# good\nclass
        Foo\n  # TODO: implement later\nend\n\nclass Bar\n  class << self\n    # TODO:
        implement later\n  end\nend\n\nclass << obj\n  # TODO: implement later\nend\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        AllowComments\n| `false`\n| Boolean\n|===\n\n== Lint/EmptyConditionalBody\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Command-line only (Unsafe)\n| 0.89\n| 1.61\n|===\n\nChecks
        for the presence of `if`, `elsif` and `unless` branches without a body.\n\nNOTE:
        empty `else` branches are handled by `Style/EmptyElse`.\n\n=== Safety\n\nAutocorrection
        for this cop is not safe. The conditions for empty branches that\nthe autocorrection
        removes may have side effects, or the logic in subsequent\nbranches may change
        due to the removal of a previous condition.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nif condition\nend\n\n# bad\nunless condition\nend\n\n# bad\nif condition\n
        \ do_something\nelsif other_condition\nend\n\n# good\nif condition\n  do_something\nend\n\n#
        good\nunless condition\n  do_something\nend\n\n# good\nif condition\n  do_something\nelsif
        other_condition\n  do_something_else\nend\n----\n\n==== AllowComments: true
        (default)\n\n[source,ruby]\n----\n# good\nif condition\n  do_something\nelsif
        other_condition\n  # noop\nend\n----\n\n==== AllowComments: false\n\n[source,ruby]\n----\n#
        bad\nif condition\n  do_something\nelsif other_condition\n  # noop\nend\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        AllowComments\n| `true`\n| Boolean\n|===\n\n== Lint/EmptyEnsure\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Command-line only\n| 0.10\n| 1.61\n|===\n\nChecks
        for empty `ensure` blocks\n\n=== Examples\n\n[source,ruby]\n----\n# bad\n\ndef
        some_method\n  do_something\nensure\nend\n----\n\n[source,ruby]\n----\n# bad\n\nbegin\n
        \ do_something\nensure\nend\n----\n\n[source,ruby]\n----\n# good\n\ndef some_method\n
        \ do_something\nensure\n  do_something_else\nend\n----\n\n[source,ruby]\n----\n#
        good\n\nbegin\n  do_something\nensure\n  do_something_else\nend\n----\n\n==
        Lint/EmptyExpression\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| Yes\n| No\n| 0.45\n| -\n|===\n\nChecks
        for the presence of empty expressions.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\n\nfoo = ()\nif ()\n  bar\nend\n----\n\n[source,ruby]\n----\n# good\n\nfoo
        = (some_expression)\nif (some_expression)\n  bar\nend\n----\n\n== Lint/EmptyFile\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| No\n| 0.90\n| -\n|===\n\nEnforces that Ruby
        source files are not empty.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\n#
        Empty file\n\n# good\n# File containing non commented source lines\n----\n\n====
        AllowComments: true (default)\n\n[source,ruby]\n----\n# good\n# File consisting
        only of comments\n----\n\n==== AllowComments: false\n\n[source,ruby]\n----\n#
        bad\n# File consisting only of comments\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| AllowComments\n| `true`\n|
        Boolean\n|===\n\n== Lint/EmptyInPattern\n\nNOTE: Required Ruby version: 2.7\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Pending\n| Yes\n| No\n| 1.16\n| -\n|===\n\nChecks for the presence
        of `in` pattern branches without a body.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\ncase condition\nin [a]\n  do_something\nin [a, b]\nend\n\n# good\ncase
        condition\nin [a]\n  do_something\nin [a, b]\n  nil\nend\n----\n\n==== AllowComments:
        true (default)\n\n[source,ruby]\n----\n# good\ncase condition\nin [a]\n  do_something\nin
        [a, b]\n  # noop\nend\n----\n\n==== AllowComments: false\n\n[source,ruby]\n----\n#
        bad\ncase condition\nin [a]\n  do_something\nin [a, b]\n  # noop\nend\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        AllowComments\n| `true`\n| Boolean\n|===\n\n== Lint/EmptyInterpolation\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Command-line only\n| 0.20\n| 1.61\n|===\n\nChecks
        for empty interpolation.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\n\n\"result
        is #{}\"\n----\n\n[source,ruby]\n----\n# good\n\n\"result is #{some_result}\"\n----\n\n==
        Lint/EmptyWhen\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| Yes\n| No\n| 0.45\n| 0.83\n|===\n\nChecks
        for the presence of `when` branches without a body.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\ncase foo\nwhen bar\n  do_something\nwhen baz\nend\n----\n\n[source,ruby]\n----\n#
        good\ncase condition\nwhen foo\n  do_something\nwhen bar\n  nil\nend\n----\n\n====
        AllowComments: true (default)\n\n[source,ruby]\n----\n# good\ncase condition\nwhen
        foo\n  do_something\nwhen bar\n  # noop\nend\n----\n\n==== AllowComments:
        false\n\n[source,ruby]\n----\n# bad\ncase condition\nwhen foo\n  do_something\nwhen
        bar\n  # do nothing\nend\n----\n\n=== Configurable attributes\n\n|===\n| Name
        | Default value | Configurable values\n\n| AllowComments\n| `true`\n| Boolean\n|===\n\n==
        Lint/EnsureReturn\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n| 0.9\n|
        0.83\n|===\n\nChecks for `return` from an `ensure` block.\n`return` from an
        ensure block is a dangerous code smell as it\nwill take precedence over any
        exception being raised,\nand the exception will be silently thrown away as
        if it were rescued.\n\nIf you want to rescue some (or all) exceptions, best
        to do it explicitly\n\n=== Examples\n\n[source,ruby]\n----\n# bad\n\ndef foo\n
        \ do_something\nensure\n  cleanup\n  return self\nend\n----\n\n[source,ruby]\n----\n#
        good\n\ndef foo\n  do_something\n  self\nensure\n  cleanup\nend\n\n# also
        good\n\ndef foo\n  begin\n    do_something\n  rescue SomeException\n    #
        Let's ignore this exception\n  end\n  self\nensure\n  cleanup\nend\n----\n\n===
        References\n\n* https://rubystyle.guide#no-return-ensure\n\n== Lint/ErbNewArguments\n\nNOTE:
        Required Ruby version: 2.6\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n|
        0.56\n| -\n|===\n\nEmulates the following Ruby warnings in Ruby 2.6.\n\n[source,console]\n----\n$
        cat example.rb\nERB.new('hi', nil, '-', '@output_buffer')\n$ ruby -rerb example.rb\nexample.rb:1:
        warning: Passing safe_level with the 2nd argument of ERB.new is\ndeprecated.
        Do not use it, and specify other arguments as keyword arguments.\nexample.rb:1:
        warning: Passing trim_mode with the 3rd argument of ERB.new is\ndeprecated.
        Use keyword argument like ERB.new(str, trim_mode:...) instead.\nexample.rb:1:
        warning: Passing eoutvar with the 4th argument of ERB.new is\ndeprecated.
        Use keyword argument like ERB.new(str, eoutvar: ...) instead.\n----\n\nNow
        non-keyword arguments other than first one are softly deprecated\nand will
        be removed when Ruby 2.5 becomes EOL.\n`ERB.new` with non-keyword arguments
        is deprecated since ERB 2.2.0.\nUse `:trim_mode` and `:eoutvar` keyword arguments
        to `ERB.new`.\nThis cop identifies places where `ERB.new(str, trim_mode, eoutvar)`
        can\nbe replaced by `ERB.new(str, :trim_mode: trim_mode, eoutvar: eoutvar)`.\n\n===
        Examples\n\n[source,ruby]\n----\n# Target codes supports Ruby 2.6 and higher
        only\n# bad\nERB.new(str, nil, '-', '@output_buffer')\n\n# good\nERB.new(str,
        trim_mode: '-', eoutvar: '@output_buffer')\n\n# Target codes supports Ruby
        2.5 and lower only\n# good\nERB.new(str, nil, '-', '@output_buffer')\n\n#
        Target codes supports Ruby 2.6, 2.5 and lower\n# bad\nERB.new(str, nil, '-',
        '@output_buffer')\n\n# good\n# Ruby standard library style\n# https://github.com/ruby/ruby/commit/3406c5d\nif
        ERB.instance_method(:initialize).parameters.assoc(:key) # Ruby 2.6+\n  ERB.new(str,
        trim_mode: '-', eoutvar: '@output_buffer')\nelse\n  ERB.new(str, nil, '-',
        '@output_buffer')\nend\n\n# good\n# Use `RUBY_VERSION` style\nif RUBY_VERSION
        >= '2.6'\n  ERB.new(str, trim_mode: '-', eoutvar: '@output_buffer')\nelse\n
        \ ERB.new(str, nil, '-', '@output_buffer')\nend\n----\n\n== Lint/FlipFlop\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| No\n| 0.16\n| -\n|===\n\nLooks for uses of
        flip-flop operator\nbased on the Ruby Style Guide.\n\nHere is the history
        of flip-flops in Ruby.\nflip-flop operator is deprecated in Ruby 2.6.0 and\nthe
        deprecation has been reverted by Ruby 2.7.0 and\nbackported to Ruby 2.6.\nSee:
        https://bugs.ruby-lang.org/issues/5400\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\n(1..20).each do |x|\n  puts x if (x == 5) .. (x == 10)\nend\n\n# good\n(1..20).each
        do |x|\n  puts x if (x >= 5) && (x <= 10)\nend\n----\n\n=== References\n\n*
        https://rubystyle.guide#no-flip-flops\n\n== Lint/FloatComparison\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| No\n| 0.89\n| -\n|===\n\nChecks for the presence
        of precise comparison of floating point numbers.\n\nFloating point values
        are inherently inaccurate, and comparing them for exact equality\nis almost
        never the desired semantics. Comparison via the `==/!=` operators checks\nfloating-point
        value representation to be exactly the same, which is very unlikely\nif you
        perform any arithmetic operations involving precision loss.\n\n # good - comparing
        against zero\n  x == 0.0\n  x != 0.0\n\n  # good\n  (x - 0.1).abs < Float::EPSILON\n\n
        \ # good\n  tolerance = 0.0001\n  (x - 0.1).abs < tolerance\n\n  # Or some
        other epsilon based type of comparison:\n  # https://www.embeddeduse.com/2019/08/26/qt-compare-two-floats/\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\nx == 0.1\nx != 0.1\n\n# good - using
        BigDecimal\nx.to_d == 0.1.to_d\n----\n\n=== References\n\n* https://rubystyle.guide#float-comparison\n\n==
        Lint/FloatOutOfRange\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| Yes\n| No\n| 0.36\n| -\n|===\n\nIdentifies
        Float literals which are, like, really really really\nreally really really
        really really big. Too big. No-one needs Floats\nthat big. If you need a float
        that big, something is wrong with you.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\n\nfloat = 3.0e400\n----\n\n[source,ruby]\n----\n# good\n\nfloat = 42.9\n----\n\n==
        Lint/FormatParameterMismatch\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Enabled\n| Yes\n| No\n|
        0.33\n| -\n|===\n\nThis lint sees if there is a mismatch between the number
        of\nexpected fields for format/sprintf/#% and what is actually\npassed as
        arguments.\n\nIn addition it checks whether different formats are used in
        the same\nformat string. Do not mix numbered, unnumbered, and named formats
        in\nthe same format string.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\n\nformat('A
        value: %s and another: %i', a_value)\n----\n\n[source,ruby]\n----\n# good\n\nformat('A
        value: %s and another: %i', a_value, another)\n----\n\n[source,ruby]\n----\n#
        bad\n\nformat('Unnumbered format: %s and numbered: %2$s', a_value, another)\n----\n\n[source,ruby]\n----\n#
        good\n\nformat('Numbered format: %1$s and numbered %2$s', a_value, another)\n----\n\n==
        Lint/HashCompareByIdentity\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Enabled\n| No\n| No\n|
        0.93\n| -\n|===\n\nPrefer using `Hash#compare_by_identity` rather than using
        `object_id`\nfor hash keys.\n\nThis cop looks for hashes being keyed by objects'
        `object_id`, using\none of these methods: `key?`, `has_key?`, `fetch`, `[]`
        and `[]=`.\n\n=== Safety\n\nThis cop is unsafe. Although unlikely, the hash
        could store both object\nids and other values that need be compared by value,
        and thus\ncould be a false positive.\n\nFurthermore, this cop cannot guarantee
        that the receiver of one of the\nmethods (`key?`, etc.) is actually a hash.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\nhash = {}\nhash[foo.object_id] = :bar\nhash.key?(baz.object_id)\n\n#
        good\nhash = {}.compare_by_identity\nhash[foo] = :bar\nhash.key?(baz)\n----\n\n===
        References\n\n* https://rubystyle.guide#identity-comparison\n\n== Lint/HeredocMethodCallPosition\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Disabled\n| Yes\n| Always\n| 0.68\n| -\n|===\n\nChecks for the
        ordering of a method call where\nthe receiver of the call is a HEREDOC.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\n<<-SQL\n  bar\nSQL\n.strip_indent\n\n<<-SQL\n
        \ bar\nSQL\n.strip_indent\n.trim\n\n# good\n<<~SQL\n  bar\nSQL\n\n<<~SQL.trim\n
        \ bar\nSQL\n----\n\n=== References\n\n* https://rubystyle.guide#heredoc-method-calls\n\n==
        Lint/IdentityComparison\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n| 0.91\n|
        -\n|===\n\nPrefer `equal?` over `==` when comparing `object_id`.\n\n`Object#equal?`
        is provided to compare objects for identity, and in contrast\n`Object#==`
        is provided for the purpose of doing value comparison.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nfoo.object_id == bar.object_id\n\n# good\nfoo.equal?(bar)\n----\n\n===
        References\n\n* https://rubystyle.guide#identity-comparison\n\n== Lint/ImplicitStringConcatenation\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| No\n| 0.36\n| -\n|===\n\nChecks for implicit
        string concatenation of string literals\nwhich are on the same line.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\n\narray = ['Item 1' 'Item 2']\n----\n\n[source,ruby]\n----\n#
        good\n\narray = ['Item 1Item 2']\narray = ['Item 1' + 'Item 2']\narray = [\n
        \ 'Item 1' \\\n  'Item 2'\n]\n----\n\n== Lint/IncompatibleIoSelectWithFiberScheduler\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Pending\n| Yes\n| Always (Unsafe)\n| 1.21\n| 1.24\n|===\n\nChecks
        for `IO.select` that is incompatible with Fiber Scheduler since Ruby 3.0.\n\nWhen
        an array of IO objects waiting for an exception (the third argument of `IO.select`)\nis
        used as an argument, there is no alternative API, so offenses are not registered.\n\nNOTE:
        When the method is successful the return value of `IO.select` is `[[IO]]`,\nand
        the return value of `io.wait_readable` and `io.wait_writable` are `self`.\nThey
        are not autocorrected when assigning a return value because these types are
        different.\nIt's up to user how to handle the return value.\n\n=== Safety\n\nThis
        cop's autocorrection is unsafe because `NoMethodError` occurs\nif `require
        'io/wait'` is not called.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\nIO.select([io],
        [], [], timeout)\n\n# good\nio.wait_readable(timeout)\n\n# bad\nIO.select([],
        [io], [], timeout)\n\n# good\nio.wait_writable(timeout)\n----\n\n== Lint/IneffectiveAccessModifier\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| No\n| 0.36\n| -\n|===\n\nChecks for `private`
        or `protected` access modifiers which are\napplied to a singleton method.
        These access modifiers do not make\nsingleton methods private/protected. `private_class_method`
        can be\nused for that.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\n\nclass
        C\n  private\n\n  def self.method\n    puts 'hi'\n  end\nend\n----\n\n[source,ruby]\n----\n#
        good\n\nclass C\n  def self.method\n    puts 'hi'\n  end\n\n  private_class_method
        :method\nend\n----\n\n[source,ruby]\n----\n# good\n\nclass C\n  class << self\n
        \   private\n\n    def method\n      puts 'hi'\n    end\n  end\nend\n----\n\n==
        Lint/InheritException\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always (Unsafe)\n|
        0.41\n| 1.26\n|===\n\nLooks for error classes inheriting from `Exception`.\nIt
        is configurable to suggest using either `StandardError` (default) or\n`RuntimeError`
        instead.\n\n=== Safety\n\nThis cop's autocorrection is unsafe because `rescue`
        that omit\nexception class handle `StandardError` and its subclasses,\nbut
        not `Exception` and its subclasses.\n\n=== Examples\n\n==== EnforcedStyle:
        standard_error (default)\n\n[source,ruby]\n----\n# bad\n\nclass C < Exception;
        end\n\nC = Class.new(Exception)\n\n# good\n\nclass C < StandardError; end\n\nC
        = Class.new(StandardError)\n----\n\n==== EnforcedStyle: runtime_error\n\n[source,ruby]\n----\n#
        bad\n\nclass C < Exception; end\n\nC = Class.new(Exception)\n\n# good\n\nclass
        C < RuntimeError; end\n\nC = Class.new(RuntimeError)\n----\n\n=== Configurable
        attributes\n\n|===\n| Name | Default value | Configurable values\n\n| EnforcedStyle\n|
        `standard_error`\n| `standard_error`, `runtime_error`\n|===\n\n== Lint/InterpolationCheck\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always (Unsafe)\n| 0.50\n| 1.40\n|===\n\nChecks
        for interpolation in a single quoted string.\n\n=== Safety\n\nThis cop's autocorrection
        is unsafe because although it always replaces single quotes as\nif it were
        miswritten double quotes, it is not always the case. For example,\n`'#{foo}
        bar'` would be replaced by `\"#{foo} bar\"`, so the replaced code would evaluate\nthe
        expression `foo`.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\n\nfoo = 'something
        with #{interpolation} inside'\n----\n\n[source,ruby]\n----\n# good\n\nfoo
        = \"something with #{interpolation} inside\"\n----\n\n== Lint/ItWithoutArgumentsInBlock\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Pending\n| Yes\n| No\n| 1.59\n| -\n|===\n\nEmulates the following
        Ruby warning in Ruby 3.3.\n\n[source,ruby]\n----\n$ ruby -e '0.times { it
        }'\n-e:1: warning: `it` calls without arguments will refer to the first block
        param in Ruby 3.4;\nuse it() or self.it\n----\n\n`it` calls without arguments
        will refer to the first block param in Ruby 3.4.\nSo use `it()` or `self.it`
        to ensure compatibility.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\ndo_something
        { it }\n\n# good\ndo_something { it() }\ndo_something { self.it }\n----\n\n===
        References\n\n* https://bugs.ruby-lang.org/issues/18980\n\n== Lint/LambdaWithoutLiteralBlock\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Pending\n| Yes\n| Always\n| 1.8\n| -\n|===\n\nChecks uses of
        lambda without a literal block.\nIt emulates the following warning in Ruby
        3.0:\n\n  $ ruby -vwe 'lambda(&proc {})'\n  ruby 3.0.0p0 (2020-12-25 revision
        95aff21468) [x86_64-darwin19]\n  -e:1: warning: lambda without a literal block
        is deprecated; use the proc without\n  lambda instead\n\nThis way, proc object
        is never converted to lambda.\nAutocorrection replaces with compatible proc
        argument.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\nlambda(&proc { do_something
        })\nlambda(&Proc.new { do_something })\n\n# good\nproc { do_something }\nProc.new
        { do_something }\nlambda { do_something } # If you use lambda.\n----\n\n==
        Lint/LiteralAsCondition\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| Yes\n| No\n| 0.51\n| -\n|===\n\nChecks
        for literals used as the conditions or as\noperands in and/or expressions
        serving as the conditions of\nif/while/until/case-when/case-in.\n\nNOTE: Literals
        in `case-in` condition where the match variable is used in\n`in` are accepted
        as a pattern matching.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\nif 20\n
        \ do_something\nend\n\n# bad\nif some_var && true\n  do_something\nend\n\n#
        good\nif some_var && some_condition\n  do_something\nend\n\n# good\n# When
        using a boolean value for an infinite loop.\nwhile true\n  break if condition\nend\n----\n\n==
        Lint/LiteralAssignmentInCondition\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Pending\n| Yes\n| No\n|
        1.58\n| -\n|===\n\nChecks for literal assignments in the conditions of `if`,
        `while`, and `until`.\nIt emulates the following Ruby warning:\n\n[source,console]\n----\n$
        ruby -we 'if x = true; end'\n-e:1: warning: found `= literal' in conditional,
        should be ==\n----\n\nAs a lint cop, it cannot be determined if `==` is appropriate
        as intended,\ntherefore this cop does not provide autocorrection.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nif x = 42\n  do_something\nend\n\n# good\nif x == 42\n  do_something\nend\n\n#
        good\nif x = y\n  do_something\nend\n----\n\n== Lint/LiteralInInterpolation\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.19\n| 0.32\n|===\n\nChecks for
        interpolated literals.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\n\n\"result
        is #{10}\"\n----\n\n[source,ruby]\n----\n# good\n\n\"result is 10\"\n----\n\n==
        Lint/Loop\n\n|===\n| Enabled by default | Safe | Supports autocorrection |
        Version Added | Version Changed\n\n| Enabled\n| No\n| Always (Unsafe)\n| 0.9\n|
        1.3\n|===\n\nChecks for uses of `begin...end while/until something`.\n\n===
        Safety\n\nThe cop is unsafe because behavior can change in some cases, including\nif
        a local variable inside the loop body is accessed outside of it, or if the\nloop
        body raises a `StopIteration` exception (which `Kernel#loop` rescues).\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\n\n# using while\nbegin\n  do_something\nend
        while some_condition\n----\n\n[source,ruby]\n----\n# bad\n\n# using until\nbegin\n
        \ do_something\nend until some_condition\n----\n\n[source,ruby]\n----\n# good\n\n#
        while replacement\nloop do\n  do_something\n  break unless some_condition\nend\n----\n\n[source,ruby]\n----\n#
        good\n\n# until replacement\nloop do\n  do_something\n  break if some_condition\nend\n----\n\n===
        References\n\n* https://rubystyle.guide#loop-with-break\n\n== Lint/MissingCopEnableDirective\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| No\n| 0.52\n| -\n|===\n\nChecks that there
        is an `# rubocop:enable ...` statement\nafter a `# rubocop:disable ...` statement.
        This will prevent leaving\ncop disables on wide ranges of code, that latter
        contributors to\na file wouldn't be aware of.\n\n=== Examples\n\n[source,ruby]\n----\n#
        Lint/MissingCopEnableDirective:\n#   MaximumRangeSize: .inf\n\n# good\n# rubocop:disable
        Layout/SpaceAroundOperators\nx= 0\n# rubocop:enable Layout/SpaceAroundOperators\n#
        y = 1\n# EOF\n\n# bad\n# rubocop:disable Layout/SpaceAroundOperators\nx= 0\n#
        EOF\n----\n\n[source,ruby]\n----\n# Lint/MissingCopEnableDirective:\n#   MaximumRangeSize:
        2\n\n# good\n# rubocop:disable Layout/SpaceAroundOperators\nx= 0\n# With the
        previous, there are 2 lines on which cop is disabled.\n# rubocop:enable Layout/SpaceAroundOperators\n\n#
        bad\n# rubocop:disable Layout/SpaceAroundOperators\nx= 0\nx += 1\n# Including
        this, that's 3 lines on which the cop is disabled.\n# rubocop:enable Layout/SpaceAroundOperators\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        MaximumRangeSize\n| `Infinity`\n| Float\n|===\n\n== Lint/MissingSuper\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| No\n| 0.89\n| 1.4\n|===\n\nChecks for the presence
        of constructors and lifecycle callbacks\nwithout calls to `super`.\n\nThis
        cop does not consider `method_missing` (and `respond_to_missing?`)\nbecause
        in some cases it makes sense to overtake what is considered a\nmissing method.
        In other cases, the theoretical ideal handling could be\nchallenging or verbose
        for no actual gain.\n\nAutocorrection is not supported because the position
        of `super` cannot be\ndetermined automatically.\n\n`Object` and `BasicObject`
        are allowed by this cop because of their\nstateless nature. However, sometimes
        you might want to allow other parent\nclasses from this cop, for example in
        the case of an abstract class that is\nnot meant to be called with `super`.
        In those cases, you can use the\n`AllowedParentClasses` option to specify
        which classes should be allowed\n*in addition to* `Object` and `BasicObject`.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\nclass Employee < Person\n  def initialize(name,
        salary)\n    @salary = salary\n  end\nend\n\n# good\nclass Employee < Person\n
        \ def initialize(name, salary)\n    super(name)\n    @salary = salary\n  end\nend\n\n#
        bad\nEmployee = Class.new(Person) do\n  def initialize(name, salary)\n    @salary
        = salary\n  end\nend\n\n# good\nEmployee = Class.new(Person) do\n  def initialize(name,
        salary)\n    super(name)\n    @salary = salary\n  end\nend\n\n# bad\nclass
        Parent\n  def self.inherited(base)\n    do_something\n  end\nend\n\n# good\nclass
        Parent\n  def self.inherited(base)\n    super\n    do_something\n  end\nend\n\n#
        good\nclass ClassWithNoParent\n  def initialize\n    do_something\n  end\nend\n----\n\n====
        AllowedParentClasses: [MyAbstractClass]\n\n[source,ruby]\n----\n# good\nclass
        MyConcreteClass < MyAbstractClass\n  def initialize\n    do_something\n  end\nend\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        AllowedParentClasses\n| `[]`\n| Array\n|===\n\n== Lint/MixedCaseRange\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Pending\n| Yes\n| Always (Unsafe)\n| 1.53\n| -\n|===\n\nChecks
        for mixed-case character ranges since they include likely unintended characters.\n\nOffenses
        are registered for regexp character classes like `/[A-z]/`\nas well as range
        objects like `('A'..'z')`.\n\nNOTE: Range objects cannot be autocorrected.\n\n===
        Safety\n\nThe cop autocorrects regexp character classes\nby replacing one
        character range with two: `A-z` becomes `A-Za-z`.\nIn most cases this is probably
        what was originally intended\nbut it changes the regexp to no longer match
        symbols it used to include.\nFor this reason, this cop's autocorrect is unsafe
        (it will\nchange the behavior of the code).\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nr = /[A-z]/\n\n# good\nr = /[A-Za-z]/\n----\n\n== Lint/MixedRegexpCaptureTypes\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| No\n| 0.85\n| -\n|===\n\nDo not mix named captures
        and numbered captures in a Regexp literal\nbecause numbered capture is ignored
        if they're mixed.\nReplace numbered captures with non-capturing groupings
        or\nnamed captures.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\n/(?<foo>FOO)(BAR)/\n\n#
        good\n/(?<foo>FOO)(?<bar>BAR)/\n\n# good\n/(?<foo>FOO)(?:BAR)/\n\n# good\n/(FOO)(BAR)/\n----\n\n==
        Lint/MultipleComparison\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n| 0.47\n|
        1.1\n|===\n\nIn math and Python, we can use `x < y < z` style comparison to
        compare\nmultiple value. However, we can't use the comparison in Ruby. However,\nthe
        comparison is not syntax error. This cop checks the bad usage of\ncomparison
        operators.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\nx < y < z\n10 <=
        x <= 20\n\n# good\nx < y && y < z\n10 <= x && x <= 20\n----\n\n== Lint/NestedMethodDefinition\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| No\n| 0.32\n| -\n|===\n\nChecks for nested
        method definitions.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\n\n# `bar`
        definition actually produces methods in the same scope\n# as the outer `foo`
        method. Furthermore, the `bar` method\n# will be redefined every time `foo`
        is invoked.\ndef foo\n  def bar\n  end\nend\n----\n\n[source,ruby]\n----\n#
        good\n\ndef foo\n  bar = -> { puts 'hello' }\n  bar.call\nend\n----\n\n[source,ruby]\n----\n#
        good\n\n# `class_eval`, `instance_eval`, `module_eval`, `class_exec`, `instance_exec`,
        and\n# `module_exec` blocks are allowed by default.\n\ndef foo\n  self.class.class_eval
        do\n    def bar\n    end\n  end\nend\n\ndef foo\n  self.class.module_exec
        do\n    def bar\n    end\n  end\nend\n----\n\n[source,ruby]\n----\n# good\n\ndef
        foo\n  class << self\n    def bar\n    end\n  end\nend\n----\n\n==== AllowedMethods:
        [] (default)\n\n[source,ruby]\n----\n# bad\ndef do_something\n  has_many :articles
        do\n    def find_or_create_by_name(name)\n    end\n  end\nend\n----\n\n====
        AllowedMethods: ['has_many']\n\n[source,ruby]\n----\n# bad\ndef do_something\n
        \ has_many :articles do\n    def find_or_create_by_name(name)\n    end\n  end\nend\n----\n\n====
        AllowedPatterns: [] (default)\n\n[source,ruby]\n----\n# bad\ndef foo(obj)\n
        \ obj.do_baz do\n    def bar\n    end\n  end\nend\n----\n\n==== AllowedPatterns:
        ['baz']\n\n[source,ruby]\n----\n# good\ndef foo(obj)\n  obj.do_baz do\n    def
        bar\n    end\n  end\nend\n----\n\n=== Configurable attributes\n\n|===\n| Name
        | Default value | Configurable values\n\n| AllowedMethods\n| `[]`\n| Array\n\n|
        AllowedPatterns\n| `[]`\n| Array\n|===\n\n=== References\n\n* https://rubystyle.guide#no-nested-methods\n\n==
        Lint/NestedPercentLiteral\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Enabled\n| Yes\n| No\n|
        0.52\n| -\n|===\n\nChecks for nested percent literals.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\n\n# The percent literal for nested_attributes is parsed as four tokens,\n#
        yielding the array [:name, :content, :\"%i[incorrectly\", :\"nested]\"].\nattributes
        = {\n  valid_attributes: %i[name content],\n  nested_attributes: %i[name content
        %i[incorrectly nested]]\n}\n\n# good\n\n# Neither is incompatible with the
        bad case, but probably the intended code.\nattributes = {\n  valid_attributes:
        %i[name content],\n  nested_attributes: [:name, :content, %i[incorrectly nested]]\n}\n\nattributes
        = {\n  valid_attributes: %i[name content],\n  nested_attributes: [:name, :content,
        [:incorrectly, :nested]]\n}\n----\n\n== Lint/NextWithoutAccumulator\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| No\n| 0.36\n| -\n|===\n\nDon't omit the accumulator
        when calling `next` in a `reduce` block.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\n\nresult = (1..4).reduce(0) do |acc, i|\n  next if i.odd?\n  acc + i\nend\n----\n\n[source,ruby]\n----\n#
        good\n\nresult = (1..4).reduce(0) do |acc, i|\n  next acc if i.odd?\n  acc
        + i\nend\n----\n\n== Lint/NoReturnInBeginEndBlocks\n\n|===\n| Enabled by default
        | Safe | Supports autocorrection | Version Added | Version Changed\n\n| Pending\n|
        Yes\n| No\n| 1.2\n| -\n|===\n\nChecks for the presence of a `return` inside
        a `begin..end` block\nin assignment contexts.\nIn this situation, the `return`
        will result in an exit from the current\nmethod, possibly leading to unexpected
        behavior.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\n\n@some_variable
        ||= begin\n  return some_value if some_condition_is_met\n\n  do_something\nend\n----\n\n[source,ruby]\n----\n#
        good\n\n@some_variable ||= begin\n  if some_condition_is_met\n    some_value\n
        \ else\n    do_something\n  end\nend\n\n# good\n\nsome_variable = if some_condition_is_met\n
        \                 return if another_condition_is_met\n\n                  some_value\n
        \               else\n                  do_something\n                end\n----\n\n==
        Lint/NonAtomicFileOperation\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Pending\n| Yes\n| Always
        (Unsafe)\n| 1.31\n| -\n|===\n\nChecks for non-atomic file operation.\nAnd
        then replace it with a nearly equivalent and atomic method.\n\nThese can cause
        problems that are difficult to reproduce,\nespecially in cases of frequent
        file operations in parallel,\nsuch as test runs with parallel_rspec.\n\nFor
        examples: creating a directory if there is none, has the following problems\n\nAn
        exception occurs when the directory didn't exist at the time of `exist?`,\nbut
        someone else created it before `mkdir` was executed.\n\nSubsequent processes
        are executed without the directory that should be there\nwhen the directory
        existed at the time of `exist?`,\nbut someone else deleted it shortly afterwards.\n\n===
        Safety\n\nThis cop is unsafe, because autocorrection change to atomic processing.\nThe
        atomic processing of the replacement destination is not guaranteed\nto be
        strictly equivalent to that before the replacement.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad - race condition with another process may result in an error in `mkdir`\nunless
        Dir.exist?(path)\n  FileUtils.mkdir(path)\nend\n\n# good - atomic and idempotent
        creation\nFileUtils.mkdir_p(path)\n\n# bad - race condition with another process
        may result in an error in `remove`\nif File.exist?(path)\n  FileUtils.remove(path)\nend\n\n#
        good - atomic and idempotent removal\nFileUtils.rm_f(path)\n----\n\n=== References\n\n*
        https://rubystyle.guide#atomic-file-operations\n\n== Lint/NonDeterministicRequireOrder\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| No\n| Always (Unsafe)\n| 0.78\n| -\n|===\n\n`Dir[...]`
        and `Dir.glob(...)` do not make any guarantees about\nthe order in which files
        are returned. The final order is\ndetermined by the operating system and file
        system.\nThis means that using them in cases where the order matters,\nsuch
        as requiring files, can lead to intermittent failures\nthat are hard to debug.
        To ensure this doesn't happen,\nalways sort the list.\n\n`Dir.glob` and `Dir[]`
        sort globbed results by default in Ruby 3.0.\nSo all bad cases are acceptable
        when Ruby 3.0 or higher are used.\n\nNOTE: This cop will be deprecated and
        removed when supporting only Ruby 3.0 and higher.\n\n=== Safety\n\nThis cop
        is unsafe in the case where sorting files changes existing\nexpected behavior.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\nDir[\"./lib/**/*.rb\"].each do |file|\n
        \ require file\nend\n\n# good\nDir[\"./lib/**/*.rb\"].sort.each do |file|\n
        \ require file\nend\n\n# bad\nDir.glob(Rails.root.join(__dir__, 'test', '*.rb'))
        do |file|\n  require file\nend\n\n# good\nDir.glob(Rails.root.join(__dir__,
        'test', '*.rb')).sort.each do |file|\n  require file\nend\n\n# bad\nDir['./lib/**/*.rb'].each(&method(:require))\n\n#
        good\nDir['./lib/**/*.rb'].sort.each(&method(:require))\n\n# bad\nDir.glob(Rails.root.join('test',
        '*.rb'), &method(:require))\n\n# good\nDir.glob(Rails.root.join('test', '*.rb')).sort.each(&method(:require))\n\n#
        good - Respect intent if `sort` keyword option is specified in Ruby 3.0 or
        higher.\nDir.glob(Rails.root.join(__dir__, 'test', '*.rb'), sort: false).each(&method(:require))\n----\n\n==
        Lint/NonLocalExitFromIterator\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Enabled\n| Yes\n| No\n|
        0.30\n| -\n|===\n\nChecks for non-local exits from iterators without a return\nvalue.
        It registers an offense under these conditions:\n\n* No value is returned,\n*
        the block is preceded by a method chain,\n* the block has arguments,\n* the
        method which receives the block is not `define_method`\nor `define_singleton_method`,\n*
        the return is not contained in an inner scope, e.g. a lambda or a\nmethod
        definition.\n\n=== Examples\n\n[source,ruby]\n----\nclass ItemApi\n  rescue_from
        ValidationError do |e| # non-iteration block with arg\n    return { message:
        'validation error' } unless e.errors # allowed\n    error_array = e.errors.map
        do |error| # block with method chain\n      return if error.suppress? # warned\n
        \     return \"#{error.param}: invalid\" unless error.message # allowed\n
        \     \"#{error.param}: #{error.message}\"\n    end\n    { message: 'validation
        error', errors: error_array }\n  end\n\n  def update_items\n    transaction
        do # block without arguments\n      return unless update_necessary? # allowed\n
        \     find_each do |item| # block without method chain\n        return if
        item.stock == 0 # false-negative...\n        item.update!(foobar: true)\n
        \     end\n    end\n  end\nend\n----\n\n== Lint/NumberConversion\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Disabled\n| Yes\n| Always (Unsafe)\n| 0.53\n| 1.1\n|===\n\nWarns
        the usage of unsafe number conversions. Unsafe\nnumber conversion can cause
        unexpected error if auto type conversion\nfails. Cop prefer parsing with number
        class instead.\n\nConversion with `Integer`, `Float`, etc. will raise an `ArgumentError`\nif
        given input that is not numeric (eg. an empty string), whereas\n`to_i`, etc.
        will try to convert regardless of input (``''.to_i => 0``).\nAs such, this
        cop is disabled by default because it's not necessarily\nalways correct to
        raise if a value is not numeric.\n\nNOTE: Some values cannot be converted
        properly using one of the `Kernel`\nmethod (for instance, `Time` and `DateTime`
        values are allowed by this\ncop by default). Similarly, Rails' duration methods
        do not work well\nwith `Integer()` and can be allowed with `AllowedMethods`.
        By default,\nthere are no methods to allowed.\n\n=== Safety\n\nAutocorrection
        is unsafe because it is not guaranteed that the\nreplacement `Kernel` methods
        are able to properly handle the\ninput if it is not a standard class.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\n\n'10'.to_i\n'10.2'.to_f\n'10'.to_c\n'1/3'.to_r\n['1',
        '2', '3'].map(&:to_i)\nfoo.try(:to_f)\nbar.send(:to_c)\n\n# good\n\nInteger('10',
        10)\nFloat('10.2')\nComplex('10')\nRational('1/3')\n['1', '2', '3'].map {
        |i| Integer(i, 10) }\nfoo.try { |i| Float(i) }\nbar.send { |i| Complex(i)
        }\n----\n\n==== AllowedMethods: [] (default)\n\n[source,ruby]\n----\n# bad\n10.minutes.to_i\n----\n\n====
        AllowedMethods: [minutes]\n\n[source,ruby]\n----\n# good\n10.minutes.to_i\n----\n\n====
        AllowedPatterns: [] (default)\n\n[source,ruby]\n----\n# bad\n10.minutes.to_i\n----\n\n====
        AllowedPatterns: ['min*']\n\n[source,ruby]\n----\n# good\n10.minutes.to_i\n----\n\n====
        IgnoredClasses: [Time, DateTime] (default)\n\n[source,ruby]\n----\n# good\nTime.now.to_datetime.to_i\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        AllowedMethods\n| `[]`\n| Array\n\n| AllowedPatterns\n| `[]`\n| Array\n\n|
        IgnoredClasses\n| `Time`, `DateTime`\n| Array\n|===\n\n== Lint/NumberedParameterAssignment\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Pending\n| Yes\n| No\n| 1.9\n| -\n|===\n\nChecks for uses of
        numbered parameter assignment.\nIt emulates the following warning in Ruby
        2.7:\n\n  $ ruby -ve '_1 = :value'\n  ruby 2.7.2p137 (2020-10-01 revision
        5445e04352) [x86_64-darwin19]\n  -e:1: warning: `_1' is reserved for numbered
        parameter; consider another name\n\nAssigning to a numbered parameter (from
        `_1` to `_9`) causes an error in Ruby 3.0.\n\n  $ ruby -ve '_1 = :value'\n
        \ ruby 3.0.0p0 (2020-12-25 revision 95aff21468) [x86_64-darwin19]\n  -e:1:
        _1 is reserved for numbered parameter\n\nNOTE: The parametered parameters
        are from `_1` to `_9`. This cop checks `_0`, and over `_10`\nas well to prevent
        confusion.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\n_1 = :value\n\n#
        good\nnon_numbered_parameter_name = :value\n----\n\n== Lint/OrAssignmentToConstant\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Pending\n| No\n| Always (Unsafe)\n| 1.9\n| -\n|===\n\nChecks
        for unintended or-assignment to a constant.\n\nConstants should always be
        assigned in the same location. And its value\nshould always be the same. If
        constants are assigned in multiple\nlocations, the result may vary depending
        on the order of `require`.\n\n=== Safety\n\nThis cop is unsafe because code
        that is already conditionally\nassigning a constant may have its behavior
        changed by autocorrection.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\nCONST
        ||= 1\n\n# good\nCONST = 1\n----\n\n== Lint/OrderedMagicComments\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always (Unsafe)\n| 0.53\n| 1.37\n|===\n\nChecks
        the proper ordering of magic comments and whether\na magic comment is not
        placed before a shebang.\n\n=== Safety\n\nThis cop's autocorrection is unsafe
        because file encoding may change.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\n\n# frozen_string_literal: true\n# encoding: ascii\np [''.frozen?, ''.encoding]
        #=> [true, #<Encoding:UTF-8>]\n\n# good\n\n# encoding: ascii\n# frozen_string_literal:
        true\np [''.frozen?, ''.encoding] #=> [true, #<Encoding:US-ASCII>]\n\n# good\n\n#!/usr/bin/env
        ruby\n# encoding: ascii\n# frozen_string_literal: true\np [''.frozen?, ''.encoding]
        #=> [true, #<Encoding:US-ASCII>]\n----\n\n== Lint/OutOfRangeRegexpRef\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| No\n| No\n| 0.89\n| -\n|===\n\nLooks for references
        of Regexp captures that are out of range\nand thus always returns nil.\n\n===
        Safety\n\nThis cop is unsafe because it is naive in how it determines what\nreferences
        are available based on the last encountered regexp, but\nit cannot handle
        some cases, such as conditional regexp matches, which\nleads to false positives,
        such as:\n\n[source,ruby]\n----\nfoo ? /(c)(b)/ =~ str : /(b)/ =~ str\ndo_something
        if $2\n# $2 is defined for the first condition but not the second, however\n#
        the cop will mark this as an offense.\n----\n\nThis might be a good indication
        of code that should be refactored,\nhowever.\n\n=== Examples\n\n[source,ruby]\n----\n/(foo)bar/
        =~ 'foobar'\n\n# bad - always returns nil\n\nputs $2 # => nil\n\n# good\n\nputs
        $1 # => foo\n----\n\n== Lint/ParenthesesAsGroupedExpression\n\n|===\n| Enabled
        by default | Safe | Supports autocorrection | Version Added | Version Changed\n\n|
        Enabled\n| Yes\n| Always\n| 0.12\n| 0.83\n|===\n\nChecks for space between
        the name of a called method and a left\nparenthesis.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\ndo_something (foo)\n\n# good\ndo_something(foo)\ndo_something (2 + 3)
        * 4\ndo_something (foo * bar).baz\n----\n\n=== References\n\n* https://rubystyle.guide#parens-no-spaces\n\n==
        Lint/PercentStringArray\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| No\n| Always (Unsafe)\n|
        0.41\n| -\n|===\n\nChecks for quotes and commas in %w, e.g. `%w('foo', \"bar\")`\n\nIt
        is more likely that the additional characters are unintended (for\nexample,
        mistranslating an array of literals to percent string notation)\nrather than
        meant to be part of the resulting strings.\n\n=== Safety\n\nThe cop is unsafe
        because the correction changes the values in the array\nand that might have
        been done purposely.\n\n[source,ruby]\n----\n%w('foo', \"bar\") #=> [\"'foo',\",
        '\"bar\"']\n%w(foo bar)      #=> ['foo', 'bar']\n----\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\n\n%w('foo', \"bar\")\n----\n\n[source,ruby]\n----\n# good\n\n%w(foo bar)\n----\n\n==
        Lint/PercentSymbolArray\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n| 0.41\n|
        -\n|===\n\nChecks for colons and commas in %i, e.g. `%i(:foo, :bar)`\n\nIt
        is more likely that the additional characters are unintended (for\nexample,
        mistranslating an array of literals to percent string notation)\nrather than
        meant to be part of the resulting symbols.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\n\n%i(:foo, :bar)\n----\n\n[source,ruby]\n----\n# good\n\n%i(foo bar)\n----\n\n==
        Lint/RaiseException\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| No\n| Always (Unsafe)\n|
        0.81\n| 0.86\n|===\n\nChecks for `raise` or `fail` statements which are\nraising
        `Exception` class.\n\nYou can specify a module name that will be an implicit
        namespace\nusing `AllowedImplicitNamespaces` option. The cop cause a false
        positive\nfor namespaced `Exception` when a namespace is omitted. This option
        can\nprevent the false positive by specifying a namespace to be omitted for\n`Exception`.
        Alternatively, make `Exception` a fully qualified class\nname with an explicit
        namespace.\n\n=== Safety\n\nThis cop is unsafe because it will change the
        exception class being\nraised, which is a change in behavior.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nraise Exception, 'Error message here'\n\n# good\nraise StandardError,
        'Error message here'\n----\n\n==== AllowedImplicitNamespaces: ['Gem']\n\n[source,ruby]\n----\n#
        good\nmodule Gem\n  def self.foo\n    raise Exception # This exception means
        `Gem::Exception`.\n  end\nend\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| AllowedImplicitNamespaces\n|
        `Gem`\n| Array\n|===\n\n=== References\n\n* https://rubystyle.guide#raise-exception\n\n==
        Lint/RandOne\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| Yes\n| No\n| 0.36\n| -\n|===\n\nChecks
        for `rand(1)` calls.\nSuch calls always return `0`.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\n\nrand 1\nKernel.rand(-1)\nrand 1.0\nrand(-1.0)\n----\n\n[source,ruby]\n----\n#
        good\n\n0 # just use 0 instead\n----\n\n== Lint/RedundantCopDisableDirective\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.76\n| -\n|===\n\nDetects instances
        of rubocop:disable comments that can be\nremoved without causing any offenses
        to be reported. It's implemented\nas a cop in that it inherits from the Cop
        base class and calls\nadd_offense. The unusual part of its implementation
        is that it doesn't\nhave any on_* methods or an investigate method. This means
        that it\ndoesn't take part in the investigation phase when the other cops
        do\ntheir work. Instead, it waits until it's called in a later stage of the\nexecution.
        The reason it can't be implemented as a normal cop is that\nit depends on
        the results of all other cops to do its work.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\n# rubocop:disable Layout/LineLength\nx += 1\n# rubocop:enable Layout/LineLength\n\n#
        good\nx += 1\n----\n\n== Lint/RedundantCopEnableDirective\n\n|===\n| Enabled
        by default | Safe | Supports autocorrection | Version Added | Version Changed\n\n|
        Enabled\n| Yes\n| Always\n| 0.76\n| -\n|===\n\nDetects instances of rubocop:enable
        comments that can be\nremoved.\n\nWhen comment enables all cops at once `rubocop:enable
        all`\nthat cop checks whether any cop was actually enabled.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nfoo = 1\n# rubocop:enable Layout/LineLength\n\n# good\nfoo = 1\n----\n\n[source,ruby]\n----\n#
        bad\n# rubocop:disable Style/StringLiterals\nfoo = \"1\"\n# rubocop:enable
        Style/StringLiterals\nbaz\n# rubocop:enable all\n\n# good\n# rubocop:disable
        Style/StringLiterals\nfoo = \"1\"\n# rubocop:enable all\nbaz\n----\n\n== Lint/RedundantDirGlobSort\n\nNOTE:
        Required Ruby version: 3.0\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Pending\n| Yes\n| Always
        (Unsafe)\n| 1.8\n| 1.26\n|===\n\nSort globbed results by default in Ruby 3.0.\nThis
        cop checks for redundant `sort` method to `Dir.glob` and `Dir[]`.\n\n=== Safety\n\nThis
        cop is unsafe, in case of having a file and a directory with\nidentical names,
        since directory will be loaded before the file, which\nwill break `exe/files.rb`
        that rely on `exe.rb` file.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\nDir.glob('./lib/**/*.rb').sort.each
        do |file|\nend\n\nDir['./lib/**/*.rb'].sort.each do |file|\nend\n\n# good\nDir.glob('./lib/**/*.rb').each
        do |file|\nend\n\nDir['./lib/**/*.rb'].each do |file|\nend\n----\n\n== Lint/RedundantRegexpQuantifiers\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Pending\n| Yes\n| Always\n| 1.53\n| -\n|===\n\nChecks for redundant
        quantifiers inside Regexp literals.\n\nIt is always allowed when interpolation
        is used in a regexp literal,\nbecause it's unknown what kind of string will
        be expanded as a result:\n\n[source,ruby]\n----\n/(?:a*#{interpolation})?/x\n----\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\n/(?:x+)+/\n\n# good\n/(?:x)+/\n\n#
        good\n/(?:x+)/\n\n# bad\n/(?:x+)?/\n\n# good\n/(?:x)*/\n\n# good\n/(?:x*)/\n----\n\n==
        Lint/RedundantRequireStatement\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always
        (Unsafe)\n| 0.76\n| 1.57\n|===\n\nChecks for unnecessary `require` statement.\n\nThe
        following features are unnecessary `require` statement because\nthey are already
        loaded. e.g. Ruby 2.2:\n\n  ruby -ve 'p $LOADED_FEATURES.reject { |feature|
        %r|/| =~ feature }'\n  ruby 2.2.8p477 (2017-09-14 revision 59906) [x86_64-darwin13]\n
        \ [\"enumerator.so\", \"rational.so\", \"complex.so\", \"thread.rb\"]\n\nBelow
        are the features that each `TargetRubyVersion` targets.\n\n  * 2.0+ ... `enumerator`\n
        \ * 2.1+ ... `thread`\n  * 2.2+ ... Add `rational` and `complex` above\n  *
        2.5+ ... Add `pp` above\n  * 2.7+ ... Add `ruby2_keywords` above\n  * 3.1+
        ... Add `fiber` above\n  * 3.2+ ... `set`\n\nThis cop target those features.\n\n===
        Safety\n\nThis cop's autocorrection is unsafe because if `require 'pp'` is
        removed from one file,\n`NameError` can be encountered when another file uses
        `PP.pp`.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\nrequire 'unloaded_feature'\nrequire
        'thread'\n\n# good\nrequire 'unloaded_feature'\n----\n\n== Lint/RedundantSafeNavigation\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| No\n| Always (Unsafe)\n| 0.93\n| -\n|===\n\nChecks
        for redundant safe navigation calls.\nUse cases where a constant, named in
        camel case for classes and modules is `nil` are rare,\nand an offense is not
        detected when the receiver is a constant. The detection also applies\nto literal
        receivers, except for `nil`.\n\nFor all receivers, the `instance_of?`, `kind_of?`,
        `is_a?`, `eql?`, `respond_to?`,\nand `equal?` methods are checked by default.\nThese
        are customizable with `AllowedMethods` option.\n\nThe `AllowedMethods` option
        specifies nil-safe methods,\nin other words, it is a method that is allowed
        to skip safe navigation.\nNote that the `AllowedMethod` option is not an option
        that specifies methods\nfor which to suppress (allow) this cop's check.\n\nIn
        the example below, the safe navigation operator (`&.`) is unnecessary\nbecause
        `NilClass` has methods like `respond_to?` and `is_a?`.\n\n=== Safety\n\nThis
        cop is unsafe, because autocorrection can change the return type of\nthe expression.
        An offending expression that previously could return `nil`\nwill be autocorrected
        to never return `nil`.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\nCamelCaseConst&.do_something\n\n#
        bad\ndo_something if attrs&.respond_to?(:[])\n\n# good\ndo_something if attrs.respond_to?(:[])\n\n#
        bad\nwhile node&.is_a?(BeginNode)\n  node = node.parent\nend\n\n# good\nCamelCaseConst.do_something\n\n#
        good\nwhile node.is_a?(BeginNode)\n  node = node.parent\nend\n\n# good - without
        `&.` this will always return `true`\nfoo&.respond_to?(:to_a)\n\n# bad - for
        `nil`s conversion methods return default values for the type\nfoo&.to_h ||
        {}\nfoo&.to_h { |k, v| [k, v] } || {}\nfoo&.to_a || []\nfoo&.to_i || 0\nfoo&.to_f
        || 0.0\nfoo&.to_s || ''\n\n# good\nfoo.to_h\nfoo.to_h { |k, v| [k, v] }\nfoo.to_a\nfoo.to_i\nfoo.to_f\nfoo.to_s\n----\n\n====
        AllowedMethods: [nil_safe_method]\n\n[source,ruby]\n----\n# bad\ndo_something
        if attrs&.nil_safe_method(:[])\n\n# good\ndo_something if attrs.nil_safe_method(:[])\ndo_something
        if attrs&.not_nil_safe_method(:[])\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| AllowedMethods\n| `instance_of?`,
        `kind_of?`, `is_a?`, `eql?`, `respond_to?`, `equal?`\n| Array\n|===\n\n==
        Lint/RedundantSplatExpansion\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n|
        0.76\n| 1.7\n|===\n\nChecks for unneeded usages of splat expansion\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\na = *[1, 2, 3]\na = *'a'\na = *1\n['a',
        'b', *%w(c d e), 'f', 'g']\n\n# good\nc = [1, 2, 3]\na = *c\na, b = *c\na,
        *b = *c\na = *1..10\na = ['a']\n['a', 'b', 'c', 'd', 'e', 'f', 'g']\n\n# bad\ndo_something(*['foo',
        'bar', 'baz'])\n\n# good\ndo_something('foo', 'bar', 'baz')\n\n# bad\nbegin\n
        \ foo\nrescue *[StandardError, ApplicationError]\n  bar\nend\n\n# good\nbegin\n
        \ foo\nrescue StandardError, ApplicationError\n  bar\nend\n\n# bad\ncase foo\nwhen
        *[1, 2, 3]\n  bar\nelse\n  baz\nend\n\n# good\ncase foo\nwhen 1, 2, 3\n  bar\nelse\n
        \ baz\nend\n----\n\n==== AllowPercentLiteralArrayArgument: true (default)\n\n[source,ruby]\n----\n#
        good\ndo_something(*%w[foo bar baz])\n----\n\n==== AllowPercentLiteralArrayArgument:
        false\n\n[source,ruby]\n----\n# bad\ndo_something(*%w[foo bar baz])\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        AllowPercentLiteralArrayArgument\n| `true`\n| Boolean\n|===\n\n== Lint/RedundantStringCoercion\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.19\n| 0.77\n|===\n\nChecks for
        string conversion in string interpolation, `print`, `puts`, and `warn` arguments,\nwhich
        is redundant.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\n\n\"result is
        #{something.to_s}\"\nprint something.to_s\nputs something.to_s\nwarn something.to_s\n----\n\n[source,ruby]\n----\n#
        good\n\n\"result is #{something}\"\nprint something\nputs something\nwarn
        something\n----\n\n=== References\n\n* https://rubystyle.guide#no-to-s\n\n==
        Lint/RedundantWithIndex\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n| 0.50\n|
        -\n|===\n\nChecks for redundant `with_index`.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nary.each_with_index do |v|\n  v\nend\n\n# good\nary.each do |v|\n  v\nend\n\n#
        bad\nary.each.with_index do |v|\n  v\nend\n\n# good\nary.each do |v|\n  v\nend\n----\n\n==
        Lint/RedundantWithObject\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n| 0.51\n|
        -\n|===\n\nChecks for redundant `with_object`.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nary.each_with_object([]) do |v|\n  v\nend\n\n# good\nary.each do |v|\n
        \ v\nend\n\n# bad\nary.each.with_object([]) do |v|\n  v\nend\n\n# good\nary.each
        do |v|\n  v\nend\n----\n\n== Lint/RefinementImportMethods\n\nNOTE: Required
        Ruby version: 3.1\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Pending\n| Yes\n| No\n| 1.27\n| -\n|===\n\nChecks
        if `include` or `prepend` is called in `refine` block.\nThese methods are
        deprecated and should be replaced with `Refinement#import_methods`.\n\nIt
        emulates deprecation warnings in Ruby 3.1.\n\n=== Safety\n\nThis cop's autocorrection
        is unsafe because `include M` will affect the included class\nif any changes
        are made to module `M`.\nOn the other hand, `import_methods M` uses a snapshot
        of method definitions,\nthus it will not be affected if module `M` changes.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\nrefine Foo do\n  include Bar\nend\n\n#
        bad\nrefine Foo do\n  prepend Bar\nend\n\n# good\nrefine Foo do\n  import_methods
        Bar\nend\n----\n\n== Lint/RegexpAsCondition\n\n|===\n| Enabled by default
        | Safe | Supports autocorrection | Version Added | Version Changed\n\n| Enabled\n|
        Yes\n| Always\n| 0.51\n| 0.86\n|===\n\nChecks for regexp literals used as
        `match-current-line`.\nIf a regexp literal is in condition, the regexp matches
        `$_` implicitly.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\nif /foo/\n
        \ do_something\nend\n\n# good\nif /foo/ =~ $_\n  do_something\nend\n----\n\n==
        Lint/RequireParentheses\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| Yes\n| No\n| 0.18\n| -\n|===\n\nChecks
        for expressions where there is a call to a predicate\nmethod with at least
        one argument, where no parentheses are used around\nthe parameter list, and
        a boolean operator, && or ||, is used in the\nlast argument.\n\nThe idea behind
        warning for these constructs is that the user might\nbe under the impression
        that the return value from the method call is\nan operand of &&/||.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\n\nif day.is? :tuesday && month ==
        :jan\n  # ...\nend\n----\n\n[source,ruby]\n----\n# good\n\nif day.is?(:tuesday)
        && month == :jan\n  # ...\nend\n----\n\n== Lint/RequireRangeParentheses\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Pending\n| Yes\n| No\n| 1.32\n| -\n|===\n\nChecks that a range
        literal is enclosed in parentheses when the end of the range is\nat a line
        break.\n\nNOTE: The following is maybe intended for `(42..)`. But, compatible
        is `42..do_something`.\nSo, this cop does not provide autocorrection because
        it is left to user.\n\n[source,ruby]\n----\ncase condition\nwhen 42..\n  do_something\nend\n----\n\n===
        Examples\n\n[source,ruby]\n----\n# bad - Represents `(1..42)`, not endless
        range.\n1..\n42\n\n# good - It's incompatible, but your intentions when using
        endless range may be:\n(1..)\n42\n\n# good\n1..42\n\n# good\n(1..42)\n\n#
        good\n(1..\n42)\n----\n\n== Lint/RequireRelativeSelfPath\n\n|===\n| Enabled
        by default | Safe | Supports autocorrection | Version Added | Version Changed\n\n|
        Pending\n| Yes\n| Always\n| 1.22\n| -\n|===\n\nChecks for uses a file requiring
        itself with `require_relative`.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\n\n# foo.rb\nrequire_relative 'foo'\nrequire_relative 'bar'\n\n# good\n\n#
        foo.rb\nrequire_relative 'bar'\n----\n\n== Lint/RescueException\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| No\n| 0.9\n| 0.27\n|===\n\nChecks for `rescue`
        blocks targeting the Exception class.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\n\nbegin\n  do_something\nrescue Exception\n  handle_exception\nend\n----\n\n[source,ruby]\n----\n#
        good\n\nbegin\n  do_something\nrescue ArgumentError\n  handle_exception\nend\n----\n\n===
        References\n\n* https://rubystyle.guide#no-blind-rescues\n\n== Lint/RescueType\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.49\n| -\n|===\n\nCheck for arguments
        to `rescue` that will result in a `TypeError`\nif an exception is raised.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\nbegin\n  bar\nrescue nil\n  baz\nend\n\n#
        bad\ndef foo\n  bar\nrescue 1, 'a', \"#{b}\", 0.0, [], {}\n  baz\nend\n\n#
        good\nbegin\n  bar\nrescue\n  baz\nend\n\n# good\ndef foo\n  bar\nrescue NameError\n
        \ baz\nend\n----\n\n== Lint/ReturnInVoidContext\n\n|===\n| Enabled by default
        | Safe | Supports autocorrection | Version Added | Version Changed\n\n| Enabled\n|
        Yes\n| No\n| 0.50\n| -\n|===\n\nChecks for the use of a return with a value
        in a context\nwhere the value will be ignored. (initialize and setter methods)\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\ndef initialize\n  foo\n  return :qux
        if bar?\n  baz\nend\n\ndef foo=(bar)\n  return 42\nend\n----\n\n[source,ruby]\n----\n#
        good\ndef initialize\n  foo\n  return if bar?\n  baz\nend\n\ndef foo=(bar)\n
        \ return\nend\n----\n\n== Lint/SafeNavigationChain\n\nNOTE: Required Ruby
        version: 2.3\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n| 0.47\n|
        0.77\n|===\n\nThe safe navigation operator returns nil if the receiver is\nnil.
        If you chain an ordinary method call after a safe\nnavigation operator, it
        raises NoMethodError. We should use a\nsafe navigation operator after a safe
        navigation operator.\nThis cop checks for the problem outlined above.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\n\nx&.foo.bar\nx&.foo + bar\nx&.foo[bar]\n----\n\n[source,ruby]\n----\n#
        good\n\nx&.foo&.bar\nx&.foo || bar\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| AllowedMethods\n| `present?`,
        `blank?`, `presence`, `try`, `try!`, `in?`\n| Array\n|===\n\n== Lint/SafeNavigationConsistency\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.55\n| 0.77\n|===\n\nCheck to make
        sure that if safe navigation is used for a method\ncall in an `&&` or `||`
        condition that safe navigation is used for all\nmethod calls on that same
        object.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\nfoo&.bar && foo.baz\n\n#
        bad\nfoo.bar || foo&.baz\n\n# bad\nfoo&.bar && (foobar.baz || foo.baz)\n\n#
        good\nfoo.bar && foo.baz\n\n# good\nfoo&.bar || foo&.baz\n\n# good\nfoo&.bar
        && (foobar.baz || foo&.baz)\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| AllowedMethods\n| `present?`,
        `blank?`, `presence`, `try`, `try!`\n| Array\n|===\n\n== Lint/SafeNavigationWithEmpty\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.62\n| 0.87\n|===\n\nChecks to make
        sure safe navigation isn't used with `empty?` in\na conditional.\n\nWhile
        the safe navigation operator is generally a good idea, when\nchecking `foo&.empty?`
        in a conditional, `foo` being `nil` will actually\ndo the opposite of what
        the author intends.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\nreturn
        if foo&.empty?\nreturn unless foo&.empty?\n\n# good\nreturn if foo && foo.empty?\nreturn
        unless foo && foo.empty?\n----\n\n== Lint/ScriptPermission\n\n|===\n| Enabled
        by default | Safe | Supports autocorrection | Version Added | Version Changed\n\n|
        Enabled\n| Yes\n| Always\n| 0.49\n| 0.50\n|===\n\nChecks if a file which has
        a shebang line as\nits first line is granted execute permission.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\n\n# A file which has a shebang line as its first line is not\n# granted
        execute permission.\n\n#!/usr/bin/env ruby\nputs 'hello, world'\n\n# good\n\n#
        A file which has a shebang line as its first line is\n# granted execute permission.\n\n#!/usr/bin/env
        ruby\nputs 'hello, world'\n\n# good\n\n# A file which has not a shebang line
        as its first line is not\n# granted execute permission.\n\nputs 'hello, world'\n----\n\n==
        Lint/SelfAssignment\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| Yes\n| No\n| 0.89\n| -\n|===\n\nChecks
        for self-assignments.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\nfoo =
        foo\nfoo, bar = foo, bar\nFoo = Foo\nhash['foo'] = hash['foo']\nobj.attr =
        obj.attr\n\n# good\nfoo = bar\nfoo, bar = bar, foo\nFoo = Bar\nhash['foo']
        = hash['bar']\nobj.attr = obj.attr2\n\n# good (method calls possibly can return
        different results)\nhash[foo] = hash[foo]\n----\n\n== Lint/SendWithMixinArgument\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.75\n| -\n|===\n\nChecks for `send`,
        `public_send`, and `__send__` methods\nwhen using mix-in.\n\n`include` and
        `prepend` methods were private methods until Ruby 2.0,\nthey were mixed-in
        via `send` method. This cop uses Ruby 2.1 or\nhigher style that can be called
        by public methods.\nAnd `extend` method that was originally a public method
        is also targeted\nfor style unification.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nFoo.send(:include, Bar)\nFoo.send(:prepend, Bar)\nFoo.send(:extend, Bar)\n\n#
        bad\nFoo.public_send(:include, Bar)\nFoo.public_send(:prepend, Bar)\nFoo.public_send(:extend,
        Bar)\n\n# bad\nFoo.__send__(:include, Bar)\nFoo.__send__(:prepend, Bar)\nFoo.__send__(:extend,
        Bar)\n\n# good\nFoo.include Bar\nFoo.prepend Bar\nFoo.extend Bar\n----\n\n==
        Lint/ShadowedArgument\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| Yes\n| No\n| 0.52\n| -\n|===\n\nChecks
        for shadowed arguments.\n\nThis cop has `IgnoreImplicitReferences` configuration
        option.\nIt means argument shadowing is used in order to pass parameters\nto
        zero arity `super` when `IgnoreImplicitReferences` is `true`.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\ndo_something do |foo|\n  foo = 42\n  puts foo\nend\n\ndef do_something(foo)\n
        \ foo = 42\n  puts foo\nend\n\n# good\ndo_something do |foo|\n  foo = foo
        + 42\n  puts foo\nend\n\ndef do_something(foo)\n  foo = foo + 42\n  puts foo\nend\n\ndef
        do_something(foo)\n  puts foo\nend\n----\n\n==== IgnoreImplicitReferences:
        false (default)\n\n[source,ruby]\n----\n# bad\ndef do_something(foo)\n  foo
        = 42\n  super\nend\n\ndef do_something(foo)\n  foo = super\n  bar\nend\n----\n\n====
        IgnoreImplicitReferences: true\n\n[source,ruby]\n----\n# good\ndef do_something(foo)\n
        \ foo = 42\n  super\nend\n\ndef do_something(foo)\n  foo = super\n  bar\nend\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        IgnoreImplicitReferences\n| `false`\n| Boolean\n|===\n\n== Lint/ShadowedException\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| No\n| 0.41\n| -\n|===\n\nChecks for a rescued
        exception that get shadowed by a\nless specific exception being rescued before
        a more specific\nexception is rescued.\n\nAn exception is considered shadowed
        if it is rescued after its\nancestor is, or if it and its ancestor are both
        rescued in the\nsame `rescue` statement. In both cases, the more specific
        rescue is\nunnecessary because it is covered by rescuing the less specific\nexception.
        (ie. `rescue Exception, StandardError` has the same behavior\nwhether `StandardError`
        is included or not, because all ``StandardError``s\nare rescued by `rescue
        Exception`).\n\n=== Examples\n\n[source,ruby]\n----\n# bad\n\nbegin\n  something\nrescue
        Exception\n  handle_exception\nrescue StandardError\n  handle_standard_error\nend\n\n#
        bad\nbegin\n  something\nrescue Exception, StandardError\n  handle_error\nend\n\n#
        good\n\nbegin\n  something\nrescue StandardError\n  handle_standard_error\nrescue
        Exception\n  handle_exception\nend\n\n# good, however depending on runtime
        environment.\n#\n# This is a special case for system call errors.\n# System
        dependent error code depends on runtime environment.\n# For example, whether
        `Errno::EAGAIN` and `Errno::EWOULDBLOCK` are\n# the same error code or different
        error code depends on environment.\n# This good case is for `Errno::EAGAIN`
        and `Errno::EWOULDBLOCK` with\n# the same error code.\nbegin\n  something\nrescue
        Errno::EAGAIN, Errno::EWOULDBLOCK\n  handle_standard_error\nend\n----\n\n==
        Lint/ShadowingOuterLocalVariable\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Enabled\n| Yes\n| No\n|
        0.9\n| -\n|===\n\nChecks for the use of local variable names from an outer
        scope\nin block arguments or block-local variables. This mirrors the warning\ngiven
        by `ruby -cw` prior to Ruby 2.6:\n\"shadowing outer local variable - foo\".\n\nNOTE:
        Shadowing of variables in block passed to `Ractor.new` is allowed\nbecause
        `Ractor` should not access outer variables.\neg. following style is encouraged:\n\n
        \ [source,ruby]\n  ----\n  worker_id, pipe = env\n  Ractor.new(worker_id,
        pipe) do |worker_id, pipe|\n  end\n  ----\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\n\ndef some_method\n  foo = 1\n\n  2.times do |foo| # shadowing outer
        `foo`\n    do_something(foo)\n  end\nend\n----\n\n[source,ruby]\n----\n# good\n\ndef
        some_method\n  foo = 1\n\n  2.times do |bar|\n    do_something(bar)\n  end\nend\n----\n\n==
        Lint/StructNewOverride\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| Yes\n| No\n| 0.81\n| -\n|===\n\nChecks
        unexpected overrides of the `Struct` built-in methods\nvia `Struct.new`.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\nBad = Struct.new(:members, :clone,
        :count)\nb = Bad.new([], true, 1)\nb.members #=> [] (overriding `Struct#members`)\nb.clone
        #=> true (overriding `Object#clone`)\nb.count #=> 1 (overriding `Enumerable#count`)\n\n#
        good\nGood = Struct.new(:id, :name)\ng = Good.new(1, \"foo\")\ng.members #=>
        [:id, :name]\ng.clone #=> #<struct Good id=1, name=\"foo\">\ng.count #=> 2\n----\n\n==
        Lint/SuppressedException\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| Yes\n| No\n| 0.9\n| 1.12\n|===\n\nChecks
        for `rescue` blocks with no body.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\ndef some_method\n  do_something\nrescue\nend\n\n# bad\nbegin\n  do_something\nrescue\nend\n\n#
        good\ndef some_method\n  do_something\nrescue\n  handle_exception\nend\n\n#
        good\nbegin\n  do_something\nrescue\n  handle_exception\nend\n----\n\n====
        AllowComments: true (default)\n\n[source,ruby]\n----\n# good\ndef some_method\n
        \ do_something\nrescue\n  # do nothing\nend\n\n# good\nbegin\n  do_something\nrescue\n
        \ # do nothing\nend\n----\n\n==== AllowComments: false\n\n[source,ruby]\n----\n#
        bad\ndef some_method\n  do_something\nrescue\n  # do nothing\nend\n\n# bad\nbegin\n
        \ do_something\nrescue\n  # do nothing\nend\n----\n\n==== AllowNil: true (default)\n\n[source,ruby]\n----\n#
        good\ndef some_method\n  do_something\nrescue\n  nil\nend\n\n# good\nbegin\n
        \ do_something\nrescue\n  # do nothing\nend\n\n# good\ndo_something rescue
        nil\n----\n\n==== AllowNil: false\n\n[source,ruby]\n----\n# bad\ndef some_method\n
        \ do_something\nrescue\n  nil\nend\n\n# bad\nbegin\n  do_something\nrescue\n
        \ nil\nend\n\n# bad\ndo_something rescue nil\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| AllowComments\n| `true`\n|
        Boolean\n\n| AllowNil\n| `true`\n| Boolean\n|===\n\n=== References\n\n* https://rubystyle.guide#dont-hide-exceptions\n\n==
        Lint/SymbolConversion\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Pending\n| Yes\n| Always\n| 1.9\n|
        1.16\n|===\n\nChecks for uses of literal strings converted to\na symbol where
        a literal symbol could be used instead.\n\nThere are two possible styles for
        this cop.\n`strict` (default) will register an offense for any incorrect usage.\n`consistent`
        additionally requires hashes to use the same style for\nevery symbol key (ie.
        if any symbol key needs to be quoted it requires\nall keys to be quoted).\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\n'string'.to_sym\n:symbol.to_sym\n'underscored_string'.to_sym\n:'underscored_symbol'\n'hyphenated-string'.to_sym\n\"string_#{interpolation}\".to_sym\n\n#
        good\n:string\n:symbol\n:underscored_string\n:underscored_symbol\n:'hyphenated-string'\n:\"string_#{interpolation}\"\n----\n\n====
        EnforcedStyle: strict (default)\n\n[source,ruby]\n----\n# bad\n{\n  'a': 1,\n
        \ \"b\": 2,\n  'c-d': 3\n}\n\n# good (don't quote keys that don't require
        quoting)\n{\n  a: 1,\n  b: 2,\n  'c-d': 3\n}\n----\n\n==== EnforcedStyle:
        consistent\n\n[source,ruby]\n----\n# bad\n{\n  a: 1,\n  'b-c': 2\n}\n\n# good
        (quote all keys if any need quoting)\n{\n  'a': 1,\n  'b-c': 2\n}\n\n# good
        (no quoting required)\n{\n  a: 1,\n  b: 2\n}\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| EnforcedStyle\n| `strict`\n|
        `strict`, `consistent`\n|===\n\n== Lint/Syntax\n\n|===\n| Enabled by default
        | Safe | Supports autocorrection | Version Added | Version Changed\n\n| Enabled\n|
        Yes\n| No\n| 0.9\n| -\n|===\n\nRepacks Parser's diagnostics/errors\ninto RuboCop's
        offenses.\n\n== Lint/ToEnumArguments\n\n|===\n| Enabled by default | Safe
        | Supports autocorrection | Version Added | Version Changed\n\n| Pending\n|
        Yes\n| No\n| 1.1\n| -\n|===\n\nEnsures that `to_enum`/`enum_for`, called for
        the current method,\nhas correct arguments.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\ndef foo(x, y = 1)\n  return to_enum(__callee__, x) # `y` is missing\nend\n\n#
        good\ndef foo(x, y = 1)\n  # Alternatives to `__callee__` are `__method__`
        and `:foo`.\n  return to_enum(__callee__, x, y)\nend\n\n# good\ndef foo(x,
        y = 1)\n  # It is also allowed if it is wrapped in some method like Sorbet.\n
        \ return to_enum(T.must(__callee__), x, y)\nend\n----\n\n== Lint/ToJSON\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Always\n| 0.66\n| -\n|===\n\nChecks to make
        sure `#to_json` includes an optional argument.\nWhen overriding `#to_json`,
        callers may invoke JSON\ngeneration via `JSON.generate(your_obj)`.  Since
        `JSON#generate` allows\nfor an optional argument, your method should too.\n\n===
        Examples\n\n[source,ruby]\n----\nclass Point\n  attr_reader :x, :y\n\n  #
        bad, incorrect arity\n  def to_json\n    JSON.generate([x, y])\n  end\n\n
        \ # good, preserving args\n  def to_json(*args)\n    JSON.generate([x, y],
        *args)\n  end\n\n  # good, discarding args\n  def to_json(*_args)\n    JSON.generate([x,
        y])\n  end\nend\n----\n\n== Lint/TopLevelReturnWithArgument\n\n|===\n| Enabled
        by default | Safe | Supports autocorrection | Version Added | Version Changed\n\n|
        Enabled\n| Yes\n| Always\n| 0.89\n| -\n|===\n\nChecks for top level return
        with arguments. If there is a\ntop-level return statement with an argument,
        then the argument is\nalways ignored. This is detected automatically since
        Ruby 2.7.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\nreturn 1\n\n# good\nreturn\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        Exclude\n| `+**/*.jb+`\n| Array\n|===\n\n== Lint/TrailingCommaInAttributeDeclaration\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Command-line only\n| 0.90\n| 1.61\n|===\n\nChecks
        for trailing commas in attribute declarations, such as\n`#attr_reader`. Leaving
        a trailing comma will nullify the next method\ndefinition by overriding it
        with a getter method.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\nclass
        Foo\n  attr_reader :foo,\n\n  def bar\n    puts \"Unreachable.\"\n  end\nend\n\n#
        good\nclass Foo\n  attr_reader :foo\n\n  def bar\n    puts \"No problem!\"\n
        \ end\nend\n----\n\n== Lint/TripleQuotes\n\n|===\n| Enabled by default | Safe
        | Supports autocorrection | Version Added | Version Changed\n\n| Pending\n|
        Yes\n| Always\n| 1.9\n| -\n|===\n\nChecks for \"triple quotes\" (strings delimited
        by any odd number\nof quotes greater than 1).\n\nRuby allows multiple strings
        to be implicitly concatenated by just\nbeing adjacent in a statement (ie.
        `\"foo\"\"bar\" == \"foobar\"`). This sometimes\ngives the impression that
        there is something special about triple quotes, but\nin fact it is just extra
        unnecessary quotes and produces the same string. Each\npair of quotes produces
        an additional concatenated empty string, so the result\nis still only the
        \"actual\" string within the delimiters.\n\nNOTE: Although this cop is called
        triple quotes, the same behavior is present\nfor strings delimited by 5, 7,
        etc. quotation marks.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\n\"\"\"\n
        \ A string\n\"\"\"\n\n# bad\n'''\n  A string\n'''\n\n# good\n\"\n  A string\n\"\n\n#
        good\n<<STRING\n  A string\nSTRING\n\n# good (but not the same spacing as
        the bad case)\n'A string'\n----\n\n== Lint/UnderscorePrefixedVariableName\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| No\n| 0.21\n| -\n|===\n\nChecks for underscore-prefixed
        variables that are actually\nused.\n\nSince block keyword arguments cannot
        be arbitrarily named at call\nsites, the `AllowKeywordBlockArguments` will
        allow use of underscore-\nprefixed block keyword arguments.\n\n=== Examples\n\n====
        AllowKeywordBlockArguments: false (default)\n\n[source,ruby]\n----\n# bad\n\n[1,
        2, 3].each do |_num|\n  do_something(_num)\nend\n\nquery(:sales) do |_id:,
        revenue:, cost:|\n  {_id: _id, profit: revenue - cost}\nend\n\n# good\n\n[1,
        2, 3].each do |num|\n  do_something(num)\nend\n\n[1, 2, 3].each do |_num|\n
        \ do_something # not using `_num`\nend\n----\n\n==== AllowKeywordBlockArguments:
        true\n\n[source,ruby]\n----\n# good\n\nquery(:sales) do |_id:, revenue:, cost:|\n
        \ {_id: _id, profit: revenue - cost}\nend\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| AllowKeywordBlockArguments\n|
        `false`\n| Boolean\n|===\n\n== Lint/UnexpectedBlockArity\n\n|===\n| Enabled
        by default | Safe | Supports autocorrection | Version Added | Version Changed\n\n|
        Pending\n| No\n| No\n| 1.5\n| -\n|===\n\nChecks for a block that is known
        to need more positional\nblock arguments than are given (by default this is
        configured for\n`Enumerable` methods needing 2 arguments). Optional arguments
        are allowed,\nalthough they don't generally make sense as the default value
        will\nbe used. Blocks that have no receiver, or take splatted arguments\n(ie.
        `*args`) are always accepted.\n\nKeyword arguments (including `**kwargs`)
        do not get counted towards\nthis, as they are not used by the methods in question.\n\nMethod
        names and their expected arity can be configured like this:\n\n[source,yaml]\n----\nMethods:\n
        \ inject: 2\n  reduce: 2\n----\n\n=== Safety\n\nThis cop matches for method
        names only and hence cannot tell apart\nmethods with same name in different
        classes, which may lead to a\nfalse positive.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nvalues.reduce {}\nvalues.min { |a| a }\nvalues.sort { |a; b| a + b }\n\n#
        good\nvalues.reduce { |memo, obj| memo << obj }\nvalues.min { |a, b| a <=>
        b }\nvalues.sort { |*x| x[0] <=> x[1] }\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| Methods\n| `{\"chunk_while\"=>2,
        \"each_with_index\"=>2, \"each_with_object\"=>2, \"inject\"=>2, \"max\"=>2,
        \"min\"=>2, \"minmax\"=>2, \"reduce\"=>2, \"slice_when\"=>2, \"sort\"=>2}`\n|
        \n|===\n\n== Lint/UnifiedInteger\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n|
        0.43\n| -\n|===\n\nChecks for using Fixnum or Bignum constant.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\n\n1.is_a?(Fixnum)\n1.is_a?(Bignum)\n----\n\n[source,ruby]\n----\n# good\n\n1.is_a?(Integer)\n----\n\n==
        Lint/UnmodifiedReduceAccumulator\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Pending\n| Yes\n| No\n|
        1.1\n| 1.5\n|===\n\nLooks for `reduce` or `inject` blocks where the value
        returned (implicitly or\nexplicitly) does not include the accumulator. A block
        is considered valid as\nlong as at least one return value includes the accumulator.\n\nIf
        the accumulator is not included in the return value, then the entire\nblock
        will just return a transformation of the last element value, and\ncould be
        rewritten as such without a loop.\n\nAlso catches instances where an index
        of the accumulator is returned, as\nthis may change the type of object being
        retained.\n\nNOTE: For the purpose of reducing false positives, this cop only
        flags\nreturns in `reduce` blocks where the element is the only variable in\nthe
        expression (since we will not be able to tell what other variables\nrelate
        to via static analysis).\n\n=== Examples\n\n[source,ruby]\n----\n# bad\n(1..4).reduce(0)
        do |acc, el|\n  el * 2\nend\n\n# bad, may raise a NoMethodError after the
        first iteration\n%w(a b c).reduce({}) do |acc, letter|\n  acc[letter] = true\nend\n\n#
        good\n(1..4).reduce(0) do |acc, el|\n  acc + el * 2\nend\n\n# good, element
        is returned but modified using the accumulator\nvalues.reduce do |acc, el|\n
        \ el << acc\n  el\nend\n\n# good, returns the accumulator instead of the index\n%w(a
        b c).reduce({}) do |acc, letter|\n  acc[letter] = true\n  acc\nend\n\n# good,
        at least one branch returns the accumulator\nvalues.reduce(nil) do |result,
        value|\n  break result if something?\n  value\nend\n\n# good, recursive\nkeys.reduce(self)
        { |result, key| result[key] }\n\n# ignored as the return value cannot be determined\nenum.reduce
        do |acc, el|\n  x = foo(acc, el)\n  bar(x)\nend\n----\n\n== Lint/UnreachableCode\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| No\n| 0.9\n| -\n|===\n\nChecks for unreachable
        code.\nThe check are based on the presence of flow of control\nstatement in
        non-final position in `begin` (implicit) blocks.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\n\ndef some_method\n  return\n  do_something\nend\n\n# bad\n\ndef some_method\n
        \ if cond\n    return\n  else\n    return\n  end\n  do_something\nend\n----\n\n[source,ruby]\n----\n#
        good\n\ndef some_method\n  do_something\nend\n----\n\n== Lint/UnreachableLoop\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| No\n| 0.89\n| 1.7\n|===\n\nChecks for loops
        that will have at most one iteration.\n\nA loop that can never reach the second
        iteration is a possible error in the code.\nIn rare cases where only one iteration
        (or at most one iteration) is intended behavior,\nthe code should be refactored
        to use `if` conditionals.\n\nNOTE: Block methods that are used with ``Enumerable``s
        are considered to be loops.\n\n`AllowedPatterns` can be used to match against
        the block receiver in order to allow\ncode that would otherwise be registered
        as an offense (eg. `times` used not in an\n`Enumerable` context).\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nwhile node\n  do_something(node)\n  node = node.parent\n  break\nend\n\n#
        good\nwhile node\n  do_something(node)\n  node = node.parent\nend\n\n# bad\ndef
        verify_list(head)\n  item = head\n  begin\n    if verify(item)\n      return
        true\n    else\n      return false\n    end\n  end while(item)\nend\n\n# good\ndef
        verify_list(head)\n  item = head\n  begin\n    if verify(item)\n      item
        = item.next\n    else\n      return false\n    end\n  end while(item)\n\n
        \ true\nend\n\n# bad\ndef find_something(items)\n  items.each do |item|\n
        \   if something?(item)\n      return item\n    else\n      raise NotFoundError\n
        \   end\n  end\nend\n\n# good\ndef find_something(items)\n  items.each do
        |item|\n    if something?(item)\n      return item\n    end\n  end\n  raise
        NotFoundError\nend\n\n# bad\n2.times { raise ArgumentError }\n----\n\n====
        AllowedPatterns: ['(exactly|at_least|at_most)\\(\\d+\\)\\.times'] (default)\n\n[source,ruby]\n----\n#
        good\nexactly(2).times { raise StandardError }\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| AllowedPatterns\n| `(?-mix:(exactly\\|at_least\\|at_most)\\(\\d+\\)\\.times)`\n|
        Array\n|===\n\n== Lint/UnusedBlockArgument\n\n|===\n| Enabled by default |
        Safe | Supports autocorrection | Version Added | Version Changed\n\n| Enabled\n|
        Yes\n| Command-line only\n| 0.21\n| 1.61\n|===\n\nChecks for unused block
        arguments.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\ndo_something do
        |used, unused|\n  puts used\nend\n\ndo_something do |bar|\n  puts :foo\nend\n\ndefine_method(:foo)
        do |bar|\n  puts :baz\nend\n\n# good\ndo_something do |used, _unused|\n  puts
        used\nend\n\ndo_something do\n  puts :foo\nend\n\ndefine_method(:foo) do |_bar|\n
        \ puts :baz\nend\n----\n\n==== IgnoreEmptyBlocks: true (default)\n\n[source,ruby]\n----\n#
        good\ndo_something { |unused| }\n----\n\n==== IgnoreEmptyBlocks: false\n\n[source,ruby]\n----\n#
        bad\ndo_something { |unused| }\n----\n\n==== AllowUnusedKeywordArguments:
        false (default)\n\n[source,ruby]\n----\n# bad\ndo_something do |unused: 42|\n
        \ foo\nend\n----\n\n==== AllowUnusedKeywordArguments: true\n\n[source,ruby]\n----\n#
        good\ndo_something do |unused: 42|\n  foo\nend\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| IgnoreEmptyBlocks\n| `true`\n|
        Boolean\n\n| AllowUnusedKeywordArguments\n| `false`\n| Boolean\n|===\n\n===
        References\n\n* https://rubystyle.guide#underscore-unused-vars\n\n== Lint/UnusedMethodArgument\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Command-line only\n| 0.21\n| 1.61\n|===\n\nChecks
        for unused method arguments.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\ndef
        some_method(used, unused, _unused_but_allowed)\n  puts used\nend\n\n# good\ndef
        some_method(used, _unused, _unused_but_allowed)\n  puts used\nend\n----\n\n====
        AllowUnusedKeywordArguments: false (default)\n\n[source,ruby]\n----\n# bad\ndef
        do_something(used, unused: 42)\n  used\nend\n----\n\n==== AllowUnusedKeywordArguments:
        true\n\n[source,ruby]\n----\n# good\ndef do_something(used, unused: 42)\n
        \ used\nend\n----\n\n==== IgnoreEmptyMethods: true (default)\n\n[source,ruby]\n----\n#
        good\ndef do_something(unused)\nend\n----\n\n==== IgnoreEmptyMethods: false\n\n[source,ruby]\n----\n#
        bad\ndef do_something(unused)\nend\n----\n\n==== IgnoreNotImplementedMethods:
        true (default)\n\n[source,ruby]\n----\n# good\ndef do_something(unused)\n
        \ raise NotImplementedError\nend\n\ndef do_something_else(unused)\n  fail
        \"TODO\"\nend\n----\n\n==== IgnoreNotImplementedMethods: false\n\n[source,ruby]\n----\n#
        bad\ndef do_something(unused)\n  raise NotImplementedError\nend\n\ndef do_something_else(unused)\n
        \ fail \"TODO\"\nend\n----\n\n=== Configurable attributes\n\n|===\n| Name
        | Default value | Configurable values\n\n| AllowUnusedKeywordArguments\n|
        `false`\n| Boolean\n\n| IgnoreEmptyMethods\n| `true`\n| Boolean\n\n| IgnoreNotImplementedMethods\n|
        `true`\n| Boolean\n|===\n\n=== References\n\n* https://rubystyle.guide#underscore-unused-vars\n\n==
        Lint/UriEscapeUnescape\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| Yes\n| No\n| 0.50\n| -\n|===\n\nIdentifies
        places where `URI.escape` can be replaced by\n`CGI.escape`, `URI.encode_www_form`,
        or `URI.encode_www_form_component`\ndepending on your specific use case.\nAlso
        this cop identifies places where `URI.unescape` can be replaced by\n`CGI.unescape`,
        `URI.decode_www_form`,\nor `URI.decode_www_form_component` depending on your
        specific use case.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\nURI.escape('http://example.com')\nURI.encode('http://example.com')\n\n#
        good\nCGI.escape('http://example.com')\nURI.encode_www_form([['example', 'param'],
        ['lang', 'en']])\nURI.encode_www_form(page: 10, locale: 'en')\nURI.encode_www_form_component('http://example.com')\n\n#
        bad\nURI.unescape(enc_uri)\nURI.decode(enc_uri)\n\n# good\nCGI.unescape(enc_uri)\nURI.decode_www_form(enc_uri)\nURI.decode_www_form_component(enc_uri)\n----\n\n==
        Lint/UriRegexp\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Always\n| 0.50\n|
        -\n|===\n\nIdentifies places where `URI.regexp` is obsolete and should\nnot
        be used. Instead, use `URI::DEFAULT_PARSER.make_regexp`.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nURI.regexp('http://example.com')\n\n# good\nURI::DEFAULT_PARSER.make_regexp('http://example.com')\n----\n\n==
        Lint/UselessAccessModifier\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Enabled\n| Yes\n| Command-line
        only\n| 0.20\n| 1.61\n|===\n\nChecks for redundant access modifiers, including
        those with no\ncode, those which are repeated, and leading `public` modifiers
        in a\nclass or module body. Conditionally-defined methods are considered as\nalways
        being defined, and thus access modifiers guarding such methods\nare not redundant.\n\nThis
        cop has `ContextCreatingMethods` option. The default setting value\nis an
        empty array that means no method is specified.\nThis setting is an array of
        methods which, when called, are known to\ncreate its own context in the module's
        current access context.\n\nIt also has `MethodCreatingMethods` option. The
        default setting value\nis an empty array that means no method is specified.\nThis
        setting is an array of methods which, when called, are known to\ncreate other
        methods in the module's current access context.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nclass Foo\n  public # this is redundant (default access is public)\n\n
        \ def method\n  end\nend\n\n# bad\nclass Foo\n  # The following is redundant
        (methods defined on the class'\n  # singleton class are not affected by the
        private modifier)\n  private\n\n  def self.method3\n  end\nend\n\n# bad\nclass
        Foo\n  protected\n\n  define_method(:method2) do\n  end\n\n  protected # this
        is redundant (repeated from previous modifier)\n\n  [1,2,3].each do |i|\n
        \   define_method(\"foo#{i}\") do\n    end\n  end\nend\n\n# bad\nclass Foo\n
        \ private # this is redundant (no following methods are defined)\nend\n\n#
        good\nclass Foo\n  private # this is not redundant (a method is defined)\n\n
        \ def method2\n  end\nend\n\n# good\nclass Foo\n  # The following is not redundant
        (conditionally defined methods are\n  # considered as always defining a method)\n
        \ private\n\n  if condition?\n    def method\n    end\n  end\nend\n\n# good\nclass
        Foo\n  protected # this is not redundant (a method is defined)\n\n  define_method(:method2)
        do\n  end\nend\n----\n\n==== ContextCreatingMethods: concerning\n\n[source,ruby]\n----\n#
        Lint/UselessAccessModifier:\n#   ContextCreatingMethods:\n#     - concerning\n\n#
        good\nrequire 'active_support/concern'\nclass Foo\n  concerning :Bar do\n
        \   def some_public_method\n    end\n\n    private\n\n    def some_private_method\n
        \   end\n  end\n\n  # this is not redundant because `concerning` created its
        own context\n  private\n\n  def some_other_private_method\n  end\nend\n----\n\n====
        MethodCreatingMethods: delegate\n\n[source,ruby]\n----\n# Lint/UselessAccessModifier:\n#
        \  MethodCreatingMethods:\n#     - delegate\n\n# good\nrequire 'active_support/core_ext/module/delegation'\nclass
        Foo\n  # this is not redundant because `delegate` creates methods\n  private\n\n
        \ delegate :method_a, to: :method_b\nend\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| ContextCreatingMethods\n|
        `[]`\n| Array\n\n| MethodCreatingMethods\n| `[]`\n| Array\n|===\n\n== Lint/UselessAssignment\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| Command-line only (Unsafe)\n| 0.11\n| 1.61\n|===\n\nChecks
        for every useless assignment to local variable in every\nscope.\nThe basic
        idea for this cop was from the warning of `ruby -cw`:\n\n[source,console]\n----\nassigned
        but unused variable - foo\n----\n\nCurrently this cop has advanced logic that
        detects unreferenced\nreassignments and properly handles varied cases such
        as branch, loop,\nrescue, ensure, etc.\n\nNOTE: Given the assignment `foo
        = 1, bar = 2`, removing unused variables\ncan lead to a syntax error, so this
        case is not autocorrected.\n\n=== Safety\n\nThis cop's autocorrection is unsafe
        because removing assignment from\noperator assignment can cause NameError
        if this assignment has been used to declare\nlocal variable. For example,
        replacing `a ||= 1` to `a || 1` may cause\n\"undefined local variable or method
        `a' for main:Object (NameError)\".\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\n\ndef some_method\n  some_var = 1\n  do_something\nend\n----\n\n[source,ruby]\n----\n#
        good\n\ndef some_method\n  some_var = 1\n  do_something(some_var)\nend\n----\n\n===
        References\n\n* https://rubystyle.guide#underscore-unused-vars\n\n== Lint/UselessElseWithoutRescue\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| Yes\n| No\n| 0.17\n| 1.31\n|===\n\nChecks for useless
        `else` in `begin..end` without `rescue`.\n\nNOTE: This syntax is no longer
        valid on Ruby 2.6 or higher.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\n\nbegin\n
        \ do_something\nelse\n  do_something_else # This will never be run.\nend\n----\n\n[source,ruby]\n----\n#
        good\n\nbegin\n  do_something\nrescue\n  handle_errors\nelse\n  do_something_else\nend\n----\n\n==
        Lint/UselessMethodDefinition\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | Version Added | Version Changed\n\n| Enabled\n| No\n| Command-line
        only (Unsafe)\n| 0.90\n| 1.61\n|===\n\nChecks for useless method definitions,
        specifically: empty constructors\nand methods just delegating to `super`.\n\n===
        Safety\n\nThis cop is unsafe as it can register false positives for cases
        when an empty\nconstructor just overrides the parent constructor, which is
        bad anyway.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\ndef initialize\n
        \ super\nend\n\ndef method\n  super\nend\n\n# good - with default arguments\ndef
        initialize(x = Object.new)\n  super\nend\n\n# good\ndef initialize\n  super\n
        \ initialize_internals\nend\n\ndef method(*args)\n  super(:extra_arg, *args)\nend\n----\n\n==
        Lint/UselessRescue\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Pending\n| Yes\n| No\n| 1.43\n| -\n|===\n\nChecks
        for useless `rescue`s, which only reraise rescued exceptions.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\ndef foo\n  do_something\nrescue\n  raise\nend\n\n# bad\ndef foo\n  do_something\nrescue
        => e\n  raise # or 'raise e', or 'raise $!', or 'raise $ERROR_INFO'\nend\n\n#
        good\ndef foo\n  do_something\nrescue\n  do_cleanup\n  raise\nend\n\n# bad
        (latest rescue)\ndef foo\n  do_something\nrescue ArgumentError\n  # noop\nrescue\n
        \ raise\nend\n\n# good (not the latest rescue)\ndef foo\n  do_something\nrescue
        ArgumentError\n  raise\nrescue\n  # noop\nend\n----\n\n== Lint/UselessRuby2Keywords\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Pending\n| Yes\n| No\n| 1.23\n| -\n|===\n\nLooks for `ruby2_keywords`
        calls for methods that do not need it.\n\n`ruby2_keywords` should only be
        called on methods that accept an argument splat\n(`\\*args`) but do not explicit
        keyword arguments (`k:` or `k: true`) or\na keyword splat (`**kwargs`).\n\n===
        Examples\n\n[source,ruby]\n----\n# good (splat argument without keyword arguments)\nruby2_keywords
        def foo(*args); end\n\n# bad (no arguments)\nruby2_keywords def foo; end\n\n#
        good\ndef foo; end\n\n# bad (positional argument)\nruby2_keywords def foo(arg);
        end\n\n# good\ndef foo(arg); end\n\n# bad (double splatted argument)\nruby2_keywords
        def foo(**args); end\n\n# good\ndef foo(**args); end\n\n# bad (keyword arguments)\nruby2_keywords
        def foo(i:, j:); end\n\n# good\ndef foo(i:, j:); end\n\n# bad (splat argument
        with keyword arguments)\nruby2_keywords def foo(*args, i:, j:); end\n\n# good\ndef
        foo(*args, i:, j:); end\n\n# bad (splat argument with double splat)\nruby2_keywords
        def foo(*args, **kwargs); end\n\n# good\ndef foo(*args, **kwargs); end\n\n#
        bad (ruby2_keywords given a symbol)\ndef foo; end\nruby2_keywords :foo\n\n#
        good\ndef foo; end\n\n# bad (ruby2_keywords with dynamic method)\ndefine_method(:foo)
        { |arg| }\nruby2_keywords :foo\n\n# good\ndefine_method(:foo) { |arg| }\n----\n\n==
        Lint/UselessSetterCall\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | Version Added | Version Changed\n\n| Enabled\n| No\n| Always (Unsafe)\n|
        0.13\n| 1.2\n|===\n\nChecks for setter call to local variable as the final\nexpression
        of a function definition.\n\n=== Safety\n\nThere are edge cases in which the
        local variable references a\nvalue that is also accessible outside the local
        scope. This is not\ndetected by the cop, and it can yield a false positive.\n\nAs
        well, autocorrection is unsafe because the method's\nreturn value will be
        changed.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\n\ndef something\n
        \ x = Something.new\n  x.attr = 5\nend\n----\n\n[source,ruby]\n----\n# good\n\ndef
        something\n  x = Something.new\n  x.attr = 5\n  x\nend\n----\n\n== Lint/UselessTimes\n\n|===\n|
        Enabled by default | Safe | Supports autocorrection | Version Added | Version
        Changed\n\n| Enabled\n| No\n| Command-line only (Unsafe)\n| 0.91\n| 1.61\n|===\n\nChecks
        for uses of `Integer#times` that will never yield\n(when the integer ``<=
        0``) or that will only ever yield once\n(`1.times`).\n\n=== Safety\n\nThis
        cop is unsafe as `times` returns its receiver, which is\n*usually* OK, but
        might change behavior.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\n-5.times
        { do_something }\n0.times { do_something }\n1.times { do_something  }\n1.times
        { |i| do_something(i) }\n\n# good\ndo_something\ndo_something(1)\n----\n\n==
        Lint/Void\n\n|===\n| Enabled by default | Safe | Supports autocorrection |
        Version Added | Version Changed\n\n| Enabled\n| Yes\n| Command-line only\n|
        0.9\n| 1.61\n|===\n\nChecks for operators, variables, literals, lambda, proc
        and nonmutating\nmethods used in void context.\n\n`each` blocks are allowed
        to prevent false positives.\nFor example, the expression inside the `each`
        block below.\nIt's not void, especially when the receiver is an `Enumerator`:\n\n[source,ruby]\n----\nenumerator
        = [1, 2, 3].filter\nenumerator.each { |item| item >= 2 } #=> [2, 3]\n----\n\n===
        Examples\n\n==== CheckForMethodsWithNoSideEffects: false (default)\n\n[source,ruby]\n----\n#
        bad\ndef some_method\n  some_num * 10\n  do_something\nend\n\ndef some_method(some_var)\n
        \ some_var\n  do_something\nend\n----\n\n==== CheckForMethodsWithNoSideEffects:
        true\n\n[source,ruby]\n----\n# bad\ndef some_method(some_array)\n  some_array.sort\n
        \ do_something(some_array)\nend\n\n# good\ndef some_method\n  do_something\n
        \ some_num * 10\nend\n\ndef some_method(some_var)\n  do_something\n  some_var\nend\n\ndef
        some_method(some_array)\n  some_array.sort!\n  do_something(some_array)\nend\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        CheckForMethodsWithNoSideEffects\n| `false`\n| Boolean\n|===\n"
  recorded_at: Mon, 27 May 2024 05:30:39 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop/v1.64.0/docs/modules/ROOT/pages/cops_metrics.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '13548'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"da5d2cd7bddab2f45337636e4a148e7233b630d8247b24b15313a68499fae3eb"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 3E70:4FFFC:131E2A7:144F003:66540534
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 27 May 2024 05:30:39 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-fra-eddf8230035-FRA
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1716787839.453521,VS0,VE172
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - c9e55ae5da0ae2bcfb93fba8ea85884b961e2882
      Expires:
      - Mon, 27 May 2024 05:35:39 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        ////
          Do NOT edit this file by hand directly, as it is automatically generated.

          Please make any necessary changes to the cop documentation within the source files themselves.
        ////

        = Metrics

        == Metrics/AbcSize

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | No
        | 0.27
        | 1.5
        |===

        Checks that the ABC size of methods is not higher than the
        configured maximum. The ABC size is based on assignments, branches
        (method calls), and conditions. See http://c2.com/cgi/wiki?AbcMetric
        and https://en.wikipedia.org/wiki/ABC_Software_Metric.

        Interpreting ABC size:

        * ``<= 17`` satisfactory
        * `18..30` unsatisfactory
        * `>` 30 dangerous

        You can have repeated "attributes" calls count as a single "branch".
        For this purpose, attributes are any method with no argument; no attempt
        is meant to distinguish actual `attr_reader` from other methods.

        This cop also takes into account `AllowedMethods` (defaults to `[]`)
        And `AllowedPatterns` (defaults to `[]`)

        === Examples

        ==== CountRepeatedAttributes: false (default is true)

        [source,ruby]
        ----
        # `model` and `current_user`, referenced 3 times each,
        # are each counted as only 1 branch each if
        # `CountRepeatedAttributes` is set to 'false'

        def search
          @posts = model.active.visible_by(current_user)
                    .search(params[:q])
          @posts = model.some_process(@posts, current_user)
          @posts = model.another_process(@posts, current_user)

          render 'pages/search/page'
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | AllowedMethods
        | `[]`
        | Array

        | AllowedPatterns
        | `[]`
        | Array

        | CountRepeatedAttributes
        | `true`
        | Boolean

        | Max
        | `17`
        | Integer
        |===

        === References

        * http://c2.com/cgi/wiki?AbcMetric
        * https://en.wikipedia.org/wiki/ABC_Software_Metric

        == Metrics/BlockLength

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | No
        | 0.44
        | 1.5
        |===

        Checks if the length of a block exceeds some maximum value.
        Comment lines can optionally be ignored.
        The maximum allowed length is configurable.
        The cop can be configured to ignore blocks passed to certain methods.

        You can set constructs you want to fold with `CountAsOne`.
        Available are: 'array', 'hash', 'heredoc', and 'method_call'. Each construct
        will be counted as one line regardless of its actual size.

        NOTE: This cop does not apply for `Struct` definitions.

        NOTE: The `ExcludedMethods` configuration is deprecated and only kept
        for backwards compatibility. Please use `AllowedMethods` and `AllowedPatterns`
        instead. By default, there are no methods to allowed.

        === Examples

        ==== CountAsOne: ['array', 'heredoc', 'method_call']

        [source,ruby]
        ----
        something do
          array = [         # +1
            1,
            2
          ]

          hash = {          # +3
            key: 'value'
          }

          msg = <<~HEREDOC  # +1
            Heredoc
            content.
          HEREDOC

          foo(              # +1
            1,
            2
          )
        end                 # 6 points
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | CountComments
        | `false`
        | Boolean

        | Max
        | `25`
        | Integer

        | CountAsOne
        | `[]`
        | Array

        | AllowedMethods
        | `refine`
        | Array

        | AllowedPatterns
        | `[]`
        | Array

        | Exclude
        | `+**/*.gemspec+`
        | Array
        |===

        == Metrics/BlockNesting

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | No
        | 0.25
        | 0.47
        |===

        Checks for excessive nesting of conditional and looping
        constructs.

        You can configure if blocks are considered using the `CountBlocks`
        option. When set to `false` (the default) blocks are not counted
        towards the nesting level. Set to `true` to count blocks as well.

        The maximum level of nesting allowed is configurable.

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | CountBlocks
        | `false`
        | Boolean

        | Max
        | `3`
        | Integer
        |===

        === References

        * https://rubystyle.guide#three-is-the-number-thou-shalt-count

        == Metrics/ClassLength

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | No
        | 0.25
        | 0.87
        |===

        Checks if the length of a class exceeds some maximum value.
        Comment lines can optionally be ignored.
        The maximum allowed length is configurable.

        You can set constructs you want to fold with `CountAsOne`.
        Available are: 'array', 'hash', 'heredoc', and 'method_call'. Each construct
        will be counted as one line regardless of its actual size.

        NOTE: This cop also applies for `Struct` definitions.

        === Examples

        ==== CountAsOne: ['array', 'heredoc', 'method_call']

        [source,ruby]
        ----
        class Foo
          ARRAY = [         # +1
            1,
            2
          ]

          HASH = {          # +3
            key: 'value'
          }

          MSG = <<~HEREDOC  # +1
            Heredoc
            content.
          HEREDOC

          foo(              # +1
            1,
            2
          )
        end                 # 6 points
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | CountComments
        | `false`
        | Boolean

        | Max
        | `100`
        | Integer

        | CountAsOne
        | `[]`
        | Array
        |===

        == Metrics/CollectionLiteralLength

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | No
        | 1.47
        | -
        |===

        Checks for literals with extremely many entries. This is indicative of
        configuration or data that may be better extracted somewhere else, like
        a database, fetched from an API, or read from a non-code file (CSV,
        JSON, YAML, etc.).

        === Examples

        [source,ruby]
        ----
        # bad
        # Huge Array literal
        [1, 2, '...', 999_999_999]

        # bad
        # Huge Hash literal
        { 1 => 1, 2 => 2, '...' => '...', 999_999_999 => 999_999_999}

        # bad
        # Huge Set "literal"
        Set[1, 2, '...', 999_999_999]

        # good
        # Reasonably sized Array literal
        [1, 2, '...', 10]

        # good
        # Reading huge Array from external data source
        # File.readlines('numbers.txt', chomp: true).map!(&:to_i)

        # good
        # Reasonably sized Hash literal
        { 1 => 1, 2 => 2, '...' => '...', 10 => 10}

        # good
        # Reading huge Hash from external data source
        CSV.foreach('numbers.csv', headers: true).each_with_object({}) do |row, hash|
          hash[row["key"].to_i] = row["value"].to_i
        end

        # good
        # Reasonably sized Set "literal"
        Set[1, 2, '...', 10]

        # good
        # Reading huge Set from external data source
        SomeFramework.config_for(:something)[:numbers].to_set
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | LengthThreshold
        | `250`
        | Integer
        |===

        == Metrics/CyclomaticComplexity

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | No
        | 0.25
        | 0.81
        |===

        Checks that the cyclomatic complexity of methods is not higher
        than the configured maximum. The cyclomatic complexity is the number of
        linearly independent paths through a method. The algorithm counts
        decision points and adds one.

        An if statement (or unless or ?:) increases the complexity by one. An
        else branch does not, since it doesn't add a decision point. The &&
        operator (or keyword and) can be converted to a nested if statement,
        and ||/or is shorthand for a sequence of ifs, so they also add one.
        Loops can be said to have an exit condition, so they add one.
        Blocks that are calls to builtin iteration methods
        (e.g. `ary.map{...}) also add one, others are ignored.

          def each_child_node(*types)               # count begins: 1
            unless block_given?                     # unless: +1
              return to_enum(__method__, *types)

            children.each do |child|                # each{}: +1
              next unless child.is_a?(Node)         # unless: +1

              yield child if types.empty? ||        # if: +1, ||: +1
                             types.include?(child.type)
            end

            self
          end                                       # total: 6

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | AllowedMethods
        | `[]`
        | Array

        | AllowedPatterns
        | `[]`
        | Array

        | Max
        | `7`
        | Integer
        |===

        == Metrics/MethodLength

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | No
        | 0.25
        | 1.5
        |===

        Checks if the length of a method exceeds some maximum value.
        Comment lines can optionally be allowed.
        The maximum allowed length is configurable.

        You can set constructs you want to fold with `CountAsOne`.
        Available are: 'array', 'hash', 'heredoc', and 'method_call'. Each construct
        will be counted as one line regardless of its actual size.

        NOTE: The `ExcludedMethods` and `IgnoredMethods` configuration is
        deprecated and only kept for backwards compatibility.
        Please use `AllowedMethods` and `AllowedPatterns` instead.
        By default, there are no methods to allowed.

        === Examples

        ==== CountAsOne: ['array', 'heredoc', 'method_call']

        [source,ruby]
        ----
        def m
          array = [       # +1
            1,
            2
          ]

          hash = {        # +3
            key: 'value'
          }

          <<~HEREDOC      # +1
            Heredoc
            content.
          HEREDOC

          foo(            # +1
            1,
            2
          )
        end               # 6 points
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | CountComments
        | `false`
        | Boolean

        | Max
        | `10`
        | Integer

        | CountAsOne
        | `[]`
        | Array

        | AllowedMethods
        | `[]`
        | Array

        | AllowedPatterns
        | `[]`
        | Array
        |===

        === References

        * https://rubystyle.guide#short-methods

        == Metrics/ModuleLength

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | No
        | 0.31
        | 0.87
        |===

        Checks if the length of a module exceeds some maximum value.
        Comment lines can optionally be ignored.
        The maximum allowed length is configurable.

        You can set constructs you want to fold with `CountAsOne`.
        Available are: 'array', 'hash', 'heredoc', and 'method_call'. Each construct
        will be counted as one line regardless of its actual size.

        === Examples

        ==== CountAsOne: ['array', 'heredoc', 'method_call']

        [source,ruby]
        ----
        module M
          ARRAY = [         # +1
            1,
            2
          ]

          HASH = {          # +3
            key: 'value'
          }

          MSG = <<~HEREDOC  # +1
            Heredoc
            content.
          HEREDOC

          foo(              # +1
            1,
            2
          )
        end                 # 6 points
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | CountComments
        | `false`
        | Boolean

        | Max
        | `100`
        | Integer

        | CountAsOne
        | `[]`
        | Array
        |===

        == Metrics/ParameterLists

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | No
        | 0.25
        | 1.5
        |===

        Checks for methods with too many parameters.

        The maximum number of parameters is configurable.
        Keyword arguments can optionally be excluded from the total count,
        as they add less complexity than positional or optional parameters.

        Any number of arguments for `initialize` method inside a block of
        `Struct.new` and `Data.define` like this is always allowed:

        [source,ruby]
        ----
        Struct.new(:one, :two, :three, :four, :five, keyword_init: true) do
          def initialize(one:, two:, three:, four:, five:)
          end
        end
        ----

        This is because checking the number of arguments of the `initialize` method
        does not make sense.

        NOTE: Explicit block argument `&block` is not counted to prevent
        erroneous change that is avoided by making block argument implicit.

        This cop also checks for the maximum number of optional parameters.
        This can be configured using the `MaxOptionalParameters` config option.

        === Examples

        ==== Max: 3

        [source,ruby]
        ----
        # good
        def foo(a, b, c = 1)
        end
        ----

        ==== Max: 2

        [source,ruby]
        ----
        # bad
        def foo(a, b, c = 1)
        end
        ----

        ==== CountKeywordArgs: true (default)

        [source,ruby]
        ----
        # counts keyword args towards the maximum

        # bad (assuming Max is 3)
        def foo(a, b, c, d: 1)
        end

        # good (assuming Max is 3)
        def foo(a, b, c: 1)
        end
        ----

        ==== CountKeywordArgs: false

        [source,ruby]
        ----
        # don't count keyword args towards the maximum

        # good (assuming Max is 3)
        def foo(a, b, c, d: 1)
        end
        ----

        ==== MaxOptionalParameters: 3 (default)

        [source,ruby]
        ----
        # good
        def foo(a = 1, b = 2, c = 3)
        end
        ----

        ==== MaxOptionalParameters: 2

        [source,ruby]
        ----
        # bad
        def foo(a = 1, b = 2, c = 3)
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Max
        | `5`
        | Integer

        | CountKeywordArgs
        | `true`
        | Boolean

        | MaxOptionalParameters
        | `3`
        | Integer
        |===

        === References

        * https://rubystyle.guide#too-many-params

        == Metrics/PerceivedComplexity

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | No
        | 0.25
        | 0.81
        |===

        Tries to produce a complexity score that's a measure of the
        complexity the reader experiences when looking at a method. For that
        reason it considers `when` nodes as something that doesn't add as much
        complexity as an `if` or a `&&`. Except if it's one of those special
        `case`/`when` constructs where there's no expression after `case`. Then
        the cop treats it as an `if`/`elsif`/`elsif`... and lets all the `when`
        nodes count. In contrast to the CyclomaticComplexity cop, this cop
        considers `else` nodes as adding complexity.

        === Examples

        [source,ruby]
        ----
        def my_method                   # 1
          if cond                       # 1
            case var                    # 2 (0.8 + 4 * 0.2, rounded)
            when 1 then func_one
            when 2 then func_two
            when 3 then func_three
            when 4..10 then func_other
            end
          else                          # 1
            do_something until a && b   # 2
          end                           # ===
        end                             # 7 complexity points
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | AllowedMethods
        | `[]`
        | Array

        | AllowedPatterns
        | `[]`
        | Array

        | Max
        | `8`
        | Integer
        |===
  recorded_at: Mon, 27 May 2024 05:30:39 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop/v1.64.0/docs/modules/ROOT/pages/cops_migration.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '444'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"52f3a7b307b99209c859b7f738228c06d9d10349cff19b62e8f4b2fcc3f925c2"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - A420:7A930:E25BA2:F08CF3:66541A7F
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 27 May 2024 05:30:39 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-fra-eddf8230156-FRA
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1716787840.801368,VS0,VE175
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - 43c61d8667af1729dcffea095d98ccb33f7485f2
      Expires:
      - Mon, 27 May 2024 05:35:39 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        ////
          Do NOT edit this file by hand directly, as it is automatically generated.

          Please make any necessary changes to the cop documentation within the source files themselves.
        ////

        = Migration

        == Migration/DepartmentName

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always
        | 0.75
        | -
        |===

        Check that cop names in rubocop:disable comments are given with
        department name.
  recorded_at: Mon, 27 May 2024 05:30:40 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop/v1.64.0/docs/modules/ROOT/pages/cops_naming.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '25454'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"0db9525ea2c00c57e2455cb53a10d39e4bd3b4581d00e2751285708d9879e226"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - A3D0:12D701:138EDA7:14C7E59:66541A7F
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 27 May 2024 05:30:40 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-fra-eddf8230091-FRA
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1716787840.093654,VS0,VE178
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - 782d815a3434cba0eacf79fff1a99f2121f9543d
      Expires:
      - Mon, 27 May 2024 05:35:40 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 27 May 2024 05:30:40 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop/v1.64.0/docs/modules/ROOT/pages/cops_security.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '5862'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"1d479cde9ff1cd82db7c45f66de25d54f2e9990eb86386d95c5092a3bece82d6"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 8914:3BC15A:1331F36:146AEF8:66541A80
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 27 May 2024 05:30:40 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-fra-eddf8230146-FRA
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1716787840.426651,VS0,VE191
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - 1d58771d288e9b159f167f175745fdf13d29392d
      Expires:
      - Mon, 27 May 2024 05:35:40 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        ////
          Do NOT edit this file by hand directly, as it is automatically generated.

          Please make any necessary changes to the cop documentation within the source files themselves.
        ////

        = Security

        == Security/CompoundHash

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | No
        | No
        | 1.28
        | 1.51
        |===

        Checks for implementations of the `hash` method which combine
        values using custom logic instead of delegating to `Array#hash`.

        Manually combining hashes is error prone and hard to follow, especially
        when there are many values. Poor implementations may also introduce
        performance or security concerns if they are prone to collisions.
        Delegating to `Array#hash` is clearer and safer, although it might be slower
        depending on the use case.

        === Safety

        This cop may be unsafe if the application logic depends on the hash
        value, however this is inadvisable anyway.

        === Examples

        [source,ruby]
        ----
        # bad
        def hash
          @foo ^ @bar
        end

        # good
        def hash
          [@foo, @bar].hash
        end
        ----

        == Security/Eval

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | No
        | 0.47
        | -
        |===

        Checks for the use of `Kernel#eval` and `Binding#eval`.

        === Examples

        [source,ruby]
        ----
        # bad

        eval(something)
        binding.eval(something)
        ----

        == Security/IoMethods

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | No
        | Always (Unsafe)
        | 1.22
        | -
        |===

        Checks for the first argument to `IO.read`, `IO.binread`, `IO.write`, `IO.binwrite`,
        `IO.foreach`, and `IO.readlines`.

        If argument starts with a pipe character (`'|'`) and the receiver is the `IO` class,
        a subprocess is created in the same way as `Kernel#open`, and its output is returned.
        `Kernel#open` may allow unintentional command injection, which is the reason these
        `IO` methods are a security risk.
        Consider to use `File.read` to disable the behavior of subprocess invocation.

        === Safety

        This cop is unsafe because false positive will occur if the variable passed as
        the first argument is a command that is not a file path.

        === Examples

        [source,ruby]
        ----
        # bad
        IO.read(path)
        IO.read('path')

        # good
        File.read(path)
        File.read('path')
        IO.read('| command') # Allow intentional command invocation.
        ----

        == Security/JSONLoad

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always (Unsafe)
        | 0.43
        | 1.22
        |===

        Checks for the use of JSON class methods which have potential
        security issues.

        === Safety

        This cop's autocorrection is unsafe because it's potentially dangerous.
        If using a stream, like `JSON.load(open('file'))`, it will need to call
        `#read` manually, like `JSON.parse(open('file').read)`.
        If reading single values (rather than proper JSON objects), like
        `JSON.load('false')`, it will need to pass the `quirks_mode: true`
        option, like `JSON.parse('false', quirks_mode: true)`.
        Other similar issues may apply.

        === Examples

        [source,ruby]
        ----
        # bad
        JSON.load("{}")
        JSON.restore("{}")

        # good
        JSON.parse("{}")
        ----

        === References

        * https://ruby-doc.org/stdlib-2.7.0/libdoc/json/rdoc/JSON.html#method-i-load

        == Security/MarshalLoad

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | No
        | 0.47
        | -
        |===

        Checks for the use of Marshal class methods which have
        potential security issues leading to remote code execution when
        loading from an untrusted source.

        === Examples

        [source,ruby]
        ----
        # bad
        Marshal.load("{}")
        Marshal.restore("{}")

        # good
        Marshal.dump("{}")

        # okish - deep copy hack
        Marshal.load(Marshal.dump({}))
        ----

        === References

        * https://ruby-doc.org/core-2.7.0/Marshal.html#module-Marshal-label-Security+considerations

        == Security/Open

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | No
        | No
        | 0.53
        | 1.0
        |===

        Checks for the use of `Kernel#open` and `URI.open` with dynamic
        data.

        `Kernel#open` and `URI.open` enable not only file access but also process
        invocation by prefixing a pipe symbol (e.g., `open("| ls")`).
        So, it may lead to a serious security risk by using variable input to
        the argument of `Kernel#open` and `URI.open`. It would be better to use
        `File.open`, `IO.popen` or `URI.parse#open` explicitly.

        NOTE: `open` and `URI.open` with literal strings are not flagged by this
        cop.

        === Safety

        This cop could register false positives if `open` is redefined
        in a class and then used without a receiver in that class.

        === Examples

        [source,ruby]
        ----
        # bad
        open(something)
        open("| #{something}")
        open("| foo")
        URI.open(something)

        # good
        File.open(something)
        IO.popen(something)
        URI.parse(something).open

        # good (literal strings)
        open("foo.text")
        URI.open("http://example.com")
        ----

        == Security/YAMLLoad

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always (Unsafe)
        | 0.47
        | -
        |===

        Checks for the use of YAML class methods which have
        potential security issues leading to remote code execution when
        loading from an untrusted source.

        NOTE: Ruby 3.1+ (Psych 4) uses `Psych.load` as `Psych.safe_load` by default.

        === Safety

        The behavior of the code might change depending on what was
        in the YAML payload, since `YAML.safe_load` is more restrictive.

        === Examples

        [source,ruby]
        ----
        # bad
        YAML.load("--- !ruby/object:Foo {}") # Psych 3 is unsafe by default

        # good
        YAML.safe_load("--- !ruby/object:Foo {}", [Foo])                    # Ruby 2.5  (Psych 3)
        YAML.safe_load("--- !ruby/object:Foo {}", permitted_classes: [Foo]) # Ruby 3.0- (Psych 3)
        YAML.load("--- !ruby/object:Foo {}", permitted_classes: [Foo])      # Ruby 3.1+ (Psych 4)
        YAML.dump(foo)
        ----

        === References

        * https://ruby-doc.org/stdlib-2.7.0/libdoc/yaml/rdoc/YAML.html#module-YAML-label-Security
  recorded_at: Mon, 27 May 2024 05:30:40 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop/v1.64.0/docs/modules/ROOT/pages/cops_style.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '263511'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"c2178fd41fc2bf0c45849c11b0779e62a796b17bf24b0a88824453d195c04cc8"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 91BA:3EB50A:FD0093:10C4426:66541A7F
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 27 May 2024 05:30:41 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-fra-eddf8230114-FRA
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1716787841.814346,VS0,VE207
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - 159af3c927f37095fff9d09fcd35b90bec6b024a
      Expires:
      - Mon, 27 May 2024 05:35:41 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 27 May 2024 05:30:41 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop/v1.64.0/config/default.yml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '168537'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"e185e054ab1250e567bc7d701057414fdaffe462c298a3b1faf18ff14cbea6c3"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - CF5C:3F1A91:13E2F4D:151ACE1:66541A80
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 27 May 2024 05:30:41 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-fra-eddf8230112-FRA
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1716787841.414027,VS0,VE215
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - ec70e99c916954e024e58bb25da417c992d095ef
      Expires:
      - Mon, 27 May 2024 05:35:41 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 27 May 2024 05:30:41 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-minitest/v0.35.0/docs/modules/ROOT/pages/cops.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '4688'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"b134cca5e6426fbfc4801f80d04852b720b5d563bf622c8d287a4390ed2ca619"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - C7B6:23E66:1397602:14D0702:66541A71
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 27 May 2024 05:30:41 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-fra-eddf8230111-FRA
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1716787842.796924,VS0,VE173
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - d0451d36186f81a5c07ec7b7a69b64e34d28d4f1
      Expires:
      - Mon, 27 May 2024 05:35:41 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        = Cops

        In RuboCop lingo the various checks performed on the code are called cops.
        Each cop is responsible for detecting one particular offense.
        RuboCop Minitest has only one Minitest department.

        == Minitest

        Minitest cops check for Minitest best practices and coding conventions. Many of the them are
        based on the https://minitest.rubystyle.guide/[Minitest Style Guide].

        // START_COP_LIST

        === Department xref:cops_minitest.adoc[Minitest]

        * xref:cops_minitest.adoc#minitestassertempty[Minitest/AssertEmpty]
        * xref:cops_minitest.adoc#minitestassertemptyliteral[Minitest/AssertEmptyLiteral]
        * xref:cops_minitest.adoc#minitestassertequal[Minitest/AssertEqual]
        * xref:cops_minitest.adoc#minitestassertindelta[Minitest/AssertInDelta]
        * xref:cops_minitest.adoc#minitestassertincludes[Minitest/AssertIncludes]
        * xref:cops_minitest.adoc#minitestassertinstanceof[Minitest/AssertInstanceOf]
        * xref:cops_minitest.adoc#minitestassertkindof[Minitest/AssertKindOf]
        * xref:cops_minitest.adoc#minitestassertmatch[Minitest/AssertMatch]
        * xref:cops_minitest.adoc#minitestassertnil[Minitest/AssertNil]
        * xref:cops_minitest.adoc#minitestassertoperator[Minitest/AssertOperator]
        * xref:cops_minitest.adoc#minitestassertoutput[Minitest/AssertOutput]
        * xref:cops_minitest.adoc#minitestassertpathexists[Minitest/AssertPathExists]
        * xref:cops_minitest.adoc#minitestassertpredicate[Minitest/AssertPredicate]
        * xref:cops_minitest.adoc#minitestassertraisescompoundbody[Minitest/AssertRaisesCompoundBody]
        * xref:cops_minitest.adoc#minitestassertraiseswithregexpargument[Minitest/AssertRaisesWithRegexpArgument]
        * xref:cops_minitest.adoc#minitestassertrespondto[Minitest/AssertRespondTo]
        * xref:cops_minitest.adoc#minitestassertsame[Minitest/AssertSame]
        * xref:cops_minitest.adoc#minitestassertsilent[Minitest/AssertSilent]
        * xref:cops_minitest.adoc#minitestasserttruthy[Minitest/AssertTruthy]
        * xref:cops_minitest.adoc#minitestassertwithexpectedargument[Minitest/AssertWithExpectedArgument]
        * xref:cops_minitest.adoc#minitestassertioninlifecyclehook[Minitest/AssertionInLifecycleHook]
        * xref:cops_minitest.adoc#minitestduplicatetestrun[Minitest/DuplicateTestRun]
        * xref:cops_minitest.adoc#minitestemptylinebeforeassertionmethods[Minitest/EmptyLineBeforeAssertionMethods]
        * xref:cops_minitest.adoc#minitestfocus[Minitest/Focus]
        * xref:cops_minitest.adoc#minitestglobalexpectations[Minitest/GlobalExpectations]
        * xref:cops_minitest.adoc#minitestlifecyclehooksorder[Minitest/LifecycleHooksOrder]
        * xref:cops_minitest.adoc#minitestliteralasactualargument[Minitest/LiteralAsActualArgument]
        * xref:cops_minitest.adoc#minitestmultipleassertions[Minitest/MultipleAssertions]
        * xref:cops_minitest.adoc#minitestnoassertions[Minitest/NoAssertions]
        * xref:cops_minitest.adoc#minitestnotestcases[Minitest/NoTestCases]
        * xref:cops_minitest.adoc#minitestnonexecutabletestmethod[Minitest/NonExecutableTestMethod]
        * xref:cops_minitest.adoc#minitestnonpublictestmethod[Minitest/NonPublicTestMethod]
        * xref:cops_minitest.adoc#minitestredundantmessageargument[Minitest/RedundantMessageArgument]
        * xref:cops_minitest.adoc#minitestrefuteempty[Minitest/RefuteEmpty]
        * xref:cops_minitest.adoc#minitestrefuteequal[Minitest/RefuteEqual]
        * xref:cops_minitest.adoc#minitestrefutefalse[Minitest/RefuteFalse]
        * xref:cops_minitest.adoc#minitestrefuteindelta[Minitest/RefuteInDelta]
        * xref:cops_minitest.adoc#minitestrefuteincludes[Minitest/RefuteIncludes]
        * xref:cops_minitest.adoc#minitestrefuteinstanceof[Minitest/RefuteInstanceOf]
        * xref:cops_minitest.adoc#minitestrefutekindof[Minitest/RefuteKindOf]
        * xref:cops_minitest.adoc#minitestrefutematch[Minitest/RefuteMatch]
        * xref:cops_minitest.adoc#minitestrefutenil[Minitest/RefuteNil]
        * xref:cops_minitest.adoc#minitestrefuteoperator[Minitest/RefuteOperator]
        * xref:cops_minitest.adoc#minitestrefutepathexists[Minitest/RefutePathExists]
        * xref:cops_minitest.adoc#minitestrefutepredicate[Minitest/RefutePredicate]
        * xref:cops_minitest.adoc#minitestrefuterespondto[Minitest/RefuteRespondTo]
        * xref:cops_minitest.adoc#minitestrefutesame[Minitest/RefuteSame]
        * xref:cops_minitest.adoc#minitestreturnintestmethod[Minitest/ReturnInTestMethod]
        * xref:cops_minitest.adoc#minitestskipensure[Minitest/SkipEnsure]
        * xref:cops_minitest.adoc#minitestskipwithoutreason[Minitest/SkipWithoutReason]
        * xref:cops_minitest.adoc#minitesttestfilename[Minitest/TestFileName]
        * xref:cops_minitest.adoc#minitesttestmethodname[Minitest/TestMethodName]
        * xref:cops_minitest.adoc#minitestunreachableassertion[Minitest/UnreachableAssertion]
        * xref:cops_minitest.adoc#minitestunspecifiedexception[Minitest/UnspecifiedException]
        * xref:cops_minitest.adoc#minitestuselessassertion[Minitest/UselessAssertion]

        // END_COP_LIST
  recorded_at: Mon, 27 May 2024 05:30:42 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-minitest/v0.35.0/docs/modules/ROOT/pages/cops_minitest.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '35151'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"b54dc1d953a81501869bc89fb38cb428e416c684c0812456e6f31568a40e6fb0"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 2FD0:6D2AE:1313ABF:144BECE:66541A80
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 27 May 2024 05:30:42 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-fra-eddf8230109-FRA
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1716787842.059262,VS0,VE184
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - 4dc925d8524d310312045639974ebcd28a4ba03f
      Expires:
      - Mon, 27 May 2024 05:35:42 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        ////
          Do NOT edit this file by hand directly, as it is automatically generated.

          Please make any necessary changes to the cop documentation within the source files themselves.
        ////

        = Minitest

        == Minitest/AssertEmpty

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always
        | 0.2
        | -
        |===

        Enforces the test to use `assert_empty` instead of using `assert(object.empty?)`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert(object.empty?)
        assert(object.empty?, 'message')

        # good
        assert_empty(object)
        assert_empty(object, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide#assert-empty

        == Minitest/AssertEmptyLiteral

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always
        | 0.5
        | 0.11
        |===

        Enforces the test to use `assert_empty`
        instead of using `assert_equal([], object)` or `assert_equal({}, object)`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert_equal([], object)
        assert_equal({}, object)

        # good
        assert_empty(object)
        ----

        == Minitest/AssertEqual

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always
        | 0.4
        | -
        |===

        Enforces the use of `assert_equal(expected, actual)`
        over `assert(expected == actual)`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert("rubocop-minitest" == actual)
        assert_operator("rubocop-minitest", :==, actual)

        # good
        assert_equal("rubocop-minitest", actual)
        ----

        === References

        * https://minitest.rubystyle.guide#assert-equal-arguments-order

        == Minitest/AssertInDelta

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always
        | 0.10
        | -
        |===

        Enforces the test to use `assert_in_delta`
        instead of using `assert_equal` to compare floats.

        === Examples

        [source,ruby]
        ----
        # bad
        assert_equal(0.2, actual)
        assert_equal(0.2, actual, 'message')

        # good
        assert_in_delta(0.2, actual)
        assert_in_delta(0.2, actual, 0.001, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide/#assert-in-delta

        == Minitest/AssertIncludes

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always
        | 0.2
        | -
        |===

        Enforces the test to use `assert_includes`
        instead of using `assert(collection.include?(object))`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert(collection.include?(object))
        assert(collection.include?(object), 'message')

        # good
        assert_includes(collection, object)
        assert_includes(collection, object, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide#assert-includes

        == Minitest/AssertInstanceOf

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always
        | 0.4
        | -
        |===

        Enforces the test to use `assert_instance_of(Class, object)`
        over `assert(object.instance_of?(Class))`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert(object.instance_of?(Class))
        assert(object.instance_of?(Class), 'message')

        # bad
        assert_equal(Class, object.class)
        assert_equal(Class, object.class, 'message')

        # good
        assert_instance_of(Class, object)
        assert_instance_of(Class, object, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide#assert-instance-of

        == Minitest/AssertKindOf

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always
        | 0.10
        | 0.34
        |===

        Enforces the test to use `assert_kind_of(Class, object)`
        over `assert(object.kind_of?(Class))`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert(object.kind_of?(Class))
        assert(object.kind_of?(Class), 'message')

        # bad
        # `is_a?` is an alias for `kind_of?`
        assert(object.is_a?(Class))
        assert(object.is_a?(Class), 'message')

        # good
        assert_kind_of(Class, object)
        assert_kind_of(Class, object, 'message')
        ----

        === References

        * https://github.com/rubocop/minitest-style-guide#assert-kind-of

        == Minitest/AssertMatch

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always
        | 0.6
        | -
        |===

        Enforces the test to use `assert_match`
        instead of using `assert(matcher.match(string))`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert(matcher.match(string))
        assert(matcher.match?(string))
        assert(matcher =~ string)
        assert_operator(matcher, :=~, string)
        assert(matcher.match(string), 'message')

        # good
        assert_match(regex, string)
        assert_match(matcher, string, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide#assert-match

        == Minitest/AssertNil

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always
        | 0.1
        | -
        |===

        Enforces the test to use `assert_nil` instead of using
        `assert_equal(nil, something)`, `assert(something.nil?)`, or `assert_predicate(something, :nil?)`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert_equal(nil, actual)
        assert_equal(nil, actual, 'message')
        assert(object.nil?)
        assert(object.nil?, 'message')
        assert_predicate(object, :nil?)
        assert_predicate(object, :nil?, 'message')

        # good
        assert_nil(actual)
        assert_nil(actual, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide#assert-nil

        == Minitest/AssertOperator

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always
        | 0.32
        | -
        |===

        Enforces the use of `assert_operator(expected, :<, actual)` over `assert(expected < actual)`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert(expected < actual)

        # good
        assert_operator(expected, :<, actual)
        ----

        === References

        * https://minitest.rubystyle.guide#assert-operator

        == Minitest/AssertOutput

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | No
        | 0.10
        | -
        |===

        Checks for opportunities to use `assert_output`.

        === Examples

        [source,ruby]
        ----
        # bad
        $stdout = StringIO.new
        puts object.method
        $stdout.rewind
        assert_match expected, $stdout.read

        # good
        assert_output(expected) { puts object.method }
        ----

        === References

        * https://minitest.rubystyle.guide/#assert-output

        == Minitest/AssertPathExists

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always
        | 0.10
        | -
        |===

        Enforces the test to use `assert_path_exists` instead of using `assert(File.exist?(path))`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert(File.exist?(path))
        assert(File.exist?(path), 'message')

        # good
        assert_path_exists(path)
        assert_path_exists(path, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide/#assert-path-exists

        == Minitest/AssertPredicate

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always
        | 0.18
        | -
        |===

        Enforces the test to use `assert_predicate`
        instead of using `assert(obj.a_predicate_method?)`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert(obj.one?)
        assert(obj.one?, 'message')

        # good
        assert_predicate(obj, :one?)
        assert_predicate(obj, :one?, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide/#assert-predicate

        == Minitest/AssertRaisesCompoundBody

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | No
        | 0.21
        | -
        |===

        Enforces the block body of `assert_raises { ... }` to be reduced to only the raising code.

        === Examples

        [source,ruby]
        ----
        # bad
        assert_raises(MyError) do
          foo
          bar
        end

        # good
        assert_raises(MyError) do
          foo
        end

        # good
        assert_raises(MyError) do
          foo do
            bar
            baz
          end
        end
        ----

        == Minitest/AssertRaisesWithRegexpArgument

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | No
        | 0.22
        | 0.26
        |===

        Checks for `assert_raises` with arguments of regular expression literals.
        Arguments should be exception classes.
        Optionally the last argument can be a custom message string to help explain failures.
        Either way, it's not the argument that `exception.message` is compared to.
        The raised exception is returned and can be used
        to match against a regular expression.

        === Examples

        [source,ruby]
        ----
        # bad
        assert_raises FooError, /some message/ do
          obj.occur_error
        end

        # good
        exception = assert_raises FooError do
          obj.occur_error
        end
        assert_match(/some message/, exception.message)
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Severity
        | `warning`
        | String
        |===

        == Minitest/AssertRespondTo

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always
        | 0.3
        | -
        |===

        Enforces the use of `assert_respond_to(object, :do_something)`
        over `assert(object.respond_to?(:do_something))`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert(object.respond_to?(:do_something))
        assert(object.respond_to?(:do_something), 'message')
        assert(respond_to?(:do_something))

        # good
        assert_respond_to(object, :do_something)
        assert_respond_to(object, :do_something, 'message')
        assert_respond_to(self, :do_something)
        ----

        === References

        * https://minitest.rubystyle.guide#assert-responds-to-method

        == Minitest/AssertSame

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always
        | 0.26
        | -
        |===

        Enforces the use of `assert_same(expected, actual)`
        over `assert(expected.equal?(actual))`.

        NOTE: Use `assert_same` only when there is a need to compare by identity.
              Otherwise, use `assert_equal`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert(expected.equal?(actual))
        assert_equal(expected.object_id, actual.object_id)

        # good
        assert_same(expected, actual)
        ----

        === References

        * https://minitest.rubystyle.guide#assert-same

        == Minitest/AssertSilent

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always
        | 0.10
        | -
        |===

        Enforces the test to use `assert_silent { ... }`
        instead of using `assert_output('', '') { ... }`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert_output('', '') { puts object.do_something }

        # good
        assert_silent { puts object.do_something }
        ----

        === References

        * https://github.com/rubocop/minitest-style-guide#assert-silent

        == Minitest/AssertTruthy

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | No
        | Always (Unsafe)
        | 0.2
        | 0.27
        |===

        Enforces the test to use `assert(actual)` instead of using `assert_equal(true, actual)`.

        === Safety

        This cop is unsafe because true might be expected instead of truthy.
        False positives cannot be prevented when this is a variable or method return value.

        [source,ruby]
        ----
        assert_equal(true, 'truthy') # failure
        assert('truthy')             # success
        ----

        === Examples

        [source,ruby]
        ----
        # bad
        assert_equal(true, actual)
        assert_equal(true, actual, 'message')

        # good
        assert(actual)
        assert(actual, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide#assert-truthy

        == Minitest/AssertWithExpectedArgument

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | No
        | No
        | 0.11
        | 0.26
        |===

        Tries to detect when a user accidentally used
        `assert` when they meant to use `assert_equal`.

        NOTE: The second argument to the `assert` method named `message` and `msg` is allowed.
              Because their names are inferred as message arguments.

        === Safety

        This cop is unsafe because it is not possible to determine
        whether the second argument of `assert` is a message or not.

        === Examples

        [source,ruby]
        ----
        # bad
        assert(3, my_list.length)
        assert(expected, actual)

        # good
        assert_equal(3, my_list.length)
        assert_equal(expected, actual)
        assert(foo, 'message')
        assert(foo, message)
        assert(foo, msg)
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Severity
        | `warning`
        | String
        |===

        == Minitest/AssertionInLifecycleHook

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | No
        | 0.10
        | -
        |===

        Checks for usage of assertions in lifecycle hooks.

        === Examples

        [source,ruby]
        ----
        # bad
        class FooTest < Minitest::Test
          def setup
            assert_equal(foo, bar)
          end
        end

        # good
        class FooTest < Minitest::Test
          def test_something
            assert_equal(foo, bar)
          end
        end
        ----

        == Minitest/DuplicateTestRun

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | No
        | 0.19
        | -
        |===

        If a Minitest class inherits from another class,
        it will also inherit its methods causing Minitest to run the parent's tests methods twice.

        This cop detects when there are two tests classes, one inherits from the other, and both have tests methods.
        This cop will add an offense to the Child class in such a case.

        === Examples

        [source,ruby]
        ----
        # bad
        class ParentTest < Minitest::Test
          def test_parent # it will run this test twice.
          end
        end

        class ChildTest < ParentTest
          def test_child
          end
        end

        # good
        class ParentTest < Minitest::Test
          def test_parent
          end
        end

        class ChildTest < Minitest::Test
          def test_child
          end
        end

        # good
        class ParentTest < Minitest::Test
        end

        class ChildTest
          def test_child
          end

          def test_parent
          end
        end
        ----

        === References

        * https://minitest.rubystyle.guide/#subclassing-test-cases

        == Minitest/EmptyLineBeforeAssertionMethods

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always
        | 0.23
        | -
        |===

        Enforces empty line before assertion methods because it separates assertion phase.

        === Examples

        [source,ruby]
        ----
        # bad
        do_something
        assert_equal(expected, actual)

        # good
        do_something

        assert_equal(expected, actual)
        ----

        == Minitest/Focus

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Command-line only
        | 0.35
        | -
        |===

        Enforces tests are not focused.

        === Examples

        [source,ruby]
        ----
        # bad
        focus test 'foo' do
        end

        # bad
        focus
        test 'foo' do
        end

        # good
        test 'foo' do
        end
        ----

        == Minitest/GlobalExpectations

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always
        | 0.7
        | 0.26
        |===

        Checks for deprecated global expectations
        and autocorrects them to use expect format.

        === Examples

        ==== EnforcedStyle: any (default)

        [source,ruby]
        ----
        # bad
        musts.must_equal expected_musts
        wonts.wont_match expected_wonts
        musts.must_raise TypeError

        # good
        _(musts).must_equal expected_musts
        _(wonts).wont_match expected_wonts
        _ { musts }.must_raise TypeError

        expect(musts).must_equal expected_musts
        expect(wonts).wont_match expected_wonts
        expect { musts }.must_raise TypeError

        value(musts).must_equal expected_musts
        value(wonts).wont_match expected_wonts
        value { musts }.must_raise TypeError
        ----

        ==== EnforcedStyle: _

        [source,ruby]
        ----
        # bad
        musts.must_equal expected_musts
        wonts.wont_match expected_wonts
        musts.must_raise TypeError

        expect(musts).must_equal expected_musts
        expect(wonts).wont_match expected_wonts
        expect { musts }.must_raise TypeError

        value(musts).must_equal expected_musts
        value(wonts).wont_match expected_wonts
        value { musts }.must_raise TypeError

        # good
        _(musts).must_equal expected_musts
        _(wonts).wont_match expected_wonts
        _ { musts }.must_raise TypeError
        ----

        ==== EnforcedStyle: expect

        [source,ruby]
        ----
        # bad
        musts.must_equal expected_musts
        wonts.wont_match expected_wonts
        musts.must_raise TypeError

        _(musts).must_equal expected_musts
        _(wonts).wont_match expected_wonts
        _ { musts }.must_raise TypeError

        value(musts).must_equal expected_musts
        value(wonts).wont_match expected_wonts
        value { musts }.must_raise TypeError

        # good
        expect(musts).must_equal expected_musts
        expect(wonts).wont_match expected_wonts
        expect { musts }.must_raise TypeError
        ----

        ==== EnforcedStyle: value

        [source,ruby]
        ----
        # bad
        musts.must_equal expected_musts
        wonts.wont_match expected_wonts
        musts.must_raise TypeError

        _(musts).must_equal expected_musts
        _(wonts).wont_match expected_wonts
        _ { musts }.must_raise TypeError

        expect(musts).must_equal expected_musts
        expect(wonts).wont_match expected_wonts
        expect { musts }.must_raise TypeError

        # good
        value(musts).must_equal expected_musts
        value(wonts).wont_match expected_wonts
        value { musts }.must_raise TypeError
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Severity
        | `warning`
        | String

        | EnforcedStyle
        | `any`
        | `_`, `any`, `expect`, `value`

        | Include
        | `+**/test/**/*+`, `+**/*_test.rb+`, `+**/spec/**/*+`, `+**/*_spec.rb+`
        | Array
        |===

        === References

        * https://minitest.rubystyle.guide#global-expectations

        == Minitest/LifecycleHooksOrder

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always
        | 0.28
        | -
        |===

        Checks that lifecycle hooks are declared in the order in which they will be executed.

        === Examples

        [source,ruby]
        ----
        # bad
        class FooTest < Minitest::Test
          def teardown; end
          def setup; end
        end

        # good
        class FooTest < Minitest::Test
          def setup; end
          def teardown; end
        end

        # bad (after test cases)
        class FooTest < Minitest::Test
          def test_something
            assert foo
          end
          def setup; end
          def teardown; end
        end

        # good
        class FooTest < Minitest::Test
          def setup; end
          def teardown; end
          def test_something
            assert foo
          end
        end

        # good (after non test case methods)
        class FooTest < Minitest::Test
          def do_something; end
          def setup; end
          def teardown; end
        end
        ----

        === References

        * https://minitest.rubystyle.guide/#hooks-ordering

        == Minitest/LiteralAsActualArgument

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always
        | 0.10
        | -
        |===

        Enforces correct order of expected and
        actual arguments for `assert_equal`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert_equal foo, 2
        assert_equal foo, [1, 2]
        assert_equal foo, [1, 2], 'message'

        # good
        assert_equal 2, foo
        assert_equal [1, 2], foo
        assert_equal [1, 2], foo, 'message'
        ----

        === References

        * https://minitest.rubystyle.guide/#assert-equal-arguments-order

        == Minitest/MultipleAssertions

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | No
        | 0.10
        | -
        |===

        Checks if test cases contain too many assertion calls. If conditional code with assertions
        is used, the branch with maximum assertions is counted.
        The maximum allowed assertion calls is configurable.

        === Examples

        ==== Max: 1

        [source,ruby]
        ----
        # bad
        class FooTest < Minitest::Test
          def test_asserts_twice
            assert_equal(42, do_something)
            assert_empty(array)
          end
        end

        # good
        class FooTest < Minitest::Test
          def test_asserts_once
            assert_equal(42, do_something)
          end

          def test_another_asserts_once
            assert_empty(array)
          end
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Max
        | `3`
        | Integer
        |===

        == Minitest/NoAssertions

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Disabled
        | Yes
        | No
        | 0.12
        | -
        |===

        Checks if test cases contain any assertion calls.

        === Examples

        [source,ruby]
        ----
        # bad
        class FooTest < Minitest::Test
          def test_the_truth
          end
        end

        # good
        class FooTest < Minitest::Test
          def test_the_truth
            assert true
          end
        end
        ----

        == Minitest/NoTestCases

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Disabled
        | Yes
        | No
        | 0.30
        | -
        |===

        Checks if test class contains any test cases.

        === Examples

        [source,ruby]
        ----
        # bad
        class FooTest < Minitest::Test
          def do_something
          end
        end

        # good
        class FooTest < Minitest::Test
          def test_something
            assert true
          end
        end
        ----

        == Minitest/NonExecutableTestMethod

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | No
        | 0.34
        | -
        |===

        Checks for the use of test methods outside of a test class.

        Test methods should be defined within a test class to ensure their execution.

        NOTE: This cop assumes that classes whose superclass name includes the word
        "`Test`" are test classes, in order to prevent false positives.

        === Examples

        [source,ruby]
        ----
        # bad
        class FooTest < Minitest::Test
        end
        def test_method_should_be_inside_test_class
        end

        # good
        class FooTest < Minitest::Test
          def test_method_should_be_inside_test_class
          end
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Severity
        | `warning`
        | String
        |===

        == Minitest/NonPublicTestMethod

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | No
        | 0.27
        | -
        |===

        Detects non `public` (marked as `private` or `protected`) test methods.
        Minitest runs only test methods which are `public`.

        === Examples

        [source,ruby]
        ----
        # bad
        class FooTest
          private # or protected
          def test_does_something
            assert_equal 42, do_something
          end
        end

        # good
        class FooTest
          def test_does_something
            assert_equal 42, do_something
          end
        end

        # good (not a test case name)
        class FooTest
          private # or protected
          def does_something
            assert_equal 42, do_something
          end
        end

        # good (no assertions)
        class FooTest
          private # or protected
          def test_does_something
            do_something
          end
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Severity
        | `warning`
        | String
        |===

        == Minitest/RedundantMessageArgument

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always
        | 0.34
        | -
        |===

        Detects redundant message argument in assertion methods.
        The message argument `nil` is redundant because it is the default value.

        === Examples

        [source,ruby]
        ----
        # bad
        assert_equal(expected, actual, nil)

        # good
        assert_equal(expected, actual)
        assert_equal(expected, actual, 'message')
        ----

        == Minitest/RefuteEmpty

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always
        | 0.3
        | -
        |===

        Enforces to use `refute_empty` instead of using `refute(object.empty?)`.

        === Examples

        [source,ruby]
        ----
        # bad
        refute(object.empty?)
        refute(object.empty?, 'message')

        # good
        refute_empty(object)
        refute_empty(object, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide#refute-empty

        == Minitest/RefuteEqual

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always
        | 0.3
        | -
        |===

        Enforces the use of `refute_equal(expected, object)`
        over `assert(expected != actual)` or `assert(! expected == actual)`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert("rubocop-minitest" != actual)
        refute("rubocop-minitest" == actual)
        assert_operator("rubocop-minitest", :!=, actual)
        refute_operator("rubocop-minitest", :==, actual)

        # good
        refute_equal("rubocop-minitest", actual)
        ----

        === References

        * https://minitest.rubystyle.guide#refute-equal

        == Minitest/RefuteFalse

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | No
        | Always (Unsafe)
        | 0.3
        | 0.27
        |===

        Enforces the use of `refute(object)` over `assert_equal(false, object)`.

        === Safety

        This cop is unsafe because it cannot detect failure when second argument is `nil`.
        False positives cannot be prevented when this is a variable or method return value.

        [source,ruby]
        ----
        assert_equal(false, nil) # failure
        refute(nil)              # success
        ----

        === Examples

        [source,ruby]
        ----
        # bad
        assert_equal(false, actual)
        assert_equal(false, actual, 'message')

        assert(!test)
        assert(!test, 'message')

        # good
        refute(actual)
        refute(actual, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide#refute-false

        == Minitest/RefuteInDelta

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always
        | 0.10
        | -
        |===

        Enforces the test to use `refute_in_delta`
        instead of using `refute_equal` to compare floats.

        === Examples

        [source,ruby]
        ----
        # bad
        refute_equal(0.2, actual)
        refute_equal(0.2, actual, 'message')

        # good
        refute_in_delta(0.2, actual)
        refute_in_delta(0.2, actual, 0.001, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide/#refute-in-delta

        == Minitest/RefuteIncludes

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always
        | 0.3
        | -
        |===

        Enforces the test to use `refute_includes`
        instead of using `refute(collection.include?(object))`.

        === Examples

        [source,ruby]
        ----
        # bad
        refute(collection.include?(object))
        refute(collection.include?(object), 'message')

        # good
        refute_includes(collection, object)
        refute_includes(collection, object, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide#refute-includes

        == Minitest/RefuteInstanceOf

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always
        | 0.4
        | -
        |===

        Enforces the use of `refute_instance_of(Class, object)`
        over `refute(object.instance_of?(Class))`.

        === Examples

        [source,ruby]
        ----
        # bad
        refute(object.instance_of?(Class))
        refute(object.instance_of?(Class), 'message')

        # bad
        refute_equal(Class, object.class)
        refute_equal(Class, object.class, 'message')

        # good
        refute_instance_of(Class, object)
        refute_instance_of(Class, object, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide#refute-instance-of

        == Minitest/RefuteKindOf

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always
        | 0.10
        | 0.34
        |===

        Enforces the use of `refute_kind_of(Class, object)`
        over `refute(object.kind_of?(Class))`.

        === Examples

        [source,ruby]
        ----
        # bad
        refute(object.kind_of?(Class))
        refute(object.kind_of?(Class), 'message')

        # bad
        # `is_a?` is an alias for `kind_of?`
        refute(object.is_of?(Class))
        refute(object.is_of?(Class), 'message')

        # good
        refute_kind_of(Class, object)
        refute_kind_of(Class, object, 'message')
        ----

        === References

        * https://github.com/rubocop/minitest-style-guide#refute-kind-of

        == Minitest/RefuteMatch

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always
        | 0.6
        | -
        |===

        Enforces the test to use `refute_match`
        instead of using `refute(matcher.match(string))`.

        === Examples

        [source,ruby]
        ----
        # bad
        refute(matcher.match(string))
        refute(matcher.match?(string))
        refute(matcher =~ string)
        refute_operator(matcher, :=~, string)
        assert_operator(matcher, :!~, string)
        refute(matcher.match(string), 'message')

        # good
        refute_match(matcher, string)
        refute_match(matcher, string, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide#refute-match

        == Minitest/RefuteNil

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always
        | 0.2
        | -
        |===

        Enforces the test to use `refute_nil` instead of using
        `refute_equal(nil, something)`, `refute(something.nil?)`, or `refute_predicate(something, :nil?)`.

        === Examples

        [source,ruby]
        ----
        # bad
        refute_equal(nil, actual)
        refute_equal(nil, actual, 'message')
        refute(actual.nil?)
        refute(actual.nil?, 'message')
        refute_predicate(object, :nil?)
        refute_predicate(object, :nil?, 'message')

        # good
        refute_nil(actual)
        refute_nil(actual, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide#refute-nil

        == Minitest/RefuteOperator

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always
        | 0.32
        | -
        |===

        Enforces the use of `refute_operator(expected, :<, actual)` over `refute(expected < actual)`.

        === Examples

        [source,ruby]
        ----
        # bad
        refute(expected < actual)

        # good
        refute_operator(expected, :<, actual)
        ----

        === References

        * https://minitest.rubystyle.guide#refute-operator

        == Minitest/RefutePathExists

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always
        | 0.10
        | -
        |===

        Enforces the test to use `refute_path_exists` instead of using `refute(File.exist?(path))`.

        === Examples

        [source,ruby]
        ----
        # bad
        refute(File.exist?(path))
        refute(File.exist?(path), 'message')

        # good
        refute_path_exists(path)
        refute_path_exists(path, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide/#refute-path-exists

        == Minitest/RefutePredicate

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always
        | 0.18
        | -
        |===

        Enforces the test to use `refute_predicate`
        instead of using `refute(obj.a_predicate_method?)`.

        === Examples

        [source,ruby]
        ----
        # bad
        refute(obj.one?)
        refute(obj.one?, 'message')

        # good
        refute_predicate(obj, :one?)
        refute_predicate(obj, :one?, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide/#refute-predicate

        == Minitest/RefuteRespondTo

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always
        | 0.4
        | -
        |===

        Enforces the test to use `refute_respond_to(object, :do_something)`
        over `refute(object.respond_to?(:do_something))`.

        === Examples

        [source,ruby]
        ----
        # bad
        refute(object.respond_to?(:do_something))
        refute(object.respond_to?(:do_something), 'message')
        refute(respond_to?(:do_something))

        # good
        refute_respond_to(object, :do_something)
        refute_respond_to(object, :do_something, 'message')
        refute_respond_to(self, :do_something)
        ----

        === References

        * https://minitest.rubystyle.guide#refute-respond-to

        == Minitest/RefuteSame

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always
        | 0.26
        | -
        |===

        Enforces the use of `refute_same(expected, object)`
        over `refute(expected.equal?(actual))`.

        NOTE: Use `refute_same` only when there is a need to compare by identity.
              Otherwise, use `refute_equal`.

        === Examples

        [source,ruby]
        ----
        # bad
        refute(expected.equal?(actual))
        refute_equal(expected.object_id, actual.object_id)

        # good
        refute_same(expected, actual)
        ----

        === References

        * https://minitest.rubystyle.guide#refute-same

        == Minitest/ReturnInTestMethod

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always
        | 0.31
        | -
        |===

        Enforces the use of `skip` instead of `return` in test methods.

        === Examples

        [source,ruby]
        ----
        # bad
        def test_something
          return if condition?
          assert_equal(42, something)
        end

        # good
        def test_something
          skip if condition?
          assert_equal(42, something)
        end
        ----

        === References

        * https://minitest.rubystyle.guide/#skipping-runnable-methods

        == Minitest/SkipEnsure

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | No
        | 0.20
        | 0.26
        |===

        Checks that `ensure` call even if `skip`. It is unexpected that `ensure` will be called when skipping test.
        If conditional `skip` is used, it checks that `ensure` is also called conditionally.

        On the other hand, it accepts `skip` used in `rescue` because `ensure` may be teardown process to `begin`
        setup process.

        === Examples

        [source,ruby]
        ----
        # bad
        def test_skip
          skip 'This test is skipped.'

          assert 'foo'.present?
        ensure
          do_something
        end

        # bad
        def test_conditional_skip
          skip 'This test is skipped.' if condition

          assert do_something
        ensure
          do_teardown
        end

        # good
        def test_skip
          skip 'This test is skipped.'

          begin
            assert 'foo'.present?
          ensure
            do_something
          end
        end

        # good
        def test_conditional_skip
          skip 'This test is skipped.' if condition

          assert do_something
        ensure
          if condition
            do_teardown
          end
        end

        # good
        def test_skip_is_used_in_rescue
          do_setup
          assert do_something
        rescue
          skip 'This test is skipped.'
        ensure
          do_teardown
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Severity
        | `warning`
        | String
        |===

        == Minitest/SkipWithoutReason

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | No
        | 0.24
        | -
        |===

        Checks for skipped tests missing the skipping reason.

        === Examples

        [source,ruby]
        ----
        # bad
        skip
        skip('')

        # bad
        if condition?
          skip
        else
          skip
        end

        # good
        skip("Reason why the test was skipped")

        # good
        skip if condition?
        ----

        == Minitest/TestFileName

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | No
        | 0.26
        | -
        |===

        Checks if test file names start with `test_` or end with `_test.rb`.
        Files which define classes having names ending with `Test` are checked.
        Not following this convention may result in tests not being run.

        === Examples

        [source,ruby]
        ----
        # bad
        my_class.rb

        # good
        my_class_test.rb
        test_my_class.rb
        ----

        === References

        * https://minitest.rubystyle.guide/#file-naming

        == Minitest/TestMethodName

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always
        | 0.10
        | -
        |===

        Enforces that test method names start with `test_` prefix.
        It aims to prevent tests that aren't executed by forgetting to start test method name with `test_`.

        === Examples

        [source,ruby]
        ----
        # bad
        class FooTest < Minitest::Test
          def does_something
            assert_equal 42, do_something
          end
        end

        # good
        class FooTest < Minitest::Test
          def test_does_something
            assert_equal 42, do_something
          end
        end

        # good
        class FooTest < Minitest::Test
          def helper_method(argument)
          end
        end
        ----

        == Minitest/UnreachableAssertion

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | No
        | 0.14
        | 0.26
        |===

        Checks for `assert_raises` has an assertion method at
        the bottom of block because the assertion will be never reached.

        === Examples

        [source,ruby]
        ----
        # bad
        assert_raises FooError do
          obj.occur_error
          assert_equal('foo', obj.bar) # Never asserted.
        end

        # good
        assert_raises FooError do
          obj.occur_error
        end
        assert_equal('foo', obj.bar)
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Severity
        | `warning`
        | String
        |===

        == Minitest/UnspecifiedException

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | No
        | 0.10
        | -
        |===

        Checks for a specified error in `assert_raises`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert_raises { raise FooException }
        assert_raises('This should have raised') { raise FooException }

        # good
        assert_raises(FooException) { raise FooException }
        assert_raises(FooException, 'This should have raised') { raise FooException }
        ----

        === References

        * https://minitest.rubystyle.guide#unspecified-exception

        == Minitest/UselessAssertion

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | No
        | 0.26
        | -
        |===

        Detects useless assertions (assertions that either always pass or always fail).

        === Examples

        [source,ruby]
        ----
        # bad
        assert true
        assert_equal @foo, @foo
        assert_nil [foo, bar]

        # good
        assert something
        assert_equal foo, bar
        assert_nil foo
        assert false, "My message"
        ----
  recorded_at: Mon, 27 May 2024 05:30:42 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-minitest/v0.35.0/config/default.yml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '12767'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"f9dc1b99a3821a4c98b47e747a20ccd583388be003fa1c4012a9632a86202836"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - E1DE:12DE69:31D795:359431:66541A82
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 27 May 2024 05:30:42 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-fra-eddf8230159-FRA
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1716787842.371460,VS0,VE156
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - 3f259b38c88c7784556ba68ca774dbf0c203008a
      Expires:
      - Mon, 27 May 2024 05:35:42 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        Minitest:
          Enabled: true
          DocumentationBaseURL: https://docs.rubocop.org/rubocop-minitest
          Include:
            - '**/test/**/*'
            - '**/*_test.rb'

        Minitest/AssertEmpty:
          Description: 'This cop enforces the test to use `assert_empty` instead of using `assert(object.empty?)`.'
          StyleGuide: 'https://minitest.rubystyle.guide#assert-empty'
          Enabled: true
          VersionAdded: '0.2'

        Minitest/AssertEmptyLiteral:
          Description: 'This cop enforces the test to use `assert_empty` instead of using `assert_equal([], object)`.'
          Enabled: true
          VersionAdded: '0.5'
          VersionChanged: '0.11'

        Minitest/AssertEqual:
          Description: 'This cop enforces the test to use `assert_equal` instead of using `assert(expected == actual)`.'
          StyleGuide: 'https://minitest.rubystyle.guide#assert-equal-arguments-order'
          Enabled: true
          VersionAdded: '0.4'

        Minitest/AssertInDelta:
          Description: 'This cop enforces the test to use `assert_in_delta` instead of using `assert_equal` to compare floats.'
          StyleGuide: 'https://minitest.rubystyle.guide/#assert-in-delta'
          Enabled: 'pending'
          VersionAdded: '0.10'

        Minitest/AssertIncludes:
          Description: 'This cop enforces the test to use `assert_includes` instead of using `assert(collection.include?(object))`.'
          StyleGuide: 'https://minitest.rubystyle.guide#assert-includes'
          Enabled: true
          VersionAdded: '0.2'

        Minitest/AssertInstanceOf:
          Description: 'This cop enforces the test to use `assert_instance_of(Class, object)` over `assert(object.instance_of?(Class))`'
          StyleGuide: 'https://minitest.rubystyle.guide#assert-instance-of'
          Enabled: true
          VersionAdded: '0.4'

        Minitest/AssertKindOf:
          Description: 'This cop enforces the test to use `assert_kind_of(Class, object)` over `assert(object.kind_of?(Class))`'
          StyleGuide: 'https://github.com/rubocop/minitest-style-guide#assert-kind-of'
          Enabled: 'pending'
          VersionAdded: '0.10'
          VersionChanged: '0.34'

        Minitest/AssertMatch:
          Description: 'This cop enforces the test to use `assert_match` instead of using `assert(matcher.match(object))`.'
          StyleGuide: 'https://minitest.rubystyle.guide#assert-match'
          Enabled: true
          VersionAdded: '0.6'

        Minitest/AssertNil:
          Description: 'This cop enforces the test to use `assert_nil` instead of using `assert_equal(nil, something)` or `assert(something.nil?)`.'
          StyleGuide: 'https://minitest.rubystyle.guide#assert-nil'
          Enabled: true
          VersionAdded: '0.1'

        Minitest/AssertOperator:
          Description: 'This cop enforces the use of `assert_operator(expected, :<, actual)` over `assert(expected < actual)`.'
          StyleGuide: 'https://minitest.rubystyle.guide#assert-operator'
          Enabled: pending
          VersionAdded: '0.32'

        Minitest/AssertOutput:
          Description: 'This cop checks for opportunities to use `assert_output`.'
          StyleGuide: 'https://minitest.rubystyle.guide/#assert-output'
          Enabled: 'pending'
          VersionAdded: '0.10'

        Minitest/AssertPathExists:
          Description: 'This cop enforces the test to use `assert_path_exists` instead of using `assert(File.exist?(path))`.'
          StyleGuide: 'https://minitest.rubystyle.guide/#assert-path-exists'
          Enabled: 'pending'
          VersionAdded: '0.10'

        Minitest/AssertPredicate:
          Description: 'This cop enforces the test to use `assert_predicate` instead of using `assert(obj.a_predicate_method?)`.'
          StyleGuide: 'https://minitest.rubystyle.guide/#assert-predicate'
          Enabled: pending
          VersionAdded: '0.18'

        Minitest/AssertRaisesCompoundBody:
          Description: 'This cop enforces the block body of `assert_raises { ... }` to be reduced to only the raising code.'
          Enabled: pending
          VersionAdded: '0.21'

        Minitest/AssertRaisesWithRegexpArgument:
          Description: 'This cop enforces checks for regular expression literals passed to `assert_raises`.'
          Enabled: pending
          Severity: warning
          VersionAdded: '0.22'
          VersionChanged: '0.26'

        Minitest/AssertRespondTo:
          Description: 'This cop enforces the test to use `assert_respond_to(object, :do_something)` over `assert(object.respond_to?(:do_something))`.'
          StyleGuide: 'https://minitest.rubystyle.guide#assert-responds-to-method'
          Enabled: true
          VersionAdded: '0.3'

        Minitest/AssertSame:
          Description: 'Enforces the use of `assert_same(expected, actual)` over `assert(expected.equal?(actual))`.'
          StyleGuide: 'https://minitest.rubystyle.guide#assert-same'
          Enabled: pending
          VersionAdded: '0.26'

        Minitest/AssertSilent:
          Description: "This cop enforces the test to use `assert_silent { ... }` instead of using `assert_output('', '') { ... }`."
          StyleGuide: 'https://github.com/rubocop/minitest-style-guide#assert-silent'
          Enabled: 'pending'
          VersionAdded: '0.10'

        Minitest/AssertTruthy:
          Description: 'This cop enforces the test to use `assert(actual)` instead of using `assert_equal(true, actual)`.'
          StyleGuide: 'https://minitest.rubystyle.guide#assert-truthy'
          Enabled: true
          Safe: false
          VersionAdded: '0.2'
          VersionChanged: '0.27'

        Minitest/AssertWithExpectedArgument:
          Description: 'This cop tries to detect when a user accidentally used `assert` when they meant to use `assert_equal`.'
          Enabled: pending
          Severity: warning
          Safe: false
          VersionAdded: '0.11'
          VersionChanged: '0.26'

        Minitest/AssertionInLifecycleHook:
          Description: 'This cop checks for usage of assertions in lifecycle hooks.'
          Enabled: 'pending'
          VersionAdded: '0.10'

        Minitest/DuplicateTestRun:
          Description: 'This cop detects duplicate test runs caused by one test class inheriting from another.'
          StyleGuide: 'https://minitest.rubystyle.guide/#subclassing-test-cases'
          Enabled: pending
          VersionAdded: '0.19'

        Minitest/EmptyLineBeforeAssertionMethods:
          Description: 'Add empty line before assertion methods.'
          Enabled: pending
          VersionAdded: '0.23'

        Minitest/Focus:
          Description: 'Checks for focused tests.'
          Enabled: pending
          AutoCorrect: contextual
          VersionAdded: '0.35'

        Minitest/GlobalExpectations:
          Description: 'This cop checks for deprecated global expectations.'
          StyleGuide: 'https://minitest.rubystyle.guide#global-expectations'
          Enabled: true
          Severity: warning
          EnforcedStyle: any
          Include:
            - '**/test/**/*'
            - '**/*_test.rb'
            - '**/spec/**/*'
            - '**/*_spec.rb'
          SupportedStyles:
            - _
            - any
            - expect
            - value
          VersionAdded: '0.7'
          VersionChanged: '0.26'

        Minitest/LifecycleHooksOrder:
          Description: 'Checks that lifecycle hooks are declared in the order in which they will be executed.'
          StyleGuide: 'https://minitest.rubystyle.guide/#hooks-ordering'
          Enabled: pending
          VersionAdded: '0.28'

        Minitest/LiteralAsActualArgument:
          Description: 'This cop enforces correct order of `expected` and `actual` arguments for `assert_equal`.'
          StyleGuide: 'https://minitest.rubystyle.guide/#assert-equal-arguments-order'
          Enabled: 'pending'
          VersionAdded: '0.10'

        Minitest/MultipleAssertions:
          Description: 'This cop checks if test cases contain too many assertion calls.'
          Enabled: 'pending'
          VersionAdded: '0.10'
          Max: 3

        Minitest/NoAssertions:
          Description: 'This cop checks for at least one assertion (or flunk) in tests.'
          Enabled: false
          VersionAdded: '0.12'

        Minitest/NoTestCases:
          Description: 'Checks if test class contains any test cases.'
          Enabled: false
          VersionAdded: '0.30'

        Minitest/NonExecutableTestMethod:
          Description: 'Checks uses of test methods outside test class.'
          Enabled: pending
          Severity: warning
          VersionAdded: '0.34'

        Minitest/NonPublicTestMethod:
          Description: 'Detects non `public` (marked as `private` or `protected`) test methods.'
          Enabled: pending
          Severity: warning
          VersionAdded: '0.27'

        Minitest/RedundantMessageArgument:
          Description: 'Detects redundant message argument in assertion methods.'
          Enabled: pending
          VersionAdded: '0.34'

        Minitest/RefuteEmpty:
          Description: 'This cop enforces to use `refute_empty` instead of using `refute(object.empty?)`.'
          StyleGuide: 'https://minitest.rubystyle.guide#refute-empty'
          Enabled: true
          VersionAdded: '0.3'

        Minitest/RefuteEqual:
          Description: 'Check if your test uses `refute_equal` instead of `assert(expected != object)` or `assert(! expected == object))`.'
          StyleGuide: 'https://minitest.rubystyle.guide#refute-equal'
          Enabled: true
          VersionAdded: '0.3'

        Minitest/RefuteFalse:
          Description: 'Check if your test uses `refute(actual)` instead of `assert_equal(false, actual)`.'
          StyleGuide: 'https://minitest.rubystyle.guide#refute-false'
          Enabled: true
          Safe: false
          VersionAdded: '0.3'
          VersionChanged: '0.27'

        Minitest/RefuteInDelta:
          Description: 'This cop enforces the test to use `refute_in_delta` instead of using `refute_equal` to compare floats.'
          StyleGuide: 'https://minitest.rubystyle.guide/#refute-in-delta'
          Enabled: 'pending'
          VersionAdded: '0.10'

        Minitest/RefuteIncludes:
          Description: 'This cop enforces the test to use `refute_includes` instead of using `refute(collection.include?(object))`.'
          StyleGuide: 'https://minitest.rubystyle.guide#refute-includes'
          Enabled: true
          VersionAdded: '0.3'

        Minitest/RefuteInstanceOf:
          Description: 'This cop enforces the test to use `refute_instance_of(Class, object)` over `refute(object.instance_of?(Class))`.'
          StyleGuide: 'https://minitest.rubystyle.guide#refute-instance-of'
          Enabled: true
          VersionAdded: '0.4'

        Minitest/RefuteKindOf:
          Description: 'This cop enforces the test to use `refute_kind_of(Class, object)` over `refute(object.kind_of?(Class))`.'
          StyleGuide: 'https://github.com/rubocop/minitest-style-guide#refute-kind-of'
          Enabled: 'pending'
          VersionAdded: '0.10'
          VersionChanged: '0.34'

        Minitest/RefuteMatch:
          Description: 'This cop enforces the test to use `refute_match` instead of using `refute(matcher.match(object))`.'
          StyleGuide: 'https://minitest.rubystyle.guide#refute-match'
          Enabled: true
          VersionAdded: '0.6'

        Minitest/RefuteNil:
          Description: 'This cop enforces the test to use `refute_nil` instead of using `refute_equal(nil, something)` or `refute(something.nil?)`.'
          StyleGuide: 'https://minitest.rubystyle.guide#refute-nil'
          Enabled: true
          VersionAdded: '0.2'

        Minitest/RefuteOperator:
          Description: 'This cop enforces the use of `refute_operator(expected, :<, actual)` over `refute(expected < actual)`.'
          StyleGuide: 'https://minitest.rubystyle.guide#refute-operator'
          Enabled: pending
          VersionAdded: '0.32'

        Minitest/RefutePathExists:
          Description: 'This cop enforces the test to use `refute_path_exists` instead of using `refute(File.exist?(path))`.'
          StyleGuide: 'https://minitest.rubystyle.guide/#refute-path-exists'
          Enabled: 'pending'
          VersionAdded: '0.10'

        Minitest/RefutePredicate:
          Description: 'This cop enforces the test to use `refute_predicate` instead of using `refute(obj.a_predicate_method?)`.'
          StyleGuide: 'https://minitest.rubystyle.guide/#refute-predicate'
          Enabled: pending
          VersionAdded: '0.18'

        Minitest/RefuteRespondTo:
          Description: 'This cop enforces the test to use `refute_respond_to(object, :do_something)` over `refute(object.respond_to?(:do_something))`.'
          StyleGuide: 'https://minitest.rubystyle.guide#refute-respond-to'
          Enabled: true
          VersionAdded: '0.4'

        Minitest/RefuteSame:
          Description: 'Enforces the use of `refute_same(expected, actual)` over `refute(expected.equal?(actual))`.'
          StyleGuide: 'https://minitest.rubystyle.guide#refute-same'
          Enabled: pending
          VersionAdded: '0.26'

        Minitest/ReturnInTestMethod:
          Description: 'Enforces the use of `skip` instead of `return` in test methods.'
          StyleGuide: 'https://minitest.rubystyle.guide/#skipping-runnable-methods'
          Enabled: pending
          VersionAdded: '0.31'

        Minitest/SkipEnsure:
          Description: 'Checks that `ensure` call even if `skip`.'
          Enabled: pending
          Severity: warning
          VersionAdded: '0.20'
          VersionChanged: '0.26'

        Minitest/SkipWithoutReason:
          Description: 'Checks for skipped tests missing the skipping reason.'
          Enabled: pending
          VersionAdded: '0.24'

        Minitest/TestFileName:
          Description: 'Checks if test file names start with `test_` or end with `_test.rb`.'
          StyleGuide: 'https://minitest.rubystyle.guide/#file-naming'
          Enabled: pending
          VersionAdded: '0.26'

        Minitest/TestMethodName:
          Description: 'This cop enforces that test method names start with `test_` prefix.'
          Enabled: 'pending'
          VersionAdded: '0.10'

        Minitest/UnreachableAssertion:
          Description: 'This cop checks for an `assert_raises` block containing any unreachable assertions.'
          Enabled: pending
          Severity: warning
          VersionAdded: '0.14'
          VersionChanged: '0.26'

        Minitest/UnspecifiedException:
          Description: 'This cop checks for a specified error in `assert_raises`.'
          StyleGuide: 'https://minitest.rubystyle.guide#unspecified-exception'
          Enabled: 'pending'
          VersionAdded: '0.10'

        Minitest/UselessAssertion:
          Description: 'Detects useless assertions (assertions that either always pass or always fail).'
          Enabled: pending
          VersionAdded: '0.26'
  recorded_at: Mon, 27 May 2024 05:30:42 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-performance/v1.21.0/docs/modules/ROOT/pages/cops.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '4550'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"f14299f901f830002d5facd08d5663ec669ba9786af6ea68bf66c64d389cc4c2"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - DDAA:3DF3CA:13E2A83:151AEB8:66541A81
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 27 May 2024 05:30:42 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-fra-eddf8230143-FRA
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1716787843.643988,VS0,VE163
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - 5b7fcf4a24eb203d7e9f48909f50fdec12e752e2
      Expires:
      - Mon, 27 May 2024 05:35:42 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        = Cops

        In RuboCop lingo the various checks performed on the code are called cops.
        Each cop is responsible for detecting one particular offense.
        RuboCop Performance has only one Performance department.

        == Performance

        Performance cops optimization analysis for your projects.

        // START_COP_LIST

        === Department xref:cops_performance.adoc[Performance]

        * xref:cops_performance.adoc#performanceancestorsinclude[Performance/AncestorsInclude]
        * xref:cops_performance.adoc#performancearraysemiinfiniterangeslice[Performance/ArraySemiInfiniteRangeSlice]
        * xref:cops_performance.adoc#performancebigdecimalwithnumericargument[Performance/BigDecimalWithNumericArgument]
        * xref:cops_performance.adoc#performancebindcall[Performance/BindCall]
        * xref:cops_performance.adoc#performanceblockgivenwithexplicitblock[Performance/BlockGivenWithExplicitBlock]
        * xref:cops_performance.adoc#performancecaller[Performance/Caller]
        * xref:cops_performance.adoc#performancecasewhensplat[Performance/CaseWhenSplat]
        * xref:cops_performance.adoc#performancecasecmp[Performance/Casecmp]
        * xref:cops_performance.adoc#performancechainarrayallocation[Performance/ChainArrayAllocation]
        * xref:cops_performance.adoc#performancecollectionliteralinloop[Performance/CollectionLiteralInLoop]
        * xref:cops_performance.adoc#performancecomparewithblock[Performance/CompareWithBlock]
        * xref:cops_performance.adoc#performanceconcurrentmonotonictime[Performance/ConcurrentMonotonicTime]
        * xref:cops_performance.adoc#performanceconstantregexp[Performance/ConstantRegexp]
        * xref:cops_performance.adoc#performancecount[Performance/Count]
        * xref:cops_performance.adoc#performancedeleteprefix[Performance/DeletePrefix]
        * xref:cops_performance.adoc#performancedeletesuffix[Performance/DeleteSuffix]
        * xref:cops_performance.adoc#performancedetect[Performance/Detect]
        * xref:cops_performance.adoc#performancedoublestartendwith[Performance/DoubleStartEndWith]
        * xref:cops_performance.adoc#performanceendwith[Performance/EndWith]
        * xref:cops_performance.adoc#performancefixedsize[Performance/FixedSize]
        * xref:cops_performance.adoc#performanceflatmap[Performance/FlatMap]
        * xref:cops_performance.adoc#performanceinefficienthashsearch[Performance/InefficientHashSearch]
        * xref:cops_performance.adoc#performanceioreadlines[Performance/IoReadlines]
        * xref:cops_performance.adoc#performancemapcompact[Performance/MapCompact]
        * xref:cops_performance.adoc#performancemapmethodchain[Performance/MapMethodChain]
        * xref:cops_performance.adoc#performancemethodobjectasblock[Performance/MethodObjectAsBlock]
        * xref:cops_performance.adoc#performanceopenstruct[Performance/OpenStruct]
        * xref:cops_performance.adoc#performancerangeinclude[Performance/RangeInclude]
        * xref:cops_performance.adoc#performanceredundantblockcall[Performance/RedundantBlockCall]
        * xref:cops_performance.adoc#performanceredundantequalitycomparisonblock[Performance/RedundantEqualityComparisonBlock]
        * xref:cops_performance.adoc#performanceredundantmatch[Performance/RedundantMatch]
        * xref:cops_performance.adoc#performanceredundantmerge[Performance/RedundantMerge]
        * xref:cops_performance.adoc#performanceredundantsortblock[Performance/RedundantSortBlock]
        * xref:cops_performance.adoc#performanceredundantsplitregexpargument[Performance/RedundantSplitRegexpArgument]
        * xref:cops_performance.adoc#performanceredundantstringchars[Performance/RedundantStringChars]
        * xref:cops_performance.adoc#performanceregexpmatch[Performance/RegexpMatch]
        * xref:cops_performance.adoc#performancereverseeach[Performance/ReverseEach]
        * xref:cops_performance.adoc#performancereversefirst[Performance/ReverseFirst]
        * xref:cops_performance.adoc#performanceselectmap[Performance/SelectMap]
        * xref:cops_performance.adoc#performancesize[Performance/Size]
        * xref:cops_performance.adoc#performancesortreverse[Performance/SortReverse]
        * xref:cops_performance.adoc#performancesqueeze[Performance/Squeeze]
        * xref:cops_performance.adoc#performancestartwith[Performance/StartWith]
        * xref:cops_performance.adoc#performancestringidentifierargument[Performance/StringIdentifierArgument]
        * xref:cops_performance.adoc#performancestringinclude[Performance/StringInclude]
        * xref:cops_performance.adoc#performancestringreplacement[Performance/StringReplacement]
        * xref:cops_performance.adoc#performancesum[Performance/Sum]
        * xref:cops_performance.adoc#performancetimesmap[Performance/TimesMap]
        * xref:cops_performance.adoc#performanceunfreezestring[Performance/UnfreezeString]
        * xref:cops_performance.adoc#performanceuridefaultparser[Performance/UriDefaultParser]

        // END_COP_LIST
  recorded_at: Mon, 27 May 2024 05:30:43 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-performance/v1.21.0/docs/modules/ROOT/pages/cops_performance.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '43745'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"f86e2b511c0085e321da92d1b355d1af52598b21e028567200d81aedd82322e7"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - FB54:312987:13024FD:143B4BA:66541A82
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 27 May 2024 05:30:43 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-fra-eddf8230097-FRA
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1716787843.956315,VS0,VE186
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - 3e8caa1b2c307a0300efb56d2419977fe96c2bf2
      Expires:
      - Mon, 27 May 2024 05:35:43 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        ////
          Do NOT edit this file by hand directly, as it is automatically generated.

          Please make any necessary changes to the cop documentation within the source files themselves.
        ////

        = Performance

        == Performance/AncestorsInclude

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | No
        | Always (Unsafe)
        | 1.7
        | -
        |===

        Identifies usages of `ancestors.include?` and change them to use `<=` instead.

        === Safety

        This cop is unsafe because it can't tell whether the receiver is a class or an object.
        e.g. the false positive was for `Nokogiri::XML::Node#ancestors`.

        === Examples

        [source,ruby]
        ----
        # bad
        A.ancestors.include?(B)

        # good
        A <= B
        ----

        === References

        * https://github.com/fastruby/fast-ruby#ancestorsinclude-vs--code

        == Performance/ArraySemiInfiniteRangeSlice

        NOTE: Required Ruby version: 2.7

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Disabled
        | No
        | Always (Unsafe)
        | 1.9
        | -
        |===

        Identifies places where slicing arrays with semi-infinite ranges
        can be replaced by `Array#take` and `Array#drop`.
        This cop was created due to a mistake in microbenchmark and hence is disabled by default.
        Refer https://github.com/rubocop/rubocop-performance/pull/175#issuecomment-731892717

        === Safety

        This cop is unsafe for string slices because strings do not have `#take` and `#drop` methods.

        === Examples

        [source,ruby]
        ----
        # bad
        array[..2]
        array[...2]
        array[2..]
        array[2...]
        array.slice(..2)

        # good
        array.take(3)
        array.take(2)
        array.drop(2)
        array.drop(2)
        array.take(3)
        ----

        == Performance/BigDecimalWithNumericArgument

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always
        | 1.7
        | -
        |===

        Identifies places where numeric argument to BigDecimal should be
        converted to string. Initializing from String is faster
        than from Numeric for BigDecimal.

        === Examples

        [source,ruby]
        ----
        # bad
        BigDecimal(1, 2)
        4.to_d(6)
        BigDecimal(1.2, 3, exception: true)
        4.5.to_d(6, exception: true)

        # good
        BigDecimal('1', 2)
        BigDecimal('4', 6)
        BigDecimal('1.2', 3, exception: true)
        BigDecimal('4.5', 6, exception: true)
        ----

        == Performance/BindCall

        NOTE: Required Ruby version: 2.7

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always
        | 1.6
        | -
        |===

        In Ruby 2.7, `UnboundMethod#bind_call` has been added.

        This cop identifies places where `bind(obj).call(args, ...)`
        can be replaced by `bind_call(obj, args, ...)`.

        The `bind_call(obj, args, ...)` method is faster than
        `bind(obj).call(args, ...)`.

        === Examples

        [source,ruby]
        ----
        # bad
        umethod.bind(obj).call(foo, bar)
        umethod.bind(obj).(foo, bar)

        # good
        umethod.bind_call(obj, foo, bar)
        ----

        == Performance/BlockGivenWithExplicitBlock

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always
        | 1.9
        | -
        |===

        Identifies unnecessary use of a `block_given?` where explicit check
        of block argument would suffice.

        === Examples

        [source,ruby]
        ----
        # bad
        def method(&block)
          do_something if block_given?
        end

        # good
        def method(&block)
          do_something if block
        end

        # good - block is reassigned
        def method(&block)
          block ||= -> { do_something }
          warn "Using default ..." unless block_given?
          # ...
        end
        ----

        == Performance/Caller

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always
        | 0.49
        | 1.9
        |===

        Identifies places where `caller[n]` can be replaced by `caller(n..n).first`.

        === Examples

        [source,ruby]
        ----
        # bad
        caller[1]
        caller.first
        caller_locations[1]
        caller_locations.first

        # good
        caller(2..2).first
        caller(1..1).first
        caller_locations(2..2).first
        caller_locations(1..1).first
        ----

        == Performance/CaseWhenSplat

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Disabled
        | Yes
        | Always (Unsafe)
        | 0.34
        | 1.13
        |===

        Reordering `when` conditions with a splat to the end
        of the `when` branches can improve performance.

        Ruby has to allocate memory for the splat expansion every time
        that the `case` `when` statement is run. Since Ruby does not support
        fall through inside of `case` `when`, like some other languages do,
        the order of the `when` branches should not matter. By placing any
        splat expansions at the end of the list of `when` branches we will
        reduce the number of times that memory has to be allocated for
        the expansion. The exception to this is if multiple of your `when`
        conditions can be true for any given condition. A likely scenario for
        this defining a higher level when condition to override a condition
        that is inside of the splat expansion.

        === Safety

        This cop is not unsafe autocorrection because it is not a guaranteed
        performance improvement. If the data being processed by the `case` condition is
        normalized in a manner that favors hitting a condition in the splat expansion,
        it is possible that moving the splat condition to the end will use more memory,
        and run slightly slower.
        See for more details: https://github.com/rubocop/rubocop/pull/6163

        === Examples

        [source,ruby]
        ----
        # bad
        case foo
        when *condition
          bar
        when baz
          foobar
        end

        case foo
        when *[1, 2, 3, 4]
          bar
        when 5
          baz
        end

        # good
        case foo
        when baz
          foobar
        when *condition
          bar
        end

        case foo
        when 1, 2, 3, 4
          bar
        when 5
          baz
        end
        ----

        == Performance/Casecmp

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Disabled
        | No
        | Always (Unsafe)
        | 0.36
        | 1.21
        |===

        Identifies places where a case-insensitive string comparison
        can better be implemented using `casecmp`.

        This cop is disabled by default because `String#casecmp` only works with
        ASCII characters. See https://github.com/rubocop/rubocop/issues/9753.

        If you are working only with ASCII characters, then this cop can be
        safely enabled.

        === Safety

        This cop is unsafe because `String#casecmp` and `String#casecmp?` behave
        differently when using Non-ASCII characters.

        === Examples

        [source,ruby]
        ----
        # bad
        str.downcase == 'abc'
        str.upcase.eql? 'ABC'
        'abc' == str.downcase
        'ABC'.eql? str.upcase
        str.downcase == str.downcase

        # good
        str.casecmp('ABC').zero?
        'abc'.casecmp(str).zero?
        ----

        === References

        * https://github.com/fastruby/fast-ruby#stringcasecmp-vs--stringcasecmp-vs-stringdowncase---code

        == Performance/ChainArrayAllocation

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Disabled
        | Yes
        | No
        | 0.59
        | -
        |===

        Identifies usages of `array.compact.flatten.map { |x| x.downcase }`.
        Each of these methods (`compact`, `flatten`, `map`) will generate a new intermediate array
        that is promptly thrown away. Instead it is faster to mutate when we know it's safe.

        === Examples

        [source,ruby]
        ----
        # bad
        array = ["a", "b", "c"]
        array.compact.flatten.map { |x| x.downcase }

        # good
        array = ["a", "b", "c"]
        array.compact!
        array.flatten!
        array.map! { |x| x.downcase }
        array
        ----

        === References

        * https://twitter.com/schneems/status/1034123879978029057

        == Performance/CollectionLiteralInLoop

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | No
        | 1.8
        | -
        |===

        Identifies places where Array and Hash literals are used within loops.
        It is better to extract them into a local variable or constant
        to avoid unnecessary allocations on each iteration.

        You can set the minimum number of elements to consider
        an offense with `MinSize`.

        === Examples

        [source,ruby]
        ----
        # bad
        users.select do |user|
          %i[superadmin admin].include?(user.role)
        end

        # good
        admin_roles = %i[superadmin admin]
        users.select do |user|
          admin_roles.include?(user.role)
        end

        # good
        ADMIN_ROLES = %i[superadmin admin]
        ...
        users.select do |user|
          ADMIN_ROLES.include?(user.role)
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | MinSize
        | `1`
        | Integer
        |===

        == Performance/CompareWithBlock

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always
        | 0.46
        | -
        |===

        Identifies places where `sort { |a, b| a.foo <=> b.foo }`
        can be replaced by `sort_by(&:foo)`.
        This cop also checks `sort!`, `min`, `max` and `minmax` methods.

        === Examples

        [source,ruby]
        ----
        # bad
        array.sort   { |a, b| a.foo <=> b.foo }
        array.sort!  { |a, b| a.foo <=> b.foo }
        array.max    { |a, b| a.foo <=> b.foo }
        array.min    { |a, b| a.foo <=> b.foo }
        array.minmax { |a, b| a.foo <=> b.foo }
        array.sort   { |a, b| a[:foo] <=> b[:foo] }

        # good
        array.sort_by(&:foo)
        array.sort_by!(&:foo)
        array.sort_by { |v| v.foo }
        array.sort_by do |var|
          var.foo
        end
        array.max_by(&:foo)
        array.min_by(&:foo)
        array.minmax_by(&:foo)
        array.sort_by { |a| a[:foo] }
        ----

        == Performance/ConcurrentMonotonicTime

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always
        | 1.12
        | -
        |===

        Identifies places where `Concurrent.monotonic_time`
        can be replaced by `Process.clock_gettime(Process::CLOCK_MONOTONIC)`.

        === Examples

        [source,ruby]
        ----
        # bad
        Concurrent.monotonic_time

        # good
        Process.clock_gettime(Process::CLOCK_MONOTONIC)
        ----

        === References

        * https://github.com/rails/rails/pull/43502

        == Performance/ConstantRegexp

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always
        | 1.9
        | 1.10
        |===

        Finds regular expressions with dynamic components that are all constants.

        Ruby allocates a new Regexp object every time it executes a code containing such
        a regular expression. It is more efficient to extract it into a constant,
        memoize it, or add an `/o` option to perform `#{}` interpolation only once and
        reuse that Regexp object.

        === Examples

        [source,ruby]
        ----
        # bad
        def tokens(pattern)
          pattern.scan(TOKEN).reject { |token| token.match?(/\A#{SEPARATORS}\Z/) }
        end

        # good
        ALL_SEPARATORS = /\A#{SEPARATORS}\Z/
        def tokens(pattern)
          pattern.scan(TOKEN).reject { |token| token.match?(ALL_SEPARATORS) }
        end

        # good
        def tokens(pattern)
          pattern.scan(TOKEN).reject { |token| token.match?(/\A#{SEPARATORS}\Z/o) }
        end

        # good
        def separators
          @separators ||= /\A#{SEPARATORS}\Z/
        end
        ----

        == Performance/Count

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always (Unsafe)
        | 0.31
        | 1.8
        |===

        Identifies usages of `count` on an `Enumerable` that
        follow calls to `select`, `find_all`, `filter` or `reject`. Querying logic can instead be
        passed to the `count` call.

        === Safety

        This cop is unsafe because it has known compatibility issues with `ActiveRecord` and other
        frameworks. Before Rails 5.1, `ActiveRecord` will ignore the block that is passed to `count`.
        Other methods, such as `select`, will convert the association to an
        array and then run the block on the array. A simple work around to
        make `count` work with a block is to call `to_a.count {...}`.

        For example:

        [source,ruby]
        ----
        `Model.where(id: [1, 2, 3]).select { |m| m.method == true }.size`
        ----

        becomes:

        [source,ruby]
        ----
        `Model.where(id: [1, 2, 3]).to_a.count { |m| m.method == true }`
        ----

        === Examples

        [source,ruby]
        ----
        # bad
        [1, 2, 3].select { |e| e > 2 }.size
        [1, 2, 3].reject { |e| e > 2 }.size
        [1, 2, 3].select { |e| e > 2 }.length
        [1, 2, 3].reject { |e| e > 2 }.length
        [1, 2, 3].select { |e| e > 2 }.count { |e| e.odd? }
        [1, 2, 3].reject { |e| e > 2 }.count { |e| e.even? }
        array.select(&:value).count

        # good
        [1, 2, 3].count { |e| e > 2 }
        [1, 2, 3].count { |e| e < 2 }
        [1, 2, 3].count { |e| e > 2 && e.odd? }
        [1, 2, 3].count { |e| e < 2 && e.even? }
        Model.select('field AS field_one').count
        Model.select(:value).count
        ----

        == Performance/DeletePrefix

        NOTE: Required Ruby version: 2.5

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | No
        | Always (Unsafe)
        | 1.6
        | 1.11
        |===

        In Ruby 2.5, `String#delete_prefix` has been added.

        This cop identifies places where `gsub(/\Aprefix/, '')` and `sub(/\Aprefix/, '')`
        can be replaced by `delete_prefix('prefix')`.

        This cop has `SafeMultiline` configuration option that `true` by default because
        `^prefix` is unsafe as it will behave incompatible with `delete_prefix`
        for receiver is multiline string.

        The `delete_prefix('prefix')` method is faster than `gsub(/\Aprefix/, '')`.

        === Safety

        This cop is unsafe because `Pathname` has `sub` but not `delete_prefix`.

        === Examples

        [source,ruby]
        ----
        # bad
        str.gsub(/\Aprefix/, '')
        str.gsub!(/\Aprefix/, '')

        str.sub(/\Aprefix/, '')
        str.sub!(/\Aprefix/, '')

        # good
        str.delete_prefix('prefix')
        str.delete_prefix!('prefix')
        ----

        ==== SafeMultiline: true (default)

        [source,ruby]
        ----
        # good
        str.gsub(/^prefix/, '')
        str.gsub!(/^prefix/, '')
        str.sub(/^prefix/, '')
        str.sub!(/^prefix/, '')
        ----

        ==== SafeMultiline: false

        [source,ruby]
        ----
        # bad
        str.gsub(/^prefix/, '')
        str.gsub!(/^prefix/, '')
        str.sub(/^prefix/, '')
        str.sub!(/^prefix/, '')
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | SafeMultiline
        | `true`
        | Boolean
        |===

        == Performance/DeleteSuffix

        NOTE: Required Ruby version: 2.5

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | No
        | Always (Unsafe)
        | 1.6
        | 1.11
        |===

        In Ruby 2.5, `String#delete_suffix` has been added.

        This cop identifies places where `gsub(/suffix\z/, '')` and `sub(/suffix\z/, '')`
        can be replaced by `delete_suffix('suffix')`.

        This cop has `SafeMultiline` configuration option that `true` by default because
        `suffix$` is unsafe as it will behave incompatible with `delete_suffix?`
        for receiver is multiline string.

        The `delete_suffix('suffix')` method is faster than `gsub(/suffix\z/, '')`.

        === Safety

        This cop is unsafe because `Pathname` has `sub` but not `delete_suffix`.

        === Examples

        [source,ruby]
        ----
        # bad
        str.gsub(/suffix\z/, '')
        str.gsub!(/suffix\z/, '')

        str.sub(/suffix\z/, '')
        str.sub!(/suffix\z/, '')

        # good
        str.delete_suffix('suffix')
        str.delete_suffix!('suffix')
        ----

        ==== SafeMultiline: true (default)

        [source,ruby]
        ----
        # good
        str.gsub(/suffix$/, '')
        str.gsub!(/suffix$/, '')
        str.sub(/suffix$/, '')
        str.sub!(/suffix$/, '')
        ----

        ==== SafeMultiline: false

        [source,ruby]
        ----
        # bad
        str.gsub(/suffix$/, '')
        str.gsub!(/suffix$/, '')
        str.sub(/suffix$/, '')
        str.sub!(/suffix$/, '')
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | SafeMultiline
        | `true`
        | Boolean
        |===

        == Performance/Detect

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always (Unsafe)
        | 0.30
        | 1.8
        |===

        Identifies usages of `first`, `last`, `[0]` or `[-1]`
        chained to `select`, `find_all` or `filter` and change them to use
        `detect` instead.

        === Safety

        This cop is unsafe because it assumes that the receiver is an
        `Array` or equivalent, but can't reliably detect it. For example,
        if the receiver is a `Hash`, it may report a false positive.

        === Examples

        [source,ruby]
        ----
        # bad
        [].select { |item| true }.first
        [].select { |item| true }.last
        [].find_all { |item| true }.first
        [].find_all { |item| true }.last
        [].filter { |item| true }.first
        [].filter { |item| true }.last
        [].filter { |item| true }[0]
        [].filter { |item| true }[-1]

        # good
        [].detect { |item| true }
        [].reverse.detect { |item| true }
        ----

        === References

        * https://github.com/fastruby/fast-ruby#enumerabledetect-vs-enumerableselectfirst-code

        == Performance/DoubleStartEndWith

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always
        | 0.36
        | 0.48
        |===

        Checks for double `#start_with?` or `#end_with?` calls
        separated by `||`. In some cases such calls can be replaced
        with an single `#start_with?`/`#end_with?` call.

        `IncludeActiveSupportAliases` configuration option is used to check for
        `starts_with?` and `ends_with?`. These methods are defined by Active Support.

        === Examples

        [source,ruby]
        ----
        # bad
        str.start_with?("a") || str.start_with?(Some::CONST)
        str.start_with?("a", "b") || str.start_with?("c")
        str.end_with?(var1) || str.end_with?(var2)

        # good
        str.start_with?("a", Some::CONST)
        str.start_with?("a", "b", "c")
        str.end_with?(var1, var2)
        ----

        ==== IncludeActiveSupportAliases: false (default)

        [source,ruby]
        ----
        # good
        str.starts_with?("a", "b") || str.starts_with?("c")
        str.ends_with?(var1) || str.ends_with?(var2)

        str.starts_with?("a", "b", "c")
        str.ends_with?(var1, var2)
        ----

        ==== IncludeActiveSupportAliases: true

        [source,ruby]
        ----
        # bad
        str.starts_with?("a", "b") || str.starts_with?("c")
        str.ends_with?(var1) || str.ends_with?(var2)

        # good
        str.starts_with?("a", "b", "c")
        str.ends_with?(var1, var2)
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | IncludeActiveSupportAliases
        | `false`
        | Boolean
        |===

        == Performance/EndWith

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always (Unsafe)
        | 0.36
        | 1.10
        |===

        Identifies unnecessary use of a regex where `String#end_with?` would suffice.

        This cop has `SafeMultiline` configuration option that `true` by default because
        `end$` is unsafe as it will behave incompatible with `end_with?`
        for receiver is multiline string.

        === Safety

        This will change to a new method call which isn't guaranteed to be on the
        object. Switching these methods has to be done with knowledge of the types
        of the variables which rubocop doesn't have.

        === Examples

        [source,ruby]
        ----
        # bad
        'abc'.match?(/bc\Z/)
        /bc\Z/.match?('abc')
        'abc' =~ /bc\Z/
        /bc\Z/ =~ 'abc'
        'abc'.match(/bc\Z/)
        /bc\Z/.match('abc')

        # good
        'abc'.end_with?('bc')
        ----

        ==== SafeMultiline: true (default)

        [source,ruby]
        ----
        # good
        'abc'.match?(/bc$/)
        /bc$/.match?('abc')
        'abc' =~ /bc$/
        /bc$/ =~ 'abc'
        'abc'.match(/bc$/)
        /bc$/.match('abc')
        ----

        ==== SafeMultiline: false

        [source,ruby]
        ----
        # bad
        'abc'.match?(/bc$/)
        /bc$/.match?('abc')
        'abc' =~ /bc$/
        /bc$/ =~ 'abc'
        'abc'.match(/bc$/)
        /bc$/.match('abc')
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | SafeMultiline
        | `true`
        | Boolean
        |===

        === References

        * https://github.com/fastruby/fast-ruby#stringmatch-vs-stringmatch-vs-stringstart_withstringend_with-code-start-code-end

        == Performance/FixedSize

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | No
        | 0.35
        | -
        |===

        Do not compute the size of statically sized objects.

        === Examples

        [source,ruby]
        ----
        # String methods
        # bad
        'foo'.size
        %q[bar].count
        %(qux).length

        # Symbol methods
        # bad
        :fred.size
        :'baz'.length

        # Array methods
        # bad
        [1, 2, thud].count
        %W(1, 2, bar).size

        # Hash methods
        # bad
        { a: corge, b: grault }.length

        # good
        foo.size
        bar.count
        qux.length

        # good
        :"#{fred}".size
        CONST = :baz.length

        # good
        [1, 2, *thud].count
        garply = [1, 2, 3]
        garply.size

        # good
        { a: corge, **grault }.length
        waldo = { a: corge, b: grault }
        waldo.size
        ----

        == Performance/FlatMap

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always
        | 0.30
        | -
        |===

        Identifies usages of `map { ... }.flatten` and
        change them to use `flat_map { ... }` instead.

        === Examples

        [source,ruby]
        ----
        # bad
        [1, 2, 3, 4].map { |e| [e, e] }.flatten(1)
        [1, 2, 3, 4].collect { |e| [e, e] }.flatten(1)

        # good
        [1, 2, 3, 4].flat_map { |e| [e, e] }
        [1, 2, 3, 4].map { |e| [e, e] }.flatten
        [1, 2, 3, 4].collect { |e| [e, e] }.flatten
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | EnabledForFlattenWithoutParams
        | `false`
        | Boolean
        |===

        === References

        * https://github.com/fastruby/fast-ruby#enumerablemaparrayflatten-vs-enumerableflat_map-code

        == Performance/InefficientHashSearch

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | No
        | Always (Unsafe)
        | 0.56
        | -
        |===

        Checks for inefficient searching of keys and values within
        hashes.

        `Hash#keys.include?` is less efficient than `Hash#key?` because
        the former allocates a new array and then performs an O(n) search
        through that array, while `Hash#key?` does not allocate any array and
        performs a faster O(1) search for the key.

        `Hash#values.include?` is less efficient than `Hash#value?`. While they
        both perform an O(n) search through all of the values, calling `values`
        allocates a new array while using `value?` does not.

        === Safety

        This cop is unsafe because it can't tell whether the receiver is a hash object.

        === Examples

        [source,ruby]
        ----
        # bad
        { a: 1, b: 2 }.keys.include?(:a)
        { a: 1, b: 2 }.keys.include?(:z)
        h = { a: 1, b: 2 }; h.keys.include?(100)

        # good
        { a: 1, b: 2 }.key?(:a)
        { a: 1, b: 2 }.has_key?(:z)
        h = { a: 1, b: 2 }; h.key?(100)

        # bad
        { a: 1, b: 2 }.values.include?(2)
        { a: 1, b: 2 }.values.include?('garbage')
        h = { a: 1, b: 2 }; h.values.include?(nil)

        # good
        { a: 1, b: 2 }.value?(2)
        { a: 1, b: 2 }.has_value?('garbage')
        h = { a: 1, b: 2 }; h.value?(nil)
        ----

        === References

        * https://github.com/fastruby/fast-ruby#hashkey-instead-of-hashkeysinclude-code

        == Performance/IoReadlines

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Disabled
        | Yes
        | Always
        | 1.7
        | -
        |===

        Identifies places where inefficient `readlines` method
        can be replaced by `each_line` to avoid fully loading file content into memory.

        === Examples

        [source,ruby]
        ----
        # bad
        File.readlines('testfile').each { |l| puts l }
        IO.readlines('testfile', chomp: true).each { |l| puts l }

        conn.readlines(10).map { |l| l.size }
        file.readlines.find { |l| l.start_with?('#') }
        file.readlines.each { |l| puts l }

        # good
        File.open('testfile', 'r').each_line { |l| puts l }
        IO.open('testfile').each_line(chomp: true) { |l| puts l }

        conn.each_line(10).map { |l| l.size }
        file.each_line.find { |l| l.start_with?('#') }
        file.each_line { |l| puts l }
        ----

        === References

        * https://docs.gitlab.com/ee/development/performance.html#reading-from-files-and-other-data-sources

        == Performance/MapCompact

        NOTE: Required Ruby version: 2.7

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always (Unsafe)
        | 1.11
        | -
        |===

        In Ruby 2.7, `Enumerable#filter_map` has been added.

        This cop identifies places where `map { ... }.compact` can be replaced by `filter_map`.

        [source,ruby]
        ----
        [true, false, nil].compact              #=> [true, false]
        [true, false, nil].filter_map(&:itself) #=> [true]
        ----

        === Safety

        This cop's autocorrection is unsafe because `map { ... }.compact` that is not
        compatible with `filter_map`.

        === Examples

        [source,ruby]
        ----
        # bad
        ary.map(&:foo).compact
        ary.collect(&:foo).compact

        # good
        ary.filter_map(&:foo)
        ary.map(&:foo).compact!
        ary.compact.map(&:foo)
        ----

        == Performance/MapMethodChain

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | No
        | No
        | 1.19
        | -
        |===

        Checks if the map method is used in a chain.

        Autocorrection is not supported because an appropriate block variable name cannot be determined automatically.

        [source,ruby]
        ----
        class X
          def initialize
            @@num = 0
          end

          def foo
            @@num += 1
            self
          end

          def bar
            @@num * 2
          end
        end

        [X.new, X.new].map(&:foo).map(&:bar) # => [4, 4]
        [X.new, X.new].map { |x| x.foo.bar } # => [2, 4]
        ----

        === Safety

        This cop is unsafe because false positives occur if the number of times the first method is executed
        affects the return value of subsequent methods.

        === Examples

        [source,ruby]
        ----
        # bad
        array.map(&:foo).map(&:bar)

        # good
        array.map { |item| item.foo.bar }
        ----

        == Performance/MethodObjectAsBlock

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | No
        | 1.9
        | -
        |===

        Identifies places where methods are converted to blocks, with the
        use of `&method`, and passed as arguments to method calls.
        It is faster to replace those with explicit blocks, calling those methods inside.

        === Examples

        [source,ruby]
        ----
        # bad
        array.map(&method(:do_something))
        [1, 2, 3].each(&out.method(:puts))

        # good
        array.map { |x| do_something(x) }
        [1, 2, 3].each { |x| out.puts(x) }
        ----

        === References

        * https://github.com/fastruby/fast-ruby#normal-way-to-apply-method-vs-method-code

        == Performance/OpenStruct

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Disabled
        | No
        | No
        | 0.61
        | -
        |===

        Checks for `OpenStruct.new` calls.
        Instantiation of an `OpenStruct` invalidates
        Ruby global method cache as it causes dynamic method
        definition during program runtime.
        This could have an effect on performance,
        especially in case of single-threaded
        applications with multiple `OpenStruct` instantiations.

        === Safety

        This cop is unsafe because `OpenStruct.new` and `Struct.new`
        are not equivalent.

        === Examples

        [source,ruby]
        ----
        # bad
        class MyClass
          def my_method
            OpenStruct.new(my_key1: 'my_value1', my_key2: 'my_value2')
          end
        end

        # good
        class MyClass
          MyStruct = Struct.new(:my_key1, :my_key2)
          def my_method
            MyStruct.new('my_value1', 'my_value2')
          end
        end
        ----

        == Performance/RangeInclude

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | No
        | Always (Unsafe)
        | 0.36
        | 1.7
        |===

        Identifies uses of `Range#include?` and `Range#member?`, which iterates over each
        item in a `Range` to see if a specified item is there. In contrast,
        `Range#cover?` simply compares the target item with the beginning and
        end points of the `Range`. In a great majority of cases, this is what
        is wanted.

        === Safety

        This cop is unsafe because `Range#include?` (or `Range#member?`) and `Range#cover?`
        are not equivalent behavior.
        Example of a case where `Range#cover?` may not provide the desired result:

        [source,ruby]
        ----
        ('a'..'z').cover?('yellow') # => true
        ----

        === Examples

        [source,ruby]
        ----
        # bad
        ('a'..'z').include?('b') # => true
        ('a'..'z').member?('b')  # => true

        # good
        ('a'..'z').cover?('b') # => true
        ----

        === References

        * https://github.com/fastruby/fast-ruby#cover-vs-include-code

        == Performance/RedundantBlockCall

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always
        | 0.36
        | -
        |===

        Identifies the use of a `&block` parameter and `block.call`
        where `yield` would do just as well.

        === Examples

        [source,ruby]
        ----
        # bad
        def method(&block)
          block.call
        end
        def another(&func)
          func.call 1, 2, 3
        end

        # good
        def method
          yield
        end
        def another
          yield 1, 2, 3
        end
        ----

        === References

        * https://github.com/fastruby/fast-ruby#proccall-and-block-arguments-vs-yieldcode

        == Performance/RedundantEqualityComparisonBlock

        NOTE: Required Ruby version: 2.5

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | No
        | Always (Unsafe)
        | 1.10
        | -
        |===

        Checks for uses `Enumerable#all?`, `Enumerable#any?`, `Enumerable#one?`,
        and `Enumerable#none?` are compared with `===` or similar methods in block.

        By default, `Object#===` behaves the same as `Object#==`, but this
        behavior is appropriately overridden in subclass. For example,
        `Range#===` returns `true` when argument is within the range.

        This cop has `AllowRegexpMatch` option and it is true by default because
        `regexp.match?('string')` often used in block changes to the opposite result:

        [source,ruby]
        ----
        [/pattern/].all? { |regexp| regexp.match?('pattern') } # => true
        [/pattern/].all? { |regexp| regexp =~ 'pattern' }      # => true
        [/pattern/].all?('pattern')                            # => false
        ----

        === Safety

        This cop is unsafe because `===` and `==` do not always behave the same.

        === Examples

        [source,ruby]
        ----
        # bad
        items.all? { |item| pattern === item }
        items.all? { |item| item == other }
        items.all? { |item| item.is_a?(Klass) }
        items.all? { |item| item.kind_of?(Klass) }

        # good
        items.all?(pattern)
        items.all?(Klass)
        ----

        ==== AllowRegexpMatch: true (default)

        [source,ruby]
        ----
        # good
        items.all? { |item| item =~ pattern }
        items.all? { |item| item.match?(pattern) }
        ----

        ==== AllowRegexpMatch: false

        [source,ruby]
        ----
        # bad
        items.all? { |item| item =~ pattern }
        items.all? { |item| item.match?(pattern) }
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | AllowRegexpMatch
        | `true`
        | Boolean
        |===

        === References

        * https://github.com/rails/rails/pull/41363

        == Performance/RedundantMatch

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always
        | 0.36
        | -
        |===

        Identifies the use of `Regexp#match` or `String#match`, which
        returns `#<MatchData>`/`nil`. The return value of `=~` is an integral
        index/`nil` and is more performant.

        === Examples

        [source,ruby]
        ----
        # bad
        do_something if str.match(/regex/)
        while regex.match('str')
          do_something
        end

        # good
        method(str =~ /regex/)
        return value unless regex =~ 'str'
        ----

        == Performance/RedundantMerge

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | No
        | Always (Unsafe)
        | 0.36
        | 1.11
        |===

        Identifies places where `Hash#merge!` can be replaced by `Hash#[]=`.
        You can set the maximum number of key-value pairs to consider
        an offense with `MaxKeyValuePairs`.

        === Safety

        This cop is unsafe because RuboCop cannot determine if the
        receiver of `merge!` is actually a hash or not.

        === Examples

        [source,ruby]
        ----
        # bad
        hash.merge!(a: 1)
        hash.merge!({'key' => 'value'})

        # good
        hash[:a] = 1
        hash['key'] = 'value'
        ----

        ==== MaxKeyValuePairs: 2 (default)

        [source,ruby]
        ----
        # bad
        hash.merge!(a: 1, b: 2)

        # good
        hash[:a] = 1
        hash[:b] = 2
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | MaxKeyValuePairs
        | `2`
        | Integer
        |===

        === References

        * https://github.com/fastruby/fast-ruby#hashmerge-vs-hash-code

        == Performance/RedundantSortBlock

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always
        | 1.7
        | -
        |===

        Identifies places where `sort { |a, b| a <=> b }` can be replaced with `sort`.

        === Examples

        [source,ruby]
        ----
        # bad
        array.sort { |a, b| a <=> b }

        # good
        array.sort
        ----

        == Performance/RedundantSplitRegexpArgument

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always
        | 1.10
        | -
        |===

        Identifies places where `split` argument can be replaced from
        a deterministic regexp to a string.

        === Examples

        [source,ruby]
        ----
        # bad
        'a,b,c'.split(/,/)

        # good
        'a,b,c'.split(',')
        ----

        == Performance/RedundantStringChars

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always
        | 1.7
        | -
        |===

        Checks for redundant `String#chars`.

        === Examples

        [source,ruby]
        ----
        # bad
        str.chars[0..2]
        str.chars.slice(0..2)
        str.chars.last

        # good
        str[0..2].chars

        # bad
        str.chars.first
        str.chars.first(2)

        # good
        str[0]
        str[0...2].chars
        str[-1]

        # bad
        str.chars.take(2)
        str.chars.length
        str.chars.size
        str.chars.empty?

        # good
        str[0...2].chars
        str.length
        str.size
        str.empty?

        # For example, if the receiver is an empty string, it will be incompatible.
        # If a negative value is specified for the receiver, `nil` is returned.
        str.chars.last(2) # Incompatible with `str[-2..-1].chars`.
        str.chars.drop(2) # Incompatible with `str[2..-1].chars`.
        ----

        == Performance/RegexpMatch

        NOTE: Required Ruby version: 2.4

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always
        | 0.47
        | -
        |===

        In Ruby 2.4, `String#match?`, `Regexp#match?`, and `Symbol#match?`
        have been added. The methods are faster than `match`.
        Because the methods avoid creating a `MatchData` object or saving
        backref.
        So, when `MatchData` is not used, use `match?` instead of `match`.

        === Examples

        [source,ruby]
        ----
        # bad
        def foo
          if x =~ /re/
            do_something
          end
        end

        # bad
        def foo
          if x !~ /re/
            do_something
          end
        end

        # bad
        def foo
          if x.match(/re/)
            do_something
          end
        end

        # bad
        def foo
          if /re/ === x
            do_something
          end
        end

        # good
        def foo
          if x.match?(/re/)
            do_something
          end
        end

        # good
        def foo
          if !x.match?(/re/)
            do_something
          end
        end

        # good
        def foo
          if x =~ /re/
            do_something(Regexp.last_match)
          end
        end

        # good
        def foo
          if x.match(/re/)
            do_something($~)
          end
        end

        # good
        def foo
          if /re/ === x
            do_something($~)
          end
        end
        ----

        === References

        * https://github.com/fastruby/fast-ruby#regexp-vs-regexpmatch-vs-regexpmatch-vs-stringmatch-vs-string-vs-stringmatch-code-

        == Performance/ReverseEach

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always
        | 0.30
        | -
        |===

        Identifies usages of `reverse.each` and change them to use `reverse_each` instead.

        If the return value is used, it will not be detected because the result will be different.

        [source,ruby]
        ----
        [1, 2, 3].reverse.each {} #=> [3, 2, 1]
        [1, 2, 3].reverse_each {} #=> [1, 2, 3]
        ----

        === Examples

        [source,ruby]
        ----
        # bad
        items.reverse.each

        # good
        items.reverse_each
        ----

        === References

        * https://github.com/fastruby/fast-ruby#enumerablereverseeach-vs-enumerablereverse_each-code

        == Performance/ReverseFirst

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always
        | 1.7
        | -
        |===

        Identifies places where `reverse.first(n)` and `reverse.first`
        can be replaced by `last(n).reverse` and `last`.

        === Examples

        [source,ruby]
        ----
        # bad
        array.reverse.first(5)
        array.reverse.first

        # good
        array.last(5).reverse
        array.last
        ----

        == Performance/SelectMap

        NOTE: Required Ruby version: 2.7

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Disabled
        | Yes
        | No
        | 1.11
        | -
        |===

        In Ruby 2.7, `Enumerable#filter_map` has been added.

        This cop identifies places where `select.map` can be replaced by `filter_map`.

        === Examples

        [source,ruby]
        ----
        # bad
        ary.select(&:foo).map(&:bar)
        ary.filter(&:foo).map(&:bar)

        # good
        ary.filter_map { |o| o.bar if o.foo }
        ----

        == Performance/Size

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always
        | 0.30
        | -
        |===

        Identifies usages of `count` on an `Array` and `Hash` and change them to `size`.

        TODO: Add advanced detection of variables that could
        have been assigned to an array or a hash.

        === Examples

        [source,ruby]
        ----
        # bad
        [1, 2, 3].count
        (1..3).to_a.count
        Array[*1..3].count
        Array(1..3).count

        # bad
        {a: 1, b: 2, c: 3}.count
        [[:foo, :bar], [1, 2]].to_h.count
        Hash[*('a'..'z')].count
        Hash(key: :value).count

        # good
        [1, 2, 3].size
        (1..3).to_a.size
        Array[*1..3].size
        Array(1..3).size

        # good
        {a: 1, b: 2, c: 3}.size
        [[:foo, :bar], [1, 2]].to_h.size
        Hash[*('a'..'z')].size
        Hash(key: :value).size

        # good
        [1, 2, 3].count { |e| e > 2 }
        ----

        === References

        * https://github.com/fastruby/fast-ruby#arraylength-vs-arraysize-vs-arraycount-code

        == Performance/SortReverse

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always
        | 1.7
        | -
        |===

        Identifies places where `sort { |a, b| b <=> a }`
        can be replaced by a faster `sort.reverse`.

        === Examples

        [source,ruby]
        ----
        # bad
        array.sort { |a, b| b <=> a }

        # good
        array.sort.reverse
        ----

        == Performance/Squeeze

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always
        | 1.7
        | -
        |===

        Identifies places where `gsub(/a+/, 'a')` and `gsub!(/a+/, 'a')`
        can be replaced by `squeeze('a')` and `squeeze!('a')`.

        The `squeeze('a')` method is faster than `gsub(/a+/, 'a')`.

        === Examples

        [source,ruby]
        ----
        # bad
        str.gsub(/a+/, 'a')
        str.gsub!(/a+/, 'a')

        # good
        str.squeeze('a')
        str.squeeze!('a')
        ----

        === References

        * https://github.com/fastruby/fast-ruby#remove-extra-spaces-or-other-contiguous-characters-code

        == Performance/StartWith

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always (Unsafe)
        | 0.36
        | 1.10
        |===

        Identifies unnecessary use of a regex where `String#start_with?` would suffice.

        This cop has `SafeMultiline` configuration option that `true` by default because
        `^start` is unsafe as it will behave incompatible with `start_with?`
        for receiver is multiline string.

        === Safety

        This will change to a new method call which isn't guaranteed to be on the
        object. Switching these methods has to be done with knowledge of the types
        of the variables which rubocop doesn't have.

        === Examples

        [source,ruby]
        ----
        # bad
        'abc'.match?(/\Aab/)
        /\Aab/.match?('abc')
        'abc' =~ /\Aab/
        /\Aab/ =~ 'abc'
        'abc'.match(/\Aab/)
        /\Aab/.match('abc')

        # good
        'abc'.start_with?('ab')
        ----

        ==== SafeMultiline: true (default)

        [source,ruby]
        ----
        # good
        'abc'.match?(/^ab/)
        /^ab/.match?('abc')
        'abc' =~ /^ab/
        /^ab/ =~ 'abc'
        'abc'.match(/^ab/)
        /^ab/.match('abc')
        ----

        ==== SafeMultiline: false

        [source,ruby]
        ----
        # bad
        'abc'.match?(/^ab/)
        /^ab/.match?('abc')
        'abc' =~ /^ab/
        /^ab/ =~ 'abc'
        'abc'.match(/^ab/)
        /^ab/.match('abc')
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | SafeMultiline
        | `true`
        | Boolean
        |===

        === References

        * https://github.com/fastruby/fast-ruby#stringmatch-vs-stringmatch-vs-stringstart_withstringend_with-code-start-code-end

        == Performance/StringIdentifierArgument

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always
        | 1.13
        | -
        |===

        Identifies places where string identifier argument can be replaced
        by symbol identifier argument.
        It prevents the redundancy of the internal string-to-symbol conversion.

        This cop targets methods that take identifier (e.g. method name) argument
        and the following examples are parts of it.

        === Examples

        [source,ruby]
        ----
        # bad
        send('do_something')
        attr_accessor 'do_something'
        instance_variable_get('@ivar')
        respond_to?("string_#{interpolation}")

        # good
        send(:do_something)
        attr_accessor :do_something
        instance_variable_get(:@ivar)
        respond_to?(:"string_#{interpolation}")

        # good - these methods don't support namespaced symbols
        const_get("#{module_path}::Base")
        const_source_location("#{module_path}::Base")
        const_defined?("#{module_path}::Base")
        ----

        == Performance/StringInclude

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always (Unsafe)
        | 1.7
        | 1.12
        |===

        Identifies unnecessary use of a regex where `String#include?` would suffice.

        === Safety

        This cop's offenses are not safe to autocorrect if a receiver is nil or a Symbol.

        === Examples

        [source,ruby]
        ----
        # bad
        str.match?(/ab/)
        /ab/.match?(str)
        str =~ /ab/
        /ab/ =~ str
        str.match(/ab/)
        /ab/.match(str)
        /ab/ === str

        # good
        str.include?('ab')
        ----

        == Performance/StringReplacement

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always
        | 0.33
        | -
        |===

        Identifies places where `gsub` can be replaced by `tr` or `delete`.

        === Examples

        [source,ruby]
        ----
        # bad
        'abc'.gsub('b', 'd')
        'abc'.gsub('a', '')
        'abc'.gsub(/a/, 'd')
        'abc'.gsub!('a', 'd')

        # good
        'abc'.gsub(/.*/, 'a')
        'abc'.gsub(/a+/, 'd')
        'abc'.tr('b', 'd')
        'a b c'.delete(' ')
        ----

        === References

        * https://github.com/fastruby/fast-ruby#stringgsub-vs-stringtr-code

        == Performance/Sum

        NOTE: Required Ruby version: 2.4

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Pending
        | Yes
        | Always (Unsafe)
        | 1.8
        | 1.13
        |===

        Identifies places where custom code finding the sum of elements
        in some Enumerable object can be replaced by `Enumerable#sum` method.

        === Safety

        Autocorrections are unproblematic wherever an initial value is provided explicitly:

        [source,ruby]
        ----
        [1, 2, 3].reduce(4, :+) # => 10
        [1, 2, 3].sum(4) # => 10

        [].reduce(4, :+) # => 4
        [].sum(4) # => 4
        ----

        This also holds true for non-numeric types which implement a `:+` method:

        [source,ruby]
        ----
        ['l', 'o'].reduce('Hel', :+) # => "Hello"
        ['l', 'o'].sum('Hel') # => "Hello"
        ----

        When no initial value is provided though, `Enumerable#reduce` will pick the first enumerated value
        as initial value and successively add all following values to it, whereas
        `Enumerable#sum` will set an initial value of `0` (`Integer`) which can lead to a `TypeError`:

        [source,ruby]
        ----
        [].reduce(:+) # => nil
        [1, 2, 3].reduce(:+) # => 6
        ['H', 'e', 'l', 'l', 'o'].reduce(:+) # => "Hello"

        [].sum # => 0
        [1, 2, 3].sum # => 6
        ['H', 'e', 'l', 'l', 'o'].sum # => in `+': String can't be coerced into Integer (TypeError)
        ----

        === Examples

        ==== OnlySumOrWithInitialValue: false (default)

        [source,ruby]
        ----
        # bad
        [1, 2, 3].inject(:+)                        # Autocorrections for cases without initial value are unsafe
        [1, 2, 3].inject(&:+)                       # and will only be performed when using the `-A` option.
        [1, 2, 3].reduce { |acc, elem| acc + elem } # They can be prohibited completely using `SafeAutoCorrect: true`.
        [1, 2, 3].reduce(10, :+)
        [1, 2, 3].map { |elem| elem ** 2 }.sum
        [1, 2, 3].collect(&:count).sum(10)

        # good
        [1, 2, 3].sum
        [1, 2, 3].sum(10)
        [1, 2, 3].sum { |elem| elem ** 2 }
        [1, 2, 3].sum(10, &:count)
        ----

        ==== OnlySumOrWithInitialValue: true

        [source,ruby]
        ----
        # bad
        [1, 2, 3].reduce(10, :+)
        [1, 2, 3].map { |elem| elem ** 2 }.sum
        [1, 2, 3].collect(&:count).sum(10)

        # good
        [1, 2, 3].sum(10)
        [1, 2, 3].sum { |elem| elem ** 2 }
        [1, 2, 3].sum(10, &:count)
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | OnlySumOrWithInitialValue
        | `false`
        | Boolean
        |===

        === References

        * https://blog.bigbinary.com/2016/11/02/ruby-2-4-introduces-enumerable-sum.html

        == Performance/TimesMap

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always (Unsafe)
        | 0.36
        | 1.13
        |===

        Checks for .times.map calls.
        In most cases such calls can be replaced
        with an explicit array creation.

        === Safety

        This cop's autocorrection is unsafe because `Integer#times` does nothing if receiver is 0
        or less. However, `Array.new` raises an error if argument is less than 0.

        For example:

        [source,ruby]
        ----
        -1.times{}    # does nothing
        Array.new(-1) # ArgumentError: negative array size
        ----

        === Examples

        [source,ruby]
        ----
        # bad
        9.times.map do |i|
          i.to_s
        end

        # good
        Array.new(9) do |i|
          i.to_s
        end
        ----

        == Performance/UnfreezeString

        NOTE: Required Ruby version: 2.3

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always (Unsafe)
        | 0.50
        | 1.9
        |===

        In Ruby 2.3 or later, use unary plus operator to unfreeze a string
        literal instead of `String#dup` and `String.new`.
        Unary plus operator is faster than `String#dup`.

        === Safety

        This cop's autocorrection is unsafe because `String.new` (without operator) is not
        exactly the same as `+''`. These differ in encoding. `String.new.encoding` is always
        `ASCII-8BIT`. However, `(+'').encoding` is the same as script encoding(e.g. `UTF-8`).
        if you expect `ASCII-8BIT` encoding, disable this cop.

        === Examples

        [source,ruby]
        ----
        # bad
        ''.dup          # when Ruby 3.2 or lower
        "something".dup # when Ruby 3.2 or lower
        String.new
        String.new('')
        String.new('something')

        # good
        +'something'
        +''
        ----

        == Performance/UriDefaultParser

        |===
        | Enabled by default | Safe | Supports autocorrection | Version Added | Version Changed

        | Enabled
        | Yes
        | Always
        | 0.50
        | -
        |===

        Identifies places where `URI::Parser.new` can be replaced by `URI::DEFAULT_PARSER`.

        === Examples

        [source,ruby]
        ----
        # bad
        URI::Parser.new

        # good
        URI::DEFAULT_PARSER
        ----
  recorded_at: Mon, 27 May 2024 05:30:43 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-performance/v1.21.0/config/default.yml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '13344'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"d70422d2e1ad40ac9f3b4fce3ca964adb6b3eeaa62d148582f8918bc0ee7bcd4"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 8096:3BC15A:133204B:146B022:66541A7C
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 27 May 2024 05:30:43 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-fra-eddf8230089-FRA
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1716787843.293776,VS0,VE181
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - 7af1a31d89cc1fa0503ebec07214ee3c490b25fa
      Expires:
      - Mon, 27 May 2024 05:35:43 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        # This is the default configuration file.

        Performance:
          Enabled: true
          DocumentationBaseURL: https://docs.rubocop.org/rubocop-performance

        Performance/AncestorsInclude:
          Description: 'Use `A <= B` instead of `A.ancestors.include?(B)`.'
          Reference: 'https://github.com/fastruby/fast-ruby#ancestorsinclude-vs--code'
          Enabled: 'pending'
          Safe: false
          VersionAdded: '1.7'

        Performance/ArraySemiInfiniteRangeSlice:
          Description: 'Identifies places where slicing arrays with semi-infinite ranges can be replaced by `Array#take` and `Array#drop`.'
          # This cop was created due to a mistake in microbenchmark.
          # Refer https://github.com/rubocop/rubocop-performance/pull/175#issuecomment-731892717
          Enabled: false
          # Unsafe for string slices because strings do not have `#take` and `#drop` methods.
          Safe: false
          VersionAdded: '1.9'

        Performance/BigDecimalWithNumericArgument:
          Description: 'Convert numeric literal to string and pass it to `BigDecimal`.'
          Enabled: 'pending'
          VersionAdded: '1.7'

        Performance/BindCall:
          Description: 'Use `bind_call(obj, args, ...)` instead of `bind(obj).call(args, ...)`.'
          Enabled: true
          VersionAdded: '1.6'

        Performance/BlockGivenWithExplicitBlock:
          Description: 'Check block argument explicitly instead of using `block_given?`.'
          Enabled: pending
          VersionAdded: '1.9'

        Performance/Caller:
          Description: >-
                     Use `caller(n..n)` instead of `caller`.
          Enabled: true
          VersionAdded: '0.49'
          VersionChanged: '1.9'

        Performance/CaseWhenSplat:
          Description: >-
                         Reordering `when` conditions with a splat to the end
                         of the `when` branches can improve performance.
          Enabled: false
          SafeAutoCorrect: false
          VersionAdded: '0.34'
          VersionChanged: '1.13'

        Performance/Casecmp:
          Description: >-
                     Use `casecmp` rather than `downcase ==`, `upcase ==`, `== downcase`, or `== upcase`..
          Reference: 'https://github.com/fastruby/fast-ruby#stringcasecmp-vs--stringcasecmp-vs-stringdowncase---code'
          Enabled: false
          Safe: false
          VersionAdded: '0.36'
          VersionChanged: '1.21'

        Performance/ChainArrayAllocation:
          Description: >-
                          Instead of chaining array methods that allocate new arrays, mutate an
                          existing array.
          Reference: 'https://twitter.com/schneems/status/1034123879978029057'
          Enabled: false
          VersionAdded: '0.59'

        Performance/CollectionLiteralInLoop:
          Description: 'Extract Array and Hash literals outside of loops into local variables or constants.'
          Enabled: 'pending'
          VersionAdded: '1.8'
          # Min number of elements to consider an offense
          MinSize: 1

        Performance/CompareWithBlock:
          Description: 'Use `sort_by(&:foo)` instead of `sort { |a, b| a.foo <=> b.foo }`.'
          Enabled: true
          VersionAdded: '0.46'

        Performance/ConcurrentMonotonicTime:
          Description: 'Use `Process.clock_gettime(Process::CLOCK_MONOTONIC)` instead of `Concurrent.monotonic_time`.'
          Reference: 'https://github.com/rails/rails/pull/43502'
          Enabled: pending
          VersionAdded: '1.12'

        Performance/ConstantRegexp:
          Description: 'Finds regular expressions with dynamic components that are all constants.'
          Enabled: pending
          VersionAdded: '1.9'
          VersionChanged: '1.10'

        Performance/Count:
          Description: >-
                          Use `count` instead of `{select,find_all,filter,reject}...{size,count,length}`.
          # This cop has known compatibility issues with `ActiveRecord` and other
          # frameworks. ActiveRecord's `count` ignores the block that is passed to it.
          # For more information, see the documentation in the cop itself.
          SafeAutoCorrect: false
          Enabled: true
          VersionAdded: '0.31'
          VersionChanged: '1.8'

        Performance/DeletePrefix:
          Description: 'Use `delete_prefix` instead of `gsub`.'
          Enabled: true
          Safe: false
          SafeMultiline: true
          VersionAdded: '1.6'
          VersionChanged: '1.11'

        Performance/DeleteSuffix:
          Description: 'Use `delete_suffix` instead of `gsub`.'
          Enabled: true
          Safe: false
          SafeMultiline: true
          VersionAdded: '1.6'
          VersionChanged: '1.11'

        Performance/Detect:
          Description: >-
                          Use `detect` instead of `select.first`, `find_all.first`, `filter.first`,
                          `select.last`, `find_all.last`, and `filter.last`.
          Reference: 'https://github.com/fastruby/fast-ruby#enumerabledetect-vs-enumerableselectfirst-code'
          # This cop has known compatibility issues with `ActiveRecord` and other
          # frameworks. `ActiveRecord` does not implement a `detect` method and `find`
          # has its own meaning. Correcting `ActiveRecord` methods with this cop
          # should be considered unsafe.
          SafeAutoCorrect: false
          Enabled: true
          VersionAdded: '0.30'
          VersionChanged: '1.8'

        Performance/DoubleStartEndWith:
          Description: >-
                          Use `str.{start,end}_with?(x, ..., y, ...)`
                          instead of `str.{start,end}_with?(x, ...) || str.{start,end}_with?(y, ...)`.
          Enabled: true
          VersionAdded: '0.36'
          VersionChanged: '0.48'
          # Used to check for `starts_with?` and `ends_with?`.
          # These methods are defined by Active Support.
          IncludeActiveSupportAliases: false

        Performance/EndWith:
          Description: 'Use `end_with?` instead of a regex match anchored to the end of a string.'
          Reference: 'https://github.com/fastruby/fast-ruby#stringmatch-vs-stringmatch-vs-stringstart_withstringend_with-code-start-code-end'
          # This will change to a new method call which isn't guaranteed to be on the
          # object. Switching these methods has to be done with knowledge of the types
          # of the variables which rubocop doesn't have.
          SafeAutoCorrect: false
          Enabled: true
          SafeMultiline: true
          VersionAdded: '0.36'
          VersionChanged: '1.10'

        Performance/FixedSize:
          Description: 'Do not compute the size of statically sized objects except in constants.'
          Enabled: true
          VersionAdded: '0.35'

        Performance/FlatMap:
          Description: >-
                          Use `Enumerable#flat_map`
                          instead of `Enumerable#map...Array#flatten(1)`
                          or `Enumerable#collect..Array#flatten(1)`.
          Reference: 'https://github.com/fastruby/fast-ruby#enumerablemaparrayflatten-vs-enumerableflat_map-code'
          Enabled: true
          VersionAdded: '0.30'
          EnabledForFlattenWithoutParams: false
          # If enabled, this cop will warn about usages of
          # `flatten` being called without any parameters.
          # This can be dangerous since `flat_map` will only flatten 1 level, and
          # `flatten` without any parameters can flatten multiple levels.

        Performance/InefficientHashSearch:
          Description: 'Use `key?` or `value?` instead of `keys.include?` or `values.include?`.'
          Reference: 'https://github.com/fastruby/fast-ruby#hashkey-instead-of-hashkeysinclude-code'
          Enabled: true
          VersionAdded: '0.56'
          Safe: false

        Performance/IoReadlines:
          Description: 'Use `IO.each_line` (`IO#each_line`) instead of `IO.readlines` (`IO#readlines`).'
          Reference: 'https://docs.gitlab.com/ee/development/performance.html#reading-from-files-and-other-data-sources'
          Enabled: false
          VersionAdded: '1.7'

        Performance/MapCompact:
          Description: 'Use `filter_map` instead of `collection.map(&:do_something).compact`.'
          Enabled: pending
          SafeAutoCorrect: false
          VersionAdded: '1.11'

        Performance/MapMethodChain:
          Description: 'Checks if the `map` method is used in a chain.'
          Enabled: pending
          Safe: false
          VersionAdded: '1.19'

        Performance/MethodObjectAsBlock:
          Description: 'Use block explicitly instead of block-passing a method object.'
          Reference: 'https://github.com/fastruby/fast-ruby#normal-way-to-apply-method-vs-method-code'
          Enabled: pending
          VersionAdded: '1.9'

        Performance/OpenStruct:
          Description: 'Use `Struct` instead of `OpenStruct`.'
          Enabled: false
          VersionAdded: '0.61'
          Safe: false

        Performance/RangeInclude:
          Description: 'Use `Range#cover?` instead of `Range#include?` (or `Range#member?`).'
          Reference: 'https://github.com/fastruby/fast-ruby#cover-vs-include-code'
          Enabled: true
          VersionAdded: '0.36'
          VersionChanged: '1.7'
          Safe: false

        Performance/RedundantBlockCall:
          Description: 'Use `yield` instead of `block.call`.'
          Reference: 'https://github.com/fastruby/fast-ruby#proccall-and-block-arguments-vs-yieldcode'
          Enabled: true
          VersionAdded: '0.36'

        Performance/RedundantEqualityComparisonBlock:
          Description: >-
                          Checks for uses `Enumerable#all?`, `Enumerable#any?`, `Enumerable#one?`,
                          or `Enumerable#none?` are compared with `===` or similar methods in block.
          Reference: 'https://github.com/rails/rails/pull/41363'
          Enabled: pending
          Safe: false
          AllowRegexpMatch: true
          VersionAdded: '1.10'

        Performance/RedundantMatch:
          Description: >-
                          Use `=~` instead of `String#match` or `Regexp#match` in a context where the
                          returned `MatchData` is not needed.
          Enabled: true
          VersionAdded: '0.36'

        Performance/RedundantMerge:
          Description: 'Use Hash#[]=, rather than Hash#merge! with a single key-value pair.'
          Reference: 'https://github.com/fastruby/fast-ruby#hashmerge-vs-hash-code'
          Enabled: true
          Safe: false
          VersionAdded: '0.36'
          VersionChanged: '1.11'
          # Max number of key-value pairs to consider an offense
          MaxKeyValuePairs: 2

        Performance/RedundantSortBlock:
          Description: 'Use `sort` instead of `sort { |a, b| a <=> b }`.'
          Enabled: 'pending'
          VersionAdded: '1.7'

        Performance/RedundantSplitRegexpArgument:
          Description: 'Identifies places where `split` argument can be replaced from a deterministic regexp to a string.'
          Enabled: pending
          VersionAdded: '1.10'

        Performance/RedundantStringChars:
          Description: 'Checks for redundant `String#chars`.'
          Enabled: 'pending'
          VersionAdded: '1.7'

        Performance/RegexpMatch:
          Description: >-
                          Use `match?` instead of `Regexp#match`, `String#match`, `Symbol#match`,
                          `Regexp#===`, or `=~` when `MatchData` is not used.
          Reference: 'https://github.com/fastruby/fast-ruby#regexp-vs-regexpmatch-vs-regexpmatch-vs-stringmatch-vs-string-vs-stringmatch-code-'
          Enabled: true
          VersionAdded: '0.47'

        Performance/ReverseEach:
          Description: 'Use `reverse_each` instead of `reverse.each`.'
          Reference: 'https://github.com/fastruby/fast-ruby#enumerablereverseeach-vs-enumerablereverse_each-code'
          Enabled: true
          VersionAdded: '0.30'

        Performance/ReverseFirst:
          Description: 'Use `last(n).reverse` instead of `reverse.first(n)`.'
          Enabled: 'pending'
          VersionAdded: '1.7'

        Performance/SelectMap:
          Description: 'Use `filter_map` instead of `ary.select(&:foo).map(&:bar)`.'
          Enabled: false
          VersionAdded: '1.11'

        Performance/Size:
          Description: >-
                          Use `size` instead of `count` for counting
                          the number of elements in `Array` and `Hash`.
          Reference: 'https://github.com/fastruby/fast-ruby#arraylength-vs-arraysize-vs-arraycount-code'
          Enabled: true
          VersionAdded: '0.30'

        Performance/SortReverse:
          Description: 'Use `sort.reverse` instead of `sort { |a, b| b <=> a }`.'
          Enabled: 'pending'
          VersionAdded: '1.7'

        Performance/Squeeze:
          Description: "Use `squeeze('a')` instead of `gsub(/a+/, 'a')`."
          Reference: 'https://github.com/fastruby/fast-ruby#remove-extra-spaces-or-other-contiguous-characters-code'
          Enabled: 'pending'
          VersionAdded: '1.7'

        Performance/StartWith:
          Description: 'Use `start_with?` instead of a regex match anchored to the beginning of a string.'
          Reference: 'https://github.com/fastruby/fast-ruby#stringmatch-vs-stringmatch-vs-stringstart_withstringend_with-code-start-code-end'
          # This will change to a new method call which isn't guaranteed to be on the
          # object. Switching these methods has to be done with knowledge of the types
          # of the variables which rubocop doesn't have.
          SafeAutoCorrect: false
          Enabled: true
          SafeMultiline: true
          VersionAdded: '0.36'
          VersionChanged: '1.10'

        Performance/StringIdentifierArgument:
          Description: 'Use symbol identifier argument instead of string identifier argument.'
          Enabled: pending
          VersionAdded: '1.13'

        Performance/StringInclude:
          Description: 'Use `String#include?` instead of a regex match with literal-only pattern.'
          Enabled: 'pending'
          SafeAutoCorrect: false
          VersionAdded: '1.7'
          VersionChanged: '1.12'

        Performance/StringReplacement:
          Description: >-
                          Use `tr` instead of `gsub` when you are replacing the same
                          number of characters. Use `delete` instead of `gsub` when
                          you are deleting characters.
          Reference: 'https://github.com/fastruby/fast-ruby#stringgsub-vs-stringtr-code'
          Enabled: true
          VersionAdded: '0.33'

        Performance/Sum:
          Description: 'Use `sum` instead of a custom array summation.'
          SafeAutoCorrect: false
          Reference: 'https://blog.bigbinary.com/2016/11/02/ruby-2-4-introduces-enumerable-sum.html'
          Enabled: 'pending'
          VersionAdded: '1.8'
          VersionChanged: '1.13'
          OnlySumOrWithInitialValue: false

        Performance/TimesMap:
          Description: 'Checks for .times.map calls.'
          Enabled: true
          # See https://github.com/rubocop/rubocop/issues/4658
          SafeAutoCorrect: false
          VersionAdded: '0.36'
          VersionChanged: '1.13'

        Performance/UnfreezeString:
          Description: 'Use unary plus to get an unfrozen string literal.'
          Enabled: true
          SafeAutoCorrect: false
          VersionAdded: '0.50'
          VersionChanged: '1.9'

        Performance/UriDefaultParser:
          Description: 'Use `URI::DEFAULT_PARSER` instead of `URI::Parser.new`.'
          Enabled: true
          VersionAdded: '0.50'
  recorded_at: Mon, 27 May 2024 05:30:43 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-rails/v2.25.0/docs/modules/ROOT/pages/cops.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '9460'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"c39b737456ce772594861fd0b02d39f1e49ff46e93bc85e4eaf9a9baae823c68"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 21D8:70030:130B566:144394F:66541A83
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 27 May 2024 05:30:43 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-fra-eddf8230115-FRA
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1716787844.581403,VS0,VE183
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - d80f54e12d6542ac28e48a2f5af9f1badac80e33
      Expires:
      - Mon, 27 May 2024 05:35:43 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        = Cops

        In RuboCop lingo the various checks performed on the code are called cops.
        Each cop is responsible for detecting one particular offense.
        RuboCop Rails has only one Rails department.

        Some of the Rails cops have configuration options, allowing them to
        enforce different coding conventions.

        == Rails

        Rails cops check for Rails best practices and coding conventions. Many of the them are
        based on the https://rails.rubystyle.guide/[Rails Style Guide].

        // START_COP_LIST

        === Department xref:cops_rails.adoc[Rails]

        * xref:cops_rails.adoc#railsactioncontrollerflashbeforerender[Rails/ActionControllerFlashBeforeRender]
        * xref:cops_rails.adoc#railsactioncontrollertestcase[Rails/ActionControllerTestCase]
        * xref:cops_rails.adoc#railsactionfilter[Rails/ActionFilter]
        * xref:cops_rails.adoc#railsactionorder[Rails/ActionOrder]
        * xref:cops_rails.adoc#railsactiverecordaliases[Rails/ActiveRecordAliases]
        * xref:cops_rails.adoc#railsactiverecordcallbacksorder[Rails/ActiveRecordCallbacksOrder]
        * xref:cops_rails.adoc#railsactiverecordoverride[Rails/ActiveRecordOverride]
        * xref:cops_rails.adoc#railsactivesupportaliases[Rails/ActiveSupportAliases]
        * xref:cops_rails.adoc#railsactivesupportonload[Rails/ActiveSupportOnLoad]
        * xref:cops_rails.adoc#railsaddcolumnindex[Rails/AddColumnIndex]
        * xref:cops_rails.adoc#railsaftercommitoverride[Rails/AfterCommitOverride]
        * xref:cops_rails.adoc#railsapplicationcontroller[Rails/ApplicationController]
        * xref:cops_rails.adoc#railsapplicationjob[Rails/ApplicationJob]
        * xref:cops_rails.adoc#railsapplicationmailer[Rails/ApplicationMailer]
        * xref:cops_rails.adoc#railsapplicationrecord[Rails/ApplicationRecord]
        * xref:cops_rails.adoc#railsarelstar[Rails/ArelStar]
        * xref:cops_rails.adoc#railsassertnot[Rails/AssertNot]
        * xref:cops_rails.adoc#railsattributedefaultblockvalue[Rails/AttributeDefaultBlockValue]
        * xref:cops_rails.adoc#railsbelongsto[Rails/BelongsTo]
        * xref:cops_rails.adoc#railsblank[Rails/Blank]
        * xref:cops_rails.adoc#railsbulkchangetable[Rails/BulkChangeTable]
        * xref:cops_rails.adoc#railscompactblank[Rails/CompactBlank]
        * xref:cops_rails.adoc#railscontenttag[Rails/ContentTag]
        * xref:cops_rails.adoc#railscreatetablewithtimestamps[Rails/CreateTableWithTimestamps]
        * xref:cops_rails.adoc#railsdangerouscolumnnames[Rails/DangerousColumnNames]
        * xref:cops_rails.adoc#railsdate[Rails/Date]
        * xref:cops_rails.adoc#railsdefaultscope[Rails/DefaultScope]
        * xref:cops_rails.adoc#railsdelegate[Rails/Delegate]
        * xref:cops_rails.adoc#railsdelegateallowblank[Rails/DelegateAllowBlank]
        * xref:cops_rails.adoc#railsdeprecatedactivemodelerrorsmethods[Rails/DeprecatedActiveModelErrorsMethods]
        * xref:cops_rails.adoc#railsdotseparatedkeys[Rails/DotSeparatedKeys]
        * xref:cops_rails.adoc#railsduplicateassociation[Rails/DuplicateAssociation]
        * xref:cops_rails.adoc#railsduplicatescope[Rails/DuplicateScope]
        * xref:cops_rails.adoc#railsdurationarithmetic[Rails/DurationArithmetic]
        * xref:cops_rails.adoc#railsdynamicfindby[Rails/DynamicFindBy]
        * xref:cops_rails.adoc#railseagerevaluationlogmessage[Rails/EagerEvaluationLogMessage]
        * xref:cops_rails.adoc#railsenumhash[Rails/EnumHash]
        * xref:cops_rails.adoc#railsenumuniqueness[Rails/EnumUniqueness]
        * xref:cops_rails.adoc#railsenvlocal[Rails/EnvLocal]
        * xref:cops_rails.adoc#railsenvironmentcomparison[Rails/EnvironmentComparison]
        * xref:cops_rails.adoc#railsenvironmentvariableaccess[Rails/EnvironmentVariableAccess]
        * xref:cops_rails.adoc#railsexit[Rails/Exit]
        * xref:cops_rails.adoc#railsexpandeddaterange[Rails/ExpandedDateRange]
        * xref:cops_rails.adoc#railsfilepath[Rails/FilePath]
        * xref:cops_rails.adoc#railsfindby[Rails/FindBy]
        * xref:cops_rails.adoc#railsfindbyid[Rails/FindById]
        * xref:cops_rails.adoc#railsfindeach[Rails/FindEach]
        * xref:cops_rails.adoc#railsfreezetime[Rails/FreezeTime]
        * xref:cops_rails.adoc#railshasandbelongstomany[Rails/HasAndBelongsToMany]
        * xref:cops_rails.adoc#railshasmanyorhasonedependent[Rails/HasManyOrHasOneDependent]
        * xref:cops_rails.adoc#railshelperinstancevariable[Rails/HelperInstanceVariable]
        * xref:cops_rails.adoc#railshttppositionalarguments[Rails/HttpPositionalArguments]
        * xref:cops_rails.adoc#railshttpstatus[Rails/HttpStatus]
        * xref:cops_rails.adoc#railsi18nlazylookup[Rails/I18nLazyLookup]
        * xref:cops_rails.adoc#railsi18nlocaleassignment[Rails/I18nLocaleAssignment]
        * xref:cops_rails.adoc#railsi18nlocaletexts[Rails/I18nLocaleTexts]
        * xref:cops_rails.adoc#railsignoredcolumnsassignment[Rails/IgnoredColumnsAssignment]
        * xref:cops_rails.adoc#railsignoredskipactionfilteroption[Rails/IgnoredSkipActionFilterOption]
        * xref:cops_rails.adoc#railsindexby[Rails/IndexBy]
        * xref:cops_rails.adoc#railsindexwith[Rails/IndexWith]
        * xref:cops_rails.adoc#railsinquiry[Rails/Inquiry]
        * xref:cops_rails.adoc#railsinverseof[Rails/InverseOf]
        * xref:cops_rails.adoc#railslexicallyscopedactionfilter[Rails/LexicallyScopedActionFilter]
        * xref:cops_rails.adoc#railslinktoblank[Rails/LinkToBlank]
        * xref:cops_rails.adoc#railsmailername[Rails/MailerName]
        * xref:cops_rails.adoc#railsmatchroute[Rails/MatchRoute]
        * xref:cops_rails.adoc#railsmigrationclassname[Rails/MigrationClassName]
        * xref:cops_rails.adoc#railsnegateinclude[Rails/NegateInclude]
        * xref:cops_rails.adoc#railsnotnullcolumn[Rails/NotNullColumn]
        * xref:cops_rails.adoc#railsorderbyid[Rails/OrderById]
        * xref:cops_rails.adoc#railsoutput[Rails/Output]
        * xref:cops_rails.adoc#railsoutputsafety[Rails/OutputSafety]
        * xref:cops_rails.adoc#railspick[Rails/Pick]
        * xref:cops_rails.adoc#railspluck[Rails/Pluck]
        * xref:cops_rails.adoc#railspluckid[Rails/PluckId]
        * xref:cops_rails.adoc#railspluckinwhere[Rails/PluckInWhere]
        * xref:cops_rails.adoc#railspluralizationgrammar[Rails/PluralizationGrammar]
        * xref:cops_rails.adoc#railspresence[Rails/Presence]
        * xref:cops_rails.adoc#railspresent[Rails/Present]
        * xref:cops_rails.adoc#railsrakeenvironment[Rails/RakeEnvironment]
        * xref:cops_rails.adoc#railsreadwriteattribute[Rails/ReadWriteAttribute]
        * xref:cops_rails.adoc#railsredundantactiverecordallmethod[Rails/RedundantActiveRecordAllMethod]
        * xref:cops_rails.adoc#railsredundantallownil[Rails/RedundantAllowNil]
        * xref:cops_rails.adoc#railsredundantforeignkey[Rails/RedundantForeignKey]
        * xref:cops_rails.adoc#railsredundantpresencevalidationonbelongsto[Rails/RedundantPresenceValidationOnBelongsTo]
        * xref:cops_rails.adoc#railsredundantreceiverinwithoptions[Rails/RedundantReceiverInWithOptions]
        * xref:cops_rails.adoc#railsredundanttravelback[Rails/RedundantTravelBack]
        * xref:cops_rails.adoc#railsreflectionclassname[Rails/ReflectionClassName]
        * xref:cops_rails.adoc#railsrefutemethods[Rails/RefuteMethods]
        * xref:cops_rails.adoc#railsrelativedateconstant[Rails/RelativeDateConstant]
        * xref:cops_rails.adoc#railsrenderinline[Rails/RenderInline]
        * xref:cops_rails.adoc#railsrenderplaintext[Rails/RenderPlainText]
        * xref:cops_rails.adoc#railsrequestreferer[Rails/RequestReferer]
        * xref:cops_rails.adoc#railsrequiredependency[Rails/RequireDependency]
        * xref:cops_rails.adoc#railsresponseparsedbody[Rails/ResponseParsedBody]
        * xref:cops_rails.adoc#railsreversiblemigration[Rails/ReversibleMigration]
        * xref:cops_rails.adoc#railsreversiblemigrationmethoddefinition[Rails/ReversibleMigrationMethodDefinition]
        * xref:cops_rails.adoc#railsrootjoinchain[Rails/RootJoinChain]
        * xref:cops_rails.adoc#railsrootpathnamemethods[Rails/RootPathnameMethods]
        * xref:cops_rails.adoc#railsrootpublicpath[Rails/RootPublicPath]
        * xref:cops_rails.adoc#railssafenavigation[Rails/SafeNavigation]
        * xref:cops_rails.adoc#railssafenavigationwithblank[Rails/SafeNavigationWithBlank]
        * xref:cops_rails.adoc#railssavebang[Rails/SaveBang]
        * xref:cops_rails.adoc#railsschemacomment[Rails/SchemaComment]
        * xref:cops_rails.adoc#railsscopeargs[Rails/ScopeArgs]
        * xref:cops_rails.adoc#railsselectmap[Rails/SelectMap]
        * xref:cops_rails.adoc#railsshorti18n[Rails/ShortI18n]
        * xref:cops_rails.adoc#railsskipsmodelvalidations[Rails/SkipsModelValidations]
        * xref:cops_rails.adoc#railssquishedsqlheredocs[Rails/SquishedSQLHeredocs]
        * xref:cops_rails.adoc#railsstripheredoc[Rails/StripHeredoc]
        * xref:cops_rails.adoc#railstablenameassignment[Rails/TableNameAssignment]
        * xref:cops_rails.adoc#railsthreestatebooleancolumn[Rails/ThreeStateBooleanColumn]
        * xref:cops_rails.adoc#railstimezone[Rails/TimeZone]
        * xref:cops_rails.adoc#railstimezoneassignment[Rails/TimeZoneAssignment]
        * xref:cops_rails.adoc#railstoformatteds[Rails/ToFormattedS]
        * xref:cops_rails.adoc#railstoswithargument[Rails/ToSWithArgument]
        * xref:cops_rails.adoc#railstoplevelhashwithindifferentaccess[Rails/TopLevelHashWithIndifferentAccess]
        * xref:cops_rails.adoc#railstransactionexitstatement[Rails/TransactionExitStatement]
        * xref:cops_rails.adoc#railsuniqbeforepluck[Rails/UniqBeforePluck]
        * xref:cops_rails.adoc#railsuniquevalidationwithoutindex[Rails/UniqueValidationWithoutIndex]
        * xref:cops_rails.adoc#railsunknownenv[Rails/UnknownEnv]
        * xref:cops_rails.adoc#railsunusedignoredcolumns[Rails/UnusedIgnoredColumns]
        * xref:cops_rails.adoc#railsunusedrendercontent[Rails/UnusedRenderContent]
        * xref:cops_rails.adoc#railsvalidation[Rails/Validation]
        * xref:cops_rails.adoc#railswhereequals[Rails/WhereEquals]
        * xref:cops_rails.adoc#railswhereexists[Rails/WhereExists]
        * xref:cops_rails.adoc#railswheremissing[Rails/WhereMissing]
        * xref:cops_rails.adoc#railswherenot[Rails/WhereNot]
        * xref:cops_rails.adoc#railswherenotwithmultipleconditions[Rails/WhereNotWithMultipleConditions]
        * xref:cops_rails.adoc#railswhererange[Rails/WhereRange]

        // END_COP_LIST
  recorded_at: Mon, 27 May 2024 05:30:43 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-rails/v2.25.0/docs/modules/ROOT/pages/cops_rails.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '128878'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"841dc4fb5532ebf23c8e88fede59e18f6c2bc43222ca07d4f7f066812b495e76"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 0FF2:6D2AE:1313B44:144BF58:66541A82
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 27 May 2024 05:30:44 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-fra-eddf8230095-FRA
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1716787844.878462,VS0,VE199
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - af118d6c78b29ca30c9d2c2652283886d88702a8
      Expires:
      - Mon, 27 May 2024 05:35:44 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 27 May 2024 05:30:44 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-rails/v2.25.0/config/default.yml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '37130'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"da30a1ca0b0bc211467ba9a4d82a3ba8b7fd3e24345e01772340a05c2df033d5"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - B016:3DF3CA:13E2B1D:151AF60:66541A80
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 27 May 2024 05:30:44 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-fra-eddf8230084-FRA
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1716787844.261454,VS0,VE211
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - dba6a547d133088b99522db395c4937b31055e93
      Expires:
      - Mon, 27 May 2024 05:35:44 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        # Common configuration.

        inherit_mode:
          merge:
            - Exclude

        AllCops:
          Exclude:
            - app/assets/**/*
            - bin/*
            # Exclude db/schema.rb and db/[CONFIGURATION_NAMESPACE]_schema.rb by default.
            # See: https://guides.rubyonrails.org/active_record_multiple_databases.html#setting-up-your-application
            - db/*schema.rb
            - log/**/*
            - public/**/*
            - storage/**/*
          # Enable checking Active Support extensions.
          # See: https://docs.rubocop.org/rubocop/configuration.html#enable-checking-active-support-extensions
          ActiveSupportExtensionsEnabled: true
          # What version of Rails is the inspected code using?  If a value is specified
          # for TargetRailsVersion then it is used.  Acceptable values are specified
          # as a float (i.e. 5.1); the patch version of Rails should not be included.
          # If TargetRailsVersion is not set, RuboCop will parse the Gemfile.lock or
          # gems.locked file to find the version of Rails that has been bound to the
          # application.  If neither of those files exist, RuboCop will use Rails 5.0
          # as the default.
          TargetRailsVersion: ~

        Lint/NumberConversion:
          # Add Rails' duration methods to the ignore list for `Lint/NumberConversion`
          # so that calling `to_i` on one of these does not register an offense.
          # See: https://github.com/rubocop/rubocop/issues/8950
          AllowedMethods:
            - ago
            - from_now
            - second
            - seconds
            - minute
            - minutes
            - hour
            - hours
            - day
            - days
            - week
            - weeks
            - fortnight
            - fortnights
            - in_milliseconds
          AllowedPatterns: []

        Lint/RedundantSafeNavigation:
          # Add `presence` and `present?` methods to the default of the RuboCop core.
          # https://github.com/rubocop/rubocop/blob/v1.51.0/config/default.yml#L2148-L2159
          AllowedMethods:
            - instance_of?
            - kind_of?
            - is_a?
            - eql?
            - respond_to?
            - equal?
            - presence
            - present?

        Lint/SafeNavigationChain:
          # Add `presence_in` method to the default of the RuboCop core:
          # https://github.com/rubocop/rubocop/blob/v1.56.0/config/default.yml#L2265-L2271
          AllowedMethods:
            - present?
            - blank?
            - presence
            - presence_in
            - try
            - try!
            - in?

        Rails:
          Enabled: true
          DocumentationBaseURL: https://docs.rubocop.org/rubocop-rails

        Rails/ActionControllerFlashBeforeRender:
          Description: 'Use `flash.now` instead of `flash` before `render`.'
          Enabled: 'pending'
          SafeAutoCorrect: false
          VersionAdded: '2.16'

        Rails/ActionControllerTestCase:
          Description: 'Use `ActionDispatch::IntegrationTest` instead of `ActionController::TestCase`.'
          StyleGuide: 'https://rails.rubystyle.guide/#integration-testing'
          Reference: 'https://api.rubyonrails.org/classes/ActionController/TestCase.html'
          Enabled: 'pending'
          SafeAutoCorrect: false
          VersionAdded: '2.14'
          Include:
            - '**/test/**/*.rb'

        Rails/ActionFilter:
          Description: 'Enforces consistent use of action filter methods.'
          Enabled: false
          VersionAdded: '0.19'
          VersionChanged: '2.22'
          EnforcedStyle: action
          SupportedStyles:
            - action
            - filter
          Include:
            - app/controllers/**/*.rb
            - app/mailers/**/*.rb

        Rails/ActionOrder:
          Description: 'Enforce consistent ordering of controller actions.'
          Enabled: pending
          VersionAdded: '2.17'
          ExpectedOrder:
            - index
            - show
            - new
            - edit
            - create
            - update
            - destroy
          Include:
            - app/controllers/**/*.rb

        Rails/ActiveRecordAliases:
          Description: >-
                          Avoid Active Record aliases:
                          Use `update` instead of `update_attributes`.
                          Use `update!` instead of `update_attributes!`.
          Enabled: true
          VersionAdded: '0.53'
          SafeAutoCorrect: false

        Rails/ActiveRecordCallbacksOrder:
          Description: 'Order callback declarations in the order in which they will be executed.'
          StyleGuide: 'https://rails.rubystyle.guide/#callbacks-order'
          Enabled: 'pending'
          VersionAdded: '2.7'
          Include:
            - app/models/**/*.rb

        Rails/ActiveRecordOverride:
          Description: >-
                          Check for overriding Active Record methods instead of using
                          callbacks.
          Enabled: true
          Severity: warning
          VersionAdded: '0.67'
          VersionChanged: '2.18'
          Include:
            - app/models/**/*.rb

        Rails/ActiveSupportAliases:
          Description: >-
                          Avoid ActiveSupport aliases of standard ruby methods:
                          `String#starts_with?`, `String#ends_with?`,
                          `Array#append`, `Array#prepend`.
          Enabled: true
          VersionAdded: '0.48'

        Rails/ActiveSupportOnLoad:
          Description: 'Use `ActiveSupport.on_load(...)` to patch Rails framework classes.'
          Enabled: 'pending'
          Reference:
            - 'https://api.rubyonrails.org/classes/ActiveSupport/LazyLoadHooks.html'
            - 'https://guides.rubyonrails.org/engines.html#available-load-hooks'
          SafeAutoCorrect: false
          VersionAdded: '2.16'
          VersionChanged: '2.24'

        Rails/AddColumnIndex:
          Description: >-
            Rails migrations don't make use of a given `index` key, but also
            doesn't given an error when it's used, so it makes it seem like an
            index might be used.
          Enabled: pending
          VersionAdded: '2.11'
          VersionChanged: '2.20'
          Include:
            - db/**/*.rb

        Rails/AfterCommitOverride:
          Description: >-
                          Enforces that there is only one call to `after_commit`
                          (and its aliases - `after_create_commit`, `after_update_commit`,
                          and `after_destroy_commit`) with the same callback name per model.
          Enabled: 'pending'
          VersionAdded: '2.8'

        Rails/ApplicationController:
          Description: 'Check that controllers subclass ApplicationController.'
          Enabled: true
          SafeAutoCorrect: false
          VersionAdded: '2.4'
          VersionChanged: '2.5'

        Rails/ApplicationJob:
          Description: 'Check that jobs subclass ApplicationJob.'
          Enabled: true
          SafeAutoCorrect: false
          VersionAdded: '0.49'
          VersionChanged: '2.5'

        Rails/ApplicationMailer:
          Description: 'Check that mailers subclass ApplicationMailer.'
          Enabled: true
          SafeAutoCorrect: false
          VersionAdded: '2.4'
          VersionChanged: '2.5'

        Rails/ApplicationRecord:
          Description: 'Check that models subclass ApplicationRecord.'
          Enabled: true
          SafeAutoCorrect: false
          VersionAdded: '0.49'
          VersionChanged: '2.5'

        Rails/ArelStar:
          Description: 'Enforces `Arel.star` instead of `"*"` for expanded columns.'
          Enabled: true
          SafeAutoCorrect: false
          VersionAdded: '2.9'

        Rails/AssertNot:
          Description: 'Use `assert_not` instead of `assert !`.'
          Enabled: true
          VersionAdded: '0.56'
          Include:
            - '**/test/**/*'

        Rails/AttributeDefaultBlockValue:
          Description: 'Pass method call in block for attribute option `default`.'
          Enabled: pending
          VersionAdded: '2.9'
          Include:
            - 'app/models/**/*'

        Rails/BelongsTo:
          Description: >-
                          Use `optional: true` instead of `required: false` for
                          `belongs_to` relations.
          Reference:
            - https://guides.rubyonrails.org/5_0_release_notes.html
            - https://github.com/rails/rails/pull/18937
          Enabled: true
          VersionAdded: '0.62'

        Rails/Blank:
          Description: 'Enforces use of `blank?`.'
          Enabled: true
          SafeAutoCorrect: false
          VersionAdded: '0.48'
          VersionChanged: '2.10'
          # Convert usages of `nil? || empty?` to `blank?`
          NilOrEmpty: true
          # Convert usages of `!present?` to `blank?`
          NotPresent: true
          # Convert usages of `unless present?` to `if blank?`
          UnlessPresent: true

        Rails/BulkChangeTable:
          Description: 'Check whether alter queries are combinable.'
          Reference:
            - https://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/SchemaStatements.html#method-i-change_table
            - https://api.rubyonrails.org/classes/ActiveRecord/ConnectionAdapters/Table.html
          Enabled: true
          VersionAdded: '0.57'
          VersionChanged: '2.20'
          Database: null
          SupportedDatabases:
            - mysql
            - postgresql
          Include:
            - db/**/*.rb

        Rails/CompactBlank:
          Description: 'Checks if collection can be blank-compacted with `compact_blank`.'
          Enabled: pending
          Safe: false
          VersionAdded: '2.13'

        Rails/ContentTag:
          Description: 'Use `tag.something` instead of `tag(:something)`.'
          Reference:
            - 'https://github.com/rubocop/rubocop-rails/issues/260'
            - 'https://github.com/rails/rails/issues/25195'
            - 'https://api.rubyonrails.org/classes/ActionView/Helpers/TagHelper.html#method-i-content_tag'
          Enabled: true
          VersionAdded: '2.6'
          VersionChanged: '2.12'
          # This `Exclude` config prevents false positives for `tag` calls to `has_one: tag` and Puma configuration:
          # https://puma.io/puma/Puma/DSL.html#tag-instance_method
          # No helpers are used in normal models and configs.
          Exclude:
            - app/models/**/*.rb
            - config/**/*.rb

        Rails/CreateTableWithTimestamps:
          Description: >-
                          Checks the migration for which timestamps are not included
                          when creating a new table.
          Enabled: true
          VersionAdded: '0.52'
          VersionChanged: '2.20'
          Include:
            - db/**/*.rb
          Exclude:
            # Respect the `active_storage_variant_records` table of `*_create_active_storage_tables.active_storage.rb`
            # and `*_create_active_storage_variant_records.active_storage.rb`
            # auto-generated by `bin/rails active_storage:install` even if `created_at` is not specified.
            - db/**/*_create_active_storage_tables.active_storage.rb
            - db/**/*_create_active_storage_variant_records.active_storage.rb

        Rails/DangerousColumnNames:
          Description: >-
                          Avoid dangerous column names.
          Enabled: pending
          Severity: warning
          VersionAdded: '2.21'
          Include:
            - 'db/**/*.rb'

        Rails/Date:
          Description: >-
                          Checks the correct usage of date aware methods,
                          such as Date.today, Date.current etc.
          Enabled: true
          SafeAutoCorrect: false
          VersionAdded: '0.30'
          VersionChanged: '2.11'
          # The value `strict` disallows usage of `Date.today`, `Date.current`,
          # `Date#to_time` etc.
          # The value `flexible` allows usage of `Date.current`, `Date.yesterday`, etc
          # (but not `Date.today`) which are overridden by ActiveSupport to handle current
          # time zone.
          EnforcedStyle: flexible
          SupportedStyles:
            - strict
            - flexible
          AllowToTime: true

        Rails/DefaultScope:
          Description: 'Avoid use of `default_scope`.'
          Enabled: false
          VersionAdded: '2.7'

        Rails/Delegate:
          Description: 'Prefer delegate method for delegations.'
          Enabled: true
          VersionAdded: '0.21'
          VersionChanged: '0.50'
          # When set to true, using the target object as a prefix of the
          # method name without using the `delegate` method will be a
          # violation. When set to false, this case is legal.
          EnforceForPrefixed: true

        Rails/DelegateAllowBlank:
          Description: 'Do not use allow_blank as an option to delegate.'
          Enabled: true
          VersionAdded: '0.44'

        Rails/DeprecatedActiveModelErrorsMethods:
          Description: 'Avoid manipulating ActiveModel errors hash directly.'
          Enabled: pending
          Severity: warning
          Safe: false
          VersionAdded: '2.14'
          VersionChanged: '2.18'

        Rails/DotSeparatedKeys:
          Description: 'Enforces the use of dot-separated keys instead of `:scope` options in `I18n` translation methods.'
          StyleGuide: 'https://rails.rubystyle.guide/#dot-separated-keys'
          Enabled: pending
          VersionAdded: '2.15'

        Rails/DuplicateAssociation:
          Description: "Don't repeat associations in a model."
          Enabled: pending
          Severity: warning
          VersionAdded: '2.14'
          VersionChanged: '2.18'

        Rails/DuplicateScope:
          Description: 'Multiple scopes share this same where clause.'
          Enabled: pending
          Severity: warning
          VersionAdded: '2.14'
          VersionChanged: '2.18'

        Rails/DurationArithmetic:
          Description: 'Do not use duration as arithmetic operand with `Time.current`.'
          StyleGuide: 'https://rails.rubystyle.guide#duration-arithmetic'
          Enabled: pending
          VersionAdded: '2.13'

        Rails/DynamicFindBy:
          Description: 'Use `find_by` instead of dynamic `find_by_*`.'
          StyleGuide: 'https://rails.rubystyle.guide#find_by'
          Enabled: true
          Safe: false
          VersionAdded: '0.44'
          VersionChanged: '2.10'
          # The `Whitelist` has been deprecated, Please use `AllowedMethods` instead.
          Whitelist:
            - find_by_sql
            - find_by_token_for
          AllowedMethods:
            - find_by_sql
            - find_by_token_for
          AllowedReceivers:
            - Gem::Specification
            - page # Prevents a warning for `page.find_by_id`. See: https://github.com/rubocop/rubocop-rails/issues/778

        Rails/EagerEvaluationLogMessage:
          Description: 'Checks that blocks are used for interpolated strings passed to `Rails.logger.debug`.'
          Reference: 'https://guides.rubyonrails.org/debugging_rails_applications.html#impact-of-logs-on-performance'
          Enabled: pending
          VersionAdded: '2.11'

        Rails/EnumHash:
          Description: 'Prefer hash syntax over array syntax when defining enums.'
          StyleGuide: 'https://rails.rubystyle.guide#enums'
          Enabled: true
          VersionAdded: '2.3'
          Include:
            - app/models/**/*.rb

        Rails/EnumUniqueness:
          Description: 'Avoid duplicate integers in hash-syntax `enum` declaration.'
          Enabled: true
          VersionAdded: '0.46'
          Include:
            - app/models/**/*.rb

        Rails/EnvLocal:
          Description: 'Use `Rails.env.local?` instead of `Rails.env.development? || Rails.env.test?`.'
          Enabled: pending
          VersionAdded: '2.22'

        Rails/EnvironmentComparison:
          Description: "Favor `Rails.env.production?` over `Rails.env == 'production'`."
          Enabled: true
          VersionAdded: '0.52'

        Rails/EnvironmentVariableAccess:
          Description: 'Do not access `ENV` directly after initialization.'
          # TODO: Set to `pending` status in RuboCop Rails 2 series when migration doc will be written.
          Enabled: false
          VersionAdded: '2.10'
          VersionChanged: '2.24'
          Include:
            - app/**/*.rb
            - config/initializers/**/*.rb
            - lib/**/*.rb
          Exclude:
            - lib/**/*.rake
          AllowReads: false
          AllowWrites: false

        Rails/Exit:
          Description: >-
                          Favor `fail`, `break`, `return`, etc. over `exit` in
                          application or library code outside of Rake files to avoid
                          exits during unit testing or running in production.
          Enabled: true
          VersionAdded: '0.41'
          Include:
            - app/**/*.rb
            - config/**/*.rb
            - lib/**/*.rb
          Exclude:
            - lib/**/*.rake

        Rails/ExpandedDateRange:
          Description: 'Checks for expanded date range.'
          StyleGuide: 'https://rails.rubystyle.guide/#date-time-range'
          Enabled: pending
          VersionAdded: '2.11'

        Rails/FilePath:
          Description: 'Use `Rails.root.join` for file path joining.'
          Enabled: true
          VersionAdded: '0.47'
          VersionChanged: '2.4'
          EnforcedStyle: slashes
          SupportedStyles:
            - slashes
            - arguments

        Rails/FindBy:
          Description: 'Prefer find_by over where.first.'
          StyleGuide: 'https://rails.rubystyle.guide#find_by'
          Enabled: true
          VersionAdded: '0.30'
          VersionChanged: '2.21'
          IgnoreWhereFirst: true

        Rails/FindById:
          Description: >-
                        Favor the use of `find` over `where.take!`, `find_by!`, and `find_by_id!` when you
                        need to retrieve a single record by primary key when you expect it to be found.
          StyleGuide: 'https://rails.rubystyle.guide/#find'
          Enabled: 'pending'
          VersionAdded: '2.7'

        Rails/FindEach:
          Description: 'Prefer all.find_each over all.each.'
          StyleGuide: 'https://rails.rubystyle.guide#find-each'
          Enabled: true
          Safe: false
          VersionAdded: '0.30'
          VersionChanged: '2.21'
          AllowedMethods:
            # Methods that don't work well with `find_each`.
            - order
            - limit
            - select
            - lock
          AllowedPatterns: []

        Rails/FreezeTime:
          Description: 'Prefer `freeze_time` over `travel_to` with an argument of the current time.'
          StyleGuide: 'https://rails.rubystyle.guide/#freeze-time'
          Enabled: pending
          VersionAdded: '2.16'
          SafeAutoCorrect: false

        Rails/HasAndBelongsToMany:
          Description: 'Prefer has_many :through to has_and_belongs_to_many.'
          StyleGuide: 'https://rails.rubystyle.guide#has-many-through'
          Enabled: true
          VersionAdded: '0.12'
          Include:
            - app/models/**/*.rb

        Rails/HasManyOrHasOneDependent:
          Description: 'Define the dependent option to the has_many and has_one associations.'
          StyleGuide: 'https://rails.rubystyle.guide#has_many-has_one-dependent-option'
          Enabled: true
          VersionAdded: '0.50'
          Include:
            - app/models/**/*.rb

        Rails/HelperInstanceVariable:
          Description: 'Do not use instance variables in helpers.'
          Enabled: true
          VersionAdded: '2.0'
          Include:
            - app/helpers/**/*.rb

        Rails/HttpPositionalArguments:
          Description: 'Use keyword arguments instead of positional arguments in http method calls.'
          Enabled: true
          VersionAdded: '0.44'
          Include:
            - 'spec/**/*'
            - 'test/**/*'

        Rails/HttpStatus:
          Description: 'Enforces use of symbolic or numeric value to define HTTP status.'
          Enabled: true
          VersionAdded: '0.54'
          VersionChanged: '2.11'
          EnforcedStyle: symbolic
          SupportedStyles:
            - numeric
            - symbolic

        Rails/I18nLazyLookup:
          Description: 'Checks for places where I18n "lazy" lookup can be used.'
          StyleGuide: 'https://rails.rubystyle.guide/#lazy-lookup'
          Reference: 'https://guides.rubyonrails.org/i18n.html#lazy-lookup'
          Enabled: pending
          VersionAdded: '2.14'
          EnforcedStyle: lazy
          SupportedStyles:
            - lazy
            - explicit
          Include:
            - 'app/controllers/**/*.rb'

        Rails/I18nLocaleAssignment:
          Description: 'Prefer the usage of `I18n.with_locale` instead of manually updating `I18n.locale` value.'
          Enabled: 'pending'
          VersionAdded: '2.11'
          Include:
            - spec/**/*.rb
            - test/**/*.rb

        Rails/I18nLocaleTexts:
          Description: 'Enforces use of I18n and locale files instead of locale specific strings.'
          StyleGuide: 'https://rails.rubystyle.guide/#locale-texts'
          Enabled: pending
          VersionAdded: '2.14'

        Rails/IgnoredColumnsAssignment:
          Description: 'Looks for assignments of `ignored_columns` that override previous assignments.'
          StyleGuide: 'https://rails.rubystyle.guide/#append-ignored-columns'
          Enabled: pending
          SafeAutoCorrect: false
          VersionAdded: '2.17'

        Rails/IgnoredSkipActionFilterOption:
          Description: 'Checks that `if` and `only` (or `except`) are not used together as options of `skip_*` action filter.'
          Reference: 'https://api.rubyonrails.org/classes/AbstractController/Callbacks/ClassMethods.html#method-i-_normalize_callback_options'
          Enabled: true
          VersionAdded: '0.63'
          Include:
            - app/controllers/**/*.rb
            - app/mailers/**/*.rb

        Rails/IndexBy:
          Description: 'Prefer `index_by` over `each_with_object`, `to_h`, or `map`.'
          Enabled: true
          VersionAdded: '2.5'
          VersionChanged: '2.8'

        Rails/IndexWith:
          Description: 'Prefer `index_with` over `each_with_object`, `to_h`, or `map`.'
          Enabled: true
          VersionAdded: '2.5'
          VersionChanged: '2.8'

        Rails/Inquiry:
          Description: "Prefer Ruby's comparison operators over Active Support's `Array#inquiry` and `String#inquiry`."
          StyleGuide: 'https://rails.rubystyle.guide/#inquiry'
          Enabled: 'pending'
          VersionAdded: '2.7'

        Rails/InverseOf:
          Description: 'Checks for associations where the inverse cannot be determined automatically.'
          Reference:
            - https://guides.rubyonrails.org/association_basics.html#bi-directional-associations
            - https://api.rubyonrails.org/classes/ActiveRecord/Associations/ClassMethods.html#module-ActiveRecord::Associations::ClassMethods-label-Setting+Inverses
          Enabled: true
          VersionAdded: '0.52'
          IgnoreScopes: false
          Include:
            - app/models/**/*.rb

        Rails/LexicallyScopedActionFilter:
          Description: "Checks that methods specified in the filter's `only` or `except` options are explicitly defined in the class."
          StyleGuide: 'https://rails.rubystyle.guide#lexically-scoped-action-filter'
          Enabled: true
          Safe: false
          VersionAdded: '0.52'
          Include:
            - app/controllers/**/*.rb
            - app/mailers/**/*.rb

        Rails/LinkToBlank:
          Description: 'Checks that `link_to` with a `target: "_blank"` have a `rel: "noopener"` option passed to them.'
          Reference:
            - https://mathiasbynens.github.io/rel-noopener/
            - https://html.spec.whatwg.org/multipage/links.html#link-type-noopener
            - https://html.spec.whatwg.org/multipage/links.html#link-type-noreferrer
          Enabled: true
          VersionAdded: '0.62'

        Rails/MailerName:
          Description: 'Mailer should end with `Mailer` suffix.'
          StyleGuide: 'https://rails.rubystyle.guide/#mailer-name'
          Enabled: 'pending'
          SafeAutoCorrect: false
          VersionAdded: '2.7'
          Include:
            - app/mailers/**/*.rb

        Rails/MatchRoute:
          Description: >-
                          Don't use `match` to define any routes unless there is a need to map multiple request types
                          among [:get, :post, :patch, :put, :delete] to a single action using the `:via` option.
          StyleGuide: 'https://rails.rubystyle.guide/#no-match-routes'
          Enabled: 'pending'
          VersionAdded: '2.7'
          Include:
            - config/routes.rb
            - config/routes/**/*.rb

        Rails/MigrationClassName:
          Description: 'The class name of the migration should match its file name.'
          Enabled: pending
          VersionAdded: '2.14'
          VersionChanged: '2.20'
          Include:
            - db/**/*.rb

        Rails/NegateInclude:
          Description: 'Prefer `collection.exclude?(obj)` over `!collection.include?(obj)`.'
          StyleGuide: 'https://rails.rubystyle.guide#exclude'
          Enabled: 'pending'
          Safe: false
          VersionAdded: '2.7'
          VersionChanged: '2.9'

        Rails/NotNullColumn:
          Description: 'Do not add a NOT NULL column without a default value to existing tables.'
          Enabled: true
          VersionAdded: '0.43'
          VersionChanged: '2.20'
          Database: null
          SupportedDatabases:
            - mysql
          Include:
            - db/**/*.rb

        Rails/OrderById:
          Description: >-
                          Do not use the `id` column for ordering.
                          Use a timestamp column to order chronologically.
          StyleGuide: 'https://rails.rubystyle.guide/#order-by-id'
          Enabled: false
          VersionAdded: '2.8'

        Rails/Output:
          Description: 'Checks for calls to puts, print, etc.'
          Enabled: true
          SafeAutoCorrect: false
          VersionAdded: '0.15'
          VersionChanged: '0.19'
          Include:
            - app/**/*.rb
            - config/**/*.rb
            - db/**/*.rb
            - lib/**/*.rb

        Rails/OutputSafety:
          Description: 'The use of `html_safe` or `raw` may be a security risk.'
          Enabled: true
          VersionAdded: '0.41'

        Rails/Pick:
          Description: 'Prefer `pick` over `pluck(...).first`.'
          StyleGuide: 'https://rails.rubystyle.guide#pick'
          Enabled: true
          Safe: false
          VersionAdded: '2.6'

        Rails/Pluck:
          Description: 'Prefer `pluck` over `map { ... }`.'
          StyleGuide: 'https://rails.rubystyle.guide#pluck'
          Enabled: 'pending'
          Safe: false
          VersionAdded: '2.7'
          VersionChanged: '2.18'

        Rails/PluckId:
          Description: 'Use `ids` instead of `pluck(:id)` or `pluck(primary_key)`.'
          StyleGuide: 'https://rails.rubystyle.guide/#ids'
          Enabled: false
          Safe: false
          VersionAdded: '2.7'

        Rails/PluckInWhere:
          Description: 'Use `select` instead of `pluck` in `where` query methods.'
          Enabled: 'pending'
          Safe: false
          VersionAdded: '2.7'
          VersionChanged: '2.8'
          EnforcedStyle: conservative
          SupportedStyles:
            - conservative
            - aggressive

        Rails/PluralizationGrammar:
          Description: 'Checks for incorrect grammar when using methods like `3.day.ago`.'
          Enabled: true
          VersionAdded: '0.35'

        Rails/Presence:
          Description: 'Checks code that can be written more easily using `Object#presence` defined by Active Support.'
          Enabled: true
          VersionAdded: '0.52'

        Rails/Present:
          Description: 'Enforces use of `present?`.'
          Enabled: true
          VersionAdded: '0.48'
          VersionChanged: '0.67'
          # Convert usages of `!nil? && !empty?` to `present?`
          NotNilAndNotEmpty: true
          # Convert usages of `!blank?` to `present?`
          NotBlank: true
          # Convert usages of `unless blank?` to `if present?`
          UnlessBlank: true

        Rails/RakeEnvironment:
          Description: 'Include `:environment` as a dependency for all Rake tasks.'
          Enabled: true
          Safe: false
          VersionAdded: '2.4'
          VersionChanged: '2.6'
          Include:
            - '**/Rakefile'
            - '**/*.rake'
          Exclude:
            - 'lib/capistrano/tasks/**/*.rake'

        Rails/ReadWriteAttribute:
          Description: >-
                         Checks for read_attribute(:attr) and
                         write_attribute(:attr, val).
          StyleGuide: 'https://rails.rubystyle.guide#read-attribute'
          Enabled: true
          VersionAdded: '0.20'
          VersionChanged: '0.29'
          Include:
            - app/models/**/*.rb

        Rails/RedundantActiveRecordAllMethod:
          Description: Detect redundant `all` used as a receiver for Active Record query methods.
          StyleGuide: 'https://rails.rubystyle.guide/#redundant-all'
          Enabled: pending
          Safe: false
          AllowedReceivers:
            - ActionMailer::Preview
            - ActiveSupport::TimeZone
          VersionAdded: '2.21'

        Rails/RedundantAllowNil:
          Description: >-
                         Finds redundant use of `allow_nil` when `allow_blank` is set to
                         certain values in model validations.
          Enabled: true
          VersionAdded: '0.67'
          Include:
            - app/models/**/*.rb

        Rails/RedundantForeignKey:
          Description: 'Checks for associations where the `:foreign_key` option is redundant.'
          Enabled: true
          VersionAdded: '2.6'

        Rails/RedundantPresenceValidationOnBelongsTo:
          Description: 'Checks for redundant presence validation on belongs_to association.'
          Enabled: pending
          SafeAutoCorrect: false
          VersionAdded: '2.13'

        Rails/RedundantReceiverInWithOptions:
          Description: 'Checks for redundant receiver in `with_options`.'
          Enabled: true
          VersionAdded: '0.52'

        Rails/RedundantTravelBack:
          Description: Checks for redundant `travel_back` calls.
          Enabled: pending
          VersionAdded: '2.12'
          Include:
            - spec/**/*.rb
            - test/**/*.rb

        Rails/ReflectionClassName:
          Description: 'Use a string for `class_name` option value in the definition of a reflection.'
          Enabled: true
          Safe: false
          VersionAdded: '0.64'
          VersionChanged: '2.10'

        Rails/RefuteMethods:
          Description: 'Use `assert_not` methods instead of `refute` methods.'
          Enabled: true
          VersionAdded: '0.56'
          EnforcedStyle: assert_not
          SupportedStyles:
            - assert_not
            - refute
          Include:
            - '**/test/**/*'

        Rails/RelativeDateConstant:
          Description: 'Do not assign relative date to constants.'
          Enabled: true
          SafeAutoCorrect: false
          VersionAdded: '0.48'
          VersionChanged: '2.13'

        Rails/RenderInline:
          Description: 'Prefer using a template over inline rendering.'
          StyleGuide: 'https://rails.rubystyle.guide/#inline-rendering'
          Enabled: 'pending'
          VersionAdded: '2.7'

        Rails/RenderPlainText:
          Description: 'Prefer `render plain:` over `render text:`.'
          StyleGuide: 'https://rails.rubystyle.guide/#plain-text-rendering'
          Enabled: 'pending'
          VersionAdded: '2.7'
          # Convert only when `content_type` is explicitly set to `text/plain`.
          ContentTypeCompatibility: true

        Rails/RequestReferer:
          Description: 'Use consistent syntax for request.referer.'
          Enabled: true
          VersionAdded: '0.41'
          EnforcedStyle: referer
          SupportedStyles:
            - referer
            - referrer

        Rails/RequireDependency:
          Description: 'Do not use `require_dependency` when running in Zeitwerk mode. `require_dependency` is for autoloading in classic mode.'
          Reference: 'https://guides.rubyonrails.org/autoloading_and_reloading_constants.html'
          Enabled: false
          VersionAdded: '2.10'

        Rails/ResponseParsedBody:
          Description: Prefer `response.parsed_body` to custom parsing logic for `response.body`.
          Enabled: pending
          Safe: false
          VersionAdded: '2.18'
          VersionChanged: '2.19'
          Include:
            - spec/controllers/**/*.rb
            - spec/requests/**/*.rb
            - test/controllers/**/*.rb
            - test/integration/**/*.rb

        Rails/ReversibleMigration:
          Description: 'Checks whether the change method of the migration file is reversible.'
          StyleGuide: 'https://rails.rubystyle.guide#reversible-migration'
          Reference: 'https://api.rubyonrails.org/classes/ActiveRecord/Migration/CommandRecorder.html'
          Enabled: true
          VersionAdded: '0.47'
          VersionChanged: '2.13'
          Include:
            - db/**/*.rb

        Rails/ReversibleMigrationMethodDefinition:
          Description: 'Checks whether the migration implements either a `change` method or both an `up` and a `down` method.'
          Enabled: false
          VersionAdded: '2.10'
          VersionChanged: '2.13'
          Include:
            - db/**/*.rb

        Rails/RootJoinChain:
          Description: 'Use a single `#join` instead of chaining on `Rails.root` or `Rails.public_path`.'
          Enabled: pending
          VersionAdded: '2.13'

        Rails/RootPathnameMethods:
          Description: 'Use `Rails.root` IO methods instead of passing it to `File`.'
          Enabled: pending
          SafeAutoCorrect: false
          VersionAdded: '2.16'

        Rails/RootPublicPath:
          Description: "Favor `Rails.public_path` over `Rails.root` with `'public'`."
          Enabled: pending
          VersionAdded: '2.15'

        Rails/SafeNavigation:
          Description: "Use Ruby's safe navigation operator (`&.`) instead of `try!`."
          Enabled: true
          VersionAdded: '0.43'
          # This will convert usages of `try` to use safe navigation as well as `try!`.
          # `try` and `try!` work slightly differently. `try!` and safe navigation will
          # both raise a `NoMethodError` if the receiver of the method call does not
          # implement the intended method. `try` will not raise an exception for this.
          ConvertTry: false

        Rails/SafeNavigationWithBlank:
          Description: 'Avoid `foo&.blank?` in conditionals.'
          Enabled: true
          VersionAdded: '2.4'
          # While the safe navigation operator is generally a good idea, when
          # checking `foo&.blank?` in a conditional, `foo` being `nil` will actually
          # do the opposite of what the author intends.
          #
          # foo&.blank? #=> nil
          # foo.blank? #=> true
          SafeAutoCorrect: false

        Rails/SaveBang:
          Description: 'Identifies possible cases where Active Record save! or related should be used.'
          StyleGuide: 'https://rails.rubystyle.guide#save-bang'
          Enabled: false
          VersionAdded: '0.42'
          VersionChanged: '0.59'
          AllowImplicitReturn: true
          AllowedReceivers: []
          SafeAutoCorrect: false

        Rails/SchemaComment:
          Description: >-
            Enforces the use of the `comment` option when adding a new table or column
            to the database during a migration.
          Enabled: false
          VersionAdded: '2.13'

        Rails/ScopeArgs:
          Description: 'Checks the arguments of ActiveRecord scopes.'
          Enabled: true
          VersionAdded: '0.19'
          VersionChanged: '2.12'
          Include:
            - app/models/**/*.rb

        Rails/SelectMap:
          Description: 'Checks for uses of `select(:column_name)` with `map(&:column_name)`.'
          Enabled: pending
          Safe: false
          VersionAdded: '2.21'

        Rails/ShortI18n:
          Description: 'Use the short form of the I18n methods: `t` instead of `translate` and `l` instead of `localize`.'
          StyleGuide: 'https://rails.rubystyle.guide/#short-i18n'
          Enabled: 'pending'
          VersionAdded: '2.7'
          EnforcedStyle: conservative
          SupportedStyles:
            - conservative
            - aggressive

        Rails/SkipsModelValidations:
          Description: >-
                         Use methods that skips model validations with caution.
                         See reference for more information.
          Reference: 'https://guides.rubyonrails.org/active_record_validations.html#skipping-validations'
          Enabled: true
          VersionAdded: '0.47'
          VersionChanged: '2.7'
          ForbiddenMethods:
            - decrement!
            - decrement_counter
            - increment!
            - increment_counter
            - insert
            - insert!
            - insert_all
            - insert_all!
            - toggle!
            - touch
            - touch_all
            - update_all
            - update_attribute
            - update_column
            - update_columns
            - update_counters
            - upsert
            - upsert_all
          AllowedMethods: []

        Rails/SquishedSQLHeredocs:
          Description: 'Checks SQL heredocs to use `.squish`.'
          StyleGuide: 'https://rails.rubystyle.guide/#squished-heredocs'
          Enabled: 'pending'
          VersionAdded: '2.8'
          VersionChanged: '2.9'
          # Some SQL syntax (e.g. PostgreSQL comments and functions) requires newlines
          # to be preserved in order to work, thus autocorrection is not safe.
          SafeAutoCorrect: false

        Rails/StripHeredoc:
          Description: 'Enforces the use of squiggly heredoc over `strip_heredoc`.'
          StyleGuide: 'https://rails.rubystyle.guide/#prefer-squiggly-heredoc'
          Enabled: pending
          VersionAdded: '2.15'

        Rails/TableNameAssignment:
          Description: >-
            Do not use `self.table_name =`. Use Inflections or `table_name_prefix` instead.
          StyleGuide: 'https://rails.rubystyle.guide/#keep-ar-defaults'
          Enabled: false
          VersionAdded: '2.14'
          Include:
            - app/models/**/*.rb

        Rails/ThreeStateBooleanColumn:
          Description: 'Add a default value and a `NOT NULL` constraint to boolean columns.'
          StyleGuide: 'https://rails.rubystyle.guide/#three-state-boolean'
          Enabled: pending
          VersionAdded: '2.19'
          Include:
            - db/**/*.rb

        Rails/TimeZone:
          Description: 'Checks the correct usage of time zone aware methods.'
          StyleGuide: 'https://rails.rubystyle.guide#time'
          Reference: 'http://danilenko.org/2012/7/6/rails_timezones'
          Enabled: true
          SafeAutoCorrect: false
          VersionAdded: '0.30'
          VersionChanged: '2.13'
          # The value `strict` means that `Time` should be used with `zone`.
          # The value `flexible` allows usage of `in_time_zone` instead of `zone`.
          EnforcedStyle: flexible
          SupportedStyles:
            - strict
            - flexible
          Exclude:
            - '**/*.gemspec'

        Rails/TimeZoneAssignment:
          Description: 'Prefer the usage of `Time.use_zone` instead of manually updating `Time.zone` value.'
          Reference: 'https://thoughtbot.com/blog/its-about-time-zones'
          Enabled: 'pending'
          VersionAdded: '2.10'
          Include:
            - spec/**/*.rb
            - test/**/*.rb

        Rails/ToFormattedS:
          Description: 'Checks for consistent uses of `to_fs` or `to_formatted_s`.'
          StyleGuide: 'https://rails.rubystyle.guide/#prefer-to-fs'
          Enabled: pending
          EnforcedStyle: to_fs
          SupportedStyles:
            - to_fs
            - to_formatted_s
          VersionAdded: '2.15'

        Rails/ToSWithArgument:
          Description: 'Identifies passing any argument to `#to_s`.'
          Enabled: pending
          Safe: false
          VersionAdded: '2.16'

        Rails/TopLevelHashWithIndifferentAccess:
          Description: 'Identifies top-level `HashWithIndifferentAccess`.'
          Reference: 'https://guides.rubyonrails.org/upgrading_ruby_on_rails.html#top-level-hashwithindifferentaccess-is-soft-deprecated'
          Enabled: pending
          Severity: warning
          VersionAdded: '2.16'
          VersionChanged: '2.18'

        Rails/TransactionExitStatement:
          Description: 'Avoid the usage of `return`, `break` and `throw` in transaction blocks.'
          Reference:
            - https://github.com/rails/rails/commit/15aa4200e083
          Enabled: pending
          VersionAdded: '2.14'
          TransactionMethods: []

        Rails/UniqBeforePluck:
          Description: 'Prefer the use of uniq or distinct before pluck.'
          Enabled: true
          VersionAdded: '0.40'
          VersionChanged: '2.13'
          EnforcedStyle: conservative
          SupportedStyles:
            - conservative
            - aggressive
          SafeAutoCorrect: false

        Rails/UniqueValidationWithoutIndex:
          Description: 'Uniqueness validation should have a unique index on the database column.'
          Enabled: true
          VersionAdded: '2.5'
          Include:
            - app/models/**/*.rb

        Rails/UnknownEnv:
          Description: 'Use correct environment name.'
          Enabled: true
          Severity: warning
          VersionAdded: '0.51'
          VersionChanged: '2.18'
          Environments:
            - development
            - test
            - production

        Rails/UnusedIgnoredColumns:
          Description: 'Remove a column that does not exist from `ignored_columns`.'
          Enabled: false
          VersionAdded: '2.11'
          VersionChanged: '2.25'
          Include:
            - app/models/**/*.rb

        Rails/UnusedRenderContent:
          Description: 'Do not specify body content for a response with a non-content status code.'
          Enabled: pending
          Severity: warning
          VersionAdded: '2.21'

        Rails/Validation:
          Description: 'Use validates :attribute, hash of validations.'
          Enabled: true
          VersionAdded: '0.9'
          VersionChanged: '0.41'
          Include:
            - app/models/**/*.rb

        Rails/WhereEquals:
          Description: 'Pass conditions to `where` as a hash instead of manually constructing SQL.'
          StyleGuide: 'https://rails.rubystyle.guide/#hash-conditions'
          Enabled: 'pending'
          SafeAutoCorrect: false
          VersionAdded: '2.9'
          VersionChanged: '2.10'

        Rails/WhereExists:
          Description: 'Prefer `exists?(...)` over `where(...).exists?`.'
          Enabled: 'pending'
          SafeAutoCorrect: false
          EnforcedStyle: exists
          SupportedStyles:
            - exists
            - where
          VersionAdded: '2.7'
          VersionChanged: '2.10'

        Rails/WhereMissing:
          Description: 'Use `where.missing(...)` to find missing relationship records.'
          StyleGuide: 'https://rails.rubystyle.guide/#finding-missing-relationship-records'
          Enabled: pending
          VersionAdded: '2.16'

        Rails/WhereNot:
          Description: 'Use `where.not(...)` instead of manually constructing negated SQL in `where`.'
          StyleGuide: 'https://rails.rubystyle.guide/#hash-conditions'
          Enabled: 'pending'
          VersionAdded: '2.8'

        Rails/WhereNotWithMultipleConditions:
          Description: 'Do not use `where.not(...)` with multiple conditions.'
          StyleGuide: 'https://rails.rubystyle.guide/#where-not-with-multiple-attributes'
          Enabled: 'pending'
          Severity: warning
          VersionAdded: '2.17'
          VersionChanged: '2.18'

        Rails/WhereRange:
          Description: 'Use ranges in `where` instead of manually constructing SQL.'
          StyleGuide: 'https://rails.rubystyle.guide/#where-ranges'
          Enabled: pending
          VersionAdded: '2.25'

        # Accept `redirect_to(...) and return` and similar cases.
        Style/AndOr:
          EnforcedStyle: conditionals

        Style/FormatStringToken:
          AllowedMethods:
            - redirect

        Style/InvertibleUnlessCondition:
          InverseMethods:
            # Active Support defines some common inverse methods. They are listed below:
            :present?: :blank?
            :blank?: :present?
            :include?: :exclude?
            :exclude?: :include?

        Style/SymbolProc:
          AllowedMethods:
            - define_method
            - mail
            - respond_to
  recorded_at: Mon, 27 May 2024 05:30:44 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-rake/v0.6.0/docs/modules/ROOT/pages/cops.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '14'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      Content-Type:
      - text/plain; charset=utf-8
      X-Github-Request-Id:
      - E852:23E66:13976E7:14D07F5:66541A84
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 27 May 2024 05:30:44 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-fra-eddf8230028-FRA
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1716787845.610023,VS0,VE281
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - fc52291cbde63b95df4f110ce29de5ced8a97411
      Expires:
      - Mon, 27 May 2024 05:35:44 GMT
      Source-Age:
      - '0'
    body:
      encoding: UTF-8
      string: '404: Not Found'
  recorded_at: Mon, 27 May 2024 05:30:45 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-rake/v0.6.0/config/default.yml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '764'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"4b8a901e70598d90259e6b4465c4dbb0145ef52a57bb20f10bd1975a7b7b92c8"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 9AB8:3F1A91:13E306E:151AE1E:66541A83
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 27 May 2024 05:30:45 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-fra-eddf8230155-FRA
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1716787845.007577,VS0,VE201
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - b8b8df2aea0ec7ddef48b591be3fd1f54f8443f4
      Expires:
      - Mon, 27 May 2024 05:35:45 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        Rake:
          Enabled: true
          Include:
            - 'Rakefile'
            - '**/*.rake'

        Rake/ClassDefinitionInTask:
          Description: 'Do not define a class or module in rake task, because it will be defined to the top level.'
          Enabled: true
          VersionAdded: '0.3.0'

        Rake/Desc:
          Description: 'Describe the task with `desc` method.'
          Enabled: true
          VersionAdded: '0.1.0'

        Rake/DuplicateNamespace:
          Description: 'Do not define namespace with the same name'
          Enabled: true
          VersionAdded: '0.5.0'

        Rake/DuplicateTask:
          Description: 'Do not define tasks with the same name'
          Enabled: true
          VersionAdded: '0.4.0'

        Rake/MethodDefinitionInTask:
          Description: 'Do not define a method in rake task, because it will be defined to the top level.'
          Enabled: true
          VersionAdded: '0.2.0'
  recorded_at: Mon, 27 May 2024 05:30:45 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-rspec/v2.29.2/docs/modules/ROOT/pages/cops.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '9595'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"9a078acd68374e4bf230b9ee14e312b4e2fec8a51c0a13ae8f6ede2d0f52a855"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - C548:37ABCC:1275921:139F489:66541A84
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 27 May 2024 05:30:45 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-fra-eddf8230145-FRA
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1716787845.325159,VS0,VE249
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - 57c8f27d9f5ccc65a6f798737ce4b8d69d63c705
      Expires:
      - Mon, 27 May 2024 05:35:45 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        // START_COP_LIST

        === Department xref:cops_rspec.adoc[RSpec]

        * xref:cops_rspec.adoc#rspecalignleftletbrace[RSpec/AlignLeftLetBrace]
        * xref:cops_rspec.adoc#rspecalignrightletbrace[RSpec/AlignRightLetBrace]
        * xref:cops_rspec.adoc#rspecanyinstance[RSpec/AnyInstance]
        * xref:cops_rspec.adoc#rspecaroundblock[RSpec/AroundBlock]
        * xref:cops_rspec.adoc#rspecbe[RSpec/Be]
        * xref:cops_rspec.adoc#rspecbeempty[RSpec/BeEmpty]
        * xref:cops_rspec.adoc#rspecbeeq[RSpec/BeEq]
        * xref:cops_rspec.adoc#rspecbeeql[RSpec/BeEql]
        * xref:cops_rspec.adoc#rspecbenil[RSpec/BeNil]
        * xref:cops_rspec.adoc#rspecbeforeafterall[RSpec/BeforeAfterAll]
        * xref:cops_rspec.adoc#rspecchangebyzero[RSpec/ChangeByZero]
        * xref:cops_rspec.adoc#rspecclasscheck[RSpec/ClassCheck]
        * xref:cops_rspec.adoc#rspeccontainexactly[RSpec/ContainExactly]
        * xref:cops_rspec.adoc#rspeccontextmethod[RSpec/ContextMethod]
        * xref:cops_rspec.adoc#rspeccontextwording[RSpec/ContextWording]
        * xref:cops_rspec.adoc#rspecdescribeclass[RSpec/DescribeClass]
        * xref:cops_rspec.adoc#rspecdescribemethod[RSpec/DescribeMethod]
        * xref:cops_rspec.adoc#rspecdescribesymbol[RSpec/DescribeSymbol]
        * xref:cops_rspec.adoc#rspecdescribedclass[RSpec/DescribedClass]
        * xref:cops_rspec.adoc#rspecdescribedclassmodulewrapping[RSpec/DescribedClassModuleWrapping]
        * xref:cops_rspec.adoc#rspecdialect[RSpec/Dialect]
        * xref:cops_rspec.adoc#rspecduplicatedmetadata[RSpec/DuplicatedMetadata]
        * xref:cops_rspec.adoc#rspecemptyexamplegroup[RSpec/EmptyExampleGroup]
        * xref:cops_rspec.adoc#rspecemptyhook[RSpec/EmptyHook]
        * xref:cops_rspec.adoc#rspecemptylineafterexample[RSpec/EmptyLineAfterExample]
        * xref:cops_rspec.adoc#rspecemptylineafterexamplegroup[RSpec/EmptyLineAfterExampleGroup]
        * xref:cops_rspec.adoc#rspecemptylineafterfinallet[RSpec/EmptyLineAfterFinalLet]
        * xref:cops_rspec.adoc#rspecemptylineafterhook[RSpec/EmptyLineAfterHook]
        * xref:cops_rspec.adoc#rspecemptylineaftersubject[RSpec/EmptyLineAfterSubject]
        * xref:cops_rspec.adoc#rspecemptymetadata[RSpec/EmptyMetadata]
        * xref:cops_rspec.adoc#rspecemptyoutput[RSpec/EmptyOutput]
        * xref:cops_rspec.adoc#rspeceq[RSpec/Eq]
        * xref:cops_rspec.adoc#rspecexamplelength[RSpec/ExampleLength]
        * xref:cops_rspec.adoc#rspecexamplewithoutdescription[RSpec/ExampleWithoutDescription]
        * xref:cops_rspec.adoc#rspecexamplewording[RSpec/ExampleWording]
        * xref:cops_rspec.adoc#rspecexcessivedocstringspacing[RSpec/ExcessiveDocstringSpacing]
        * xref:cops_rspec.adoc#rspecexpectactual[RSpec/ExpectActual]
        * xref:cops_rspec.adoc#rspecexpectchange[RSpec/ExpectChange]
        * xref:cops_rspec.adoc#rspecexpectinhook[RSpec/ExpectInHook]
        * xref:cops_rspec.adoc#rspecexpectoutput[RSpec/ExpectOutput]
        * xref:cops_rspec.adoc#rspecfilepath[RSpec/FilePath]
        * xref:cops_rspec.adoc#rspecfocus[RSpec/Focus]
        * xref:cops_rspec.adoc#rspechookargument[RSpec/HookArgument]
        * xref:cops_rspec.adoc#rspechooksbeforeexamples[RSpec/HooksBeforeExamples]
        * xref:cops_rspec.adoc#rspecidenticalequalityassertion[RSpec/IdenticalEqualityAssertion]
        * xref:cops_rspec.adoc#rspecimplicitblockexpectation[RSpec/ImplicitBlockExpectation]
        * xref:cops_rspec.adoc#rspecimplicitexpect[RSpec/ImplicitExpect]
        * xref:cops_rspec.adoc#rspecimplicitsubject[RSpec/ImplicitSubject]
        * xref:cops_rspec.adoc#rspecindexedlet[RSpec/IndexedLet]
        * xref:cops_rspec.adoc#rspecinstancespy[RSpec/InstanceSpy]
        * xref:cops_rspec.adoc#rspecinstancevariable[RSpec/InstanceVariable]
        * xref:cops_rspec.adoc#rspecisexpectedspecify[RSpec/IsExpectedSpecify]
        * xref:cops_rspec.adoc#rspecitbehaveslike[RSpec/ItBehavesLike]
        * xref:cops_rspec.adoc#rspeciteratedexpectation[RSpec/IteratedExpectation]
        * xref:cops_rspec.adoc#rspecleadingsubject[RSpec/LeadingSubject]
        * xref:cops_rspec.adoc#rspecleakyconstantdeclaration[RSpec/LeakyConstantDeclaration]
        * xref:cops_rspec.adoc#rspecletbeforeexamples[RSpec/LetBeforeExamples]
        * xref:cops_rspec.adoc#rspecletsetup[RSpec/LetSetup]
        * xref:cops_rspec.adoc#rspecmatcharray[RSpec/MatchArray]
        * xref:cops_rspec.adoc#rspecmessagechain[RSpec/MessageChain]
        * xref:cops_rspec.adoc#rspecmessageexpectation[RSpec/MessageExpectation]
        * xref:cops_rspec.adoc#rspecmessagespies[RSpec/MessageSpies]
        * xref:cops_rspec.adoc#rspecmetadatastyle[RSpec/MetadataStyle]
        * xref:cops_rspec.adoc#rspecmissingexamplegroupargument[RSpec/MissingExampleGroupArgument]
        * xref:cops_rspec.adoc#rspecmultipledescribes[RSpec/MultipleDescribes]
        * xref:cops_rspec.adoc#rspecmultipleexpectations[RSpec/MultipleExpectations]
        * xref:cops_rspec.adoc#rspecmultiplememoizedhelpers[RSpec/MultipleMemoizedHelpers]
        * xref:cops_rspec.adoc#rspecmultiplesubjects[RSpec/MultipleSubjects]
        * xref:cops_rspec.adoc#rspecnamedsubject[RSpec/NamedSubject]
        * xref:cops_rspec.adoc#rspecnestedgroups[RSpec/NestedGroups]
        * xref:cops_rspec.adoc#rspecnoexpectationexample[RSpec/NoExpectationExample]
        * xref:cops_rspec.adoc#rspecnottonot[RSpec/NotToNot]
        * xref:cops_rspec.adoc#rspecoverwritingsetup[RSpec/OverwritingSetup]
        * xref:cops_rspec.adoc#rspecpending[RSpec/Pending]
        * xref:cops_rspec.adoc#rspecpendingwithoutreason[RSpec/PendingWithoutReason]
        * xref:cops_rspec.adoc#rspecpredicatematcher[RSpec/PredicateMatcher]
        * xref:cops_rspec.adoc#rspecreceivecounts[RSpec/ReceiveCounts]
        * xref:cops_rspec.adoc#rspecreceivemessages[RSpec/ReceiveMessages]
        * xref:cops_rspec.adoc#rspecreceivenever[RSpec/ReceiveNever]
        * xref:cops_rspec.adoc#rspecredundantaround[RSpec/RedundantAround]
        * xref:cops_rspec.adoc#rspecredundantpredicatematcher[RSpec/RedundantPredicateMatcher]
        * xref:cops_rspec.adoc#rspecremoveconst[RSpec/RemoveConst]
        * xref:cops_rspec.adoc#rspecrepeateddescription[RSpec/RepeatedDescription]
        * xref:cops_rspec.adoc#rspecrepeatedexample[RSpec/RepeatedExample]
        * xref:cops_rspec.adoc#rspecrepeatedexamplegroupbody[RSpec/RepeatedExampleGroupBody]
        * xref:cops_rspec.adoc#rspecrepeatedexamplegroupdescription[RSpec/RepeatedExampleGroupDescription]
        * xref:cops_rspec.adoc#rspecrepeatedincludeexample[RSpec/RepeatedIncludeExample]
        * xref:cops_rspec.adoc#rspecrepeatedsubjectcall[RSpec/RepeatedSubjectCall]
        * xref:cops_rspec.adoc#rspecreturnfromstub[RSpec/ReturnFromStub]
        * xref:cops_rspec.adoc#rspecscatteredlet[RSpec/ScatteredLet]
        * xref:cops_rspec.adoc#rspecscatteredsetup[RSpec/ScatteredSetup]
        * xref:cops_rspec.adoc#rspecsharedcontext[RSpec/SharedContext]
        * xref:cops_rspec.adoc#rspecsharedexamples[RSpec/SharedExamples]
        * xref:cops_rspec.adoc#rspecsingleargumentmessagechain[RSpec/SingleArgumentMessageChain]
        * xref:cops_rspec.adoc#rspecskipblockinsideexample[RSpec/SkipBlockInsideExample]
        * xref:cops_rspec.adoc#rspecsortmetadata[RSpec/SortMetadata]
        * xref:cops_rspec.adoc#rspecspecfilepathformat[RSpec/SpecFilePathFormat]
        * xref:cops_rspec.adoc#rspecspecfilepathsuffix[RSpec/SpecFilePathSuffix]
        * xref:cops_rspec.adoc#rspecstubbedmock[RSpec/StubbedMock]
        * xref:cops_rspec.adoc#rspecsubjectdeclaration[RSpec/SubjectDeclaration]
        * xref:cops_rspec.adoc#rspecsubjectstub[RSpec/SubjectStub]
        * xref:cops_rspec.adoc#rspecundescriptiveliteralsdescription[RSpec/UndescriptiveLiteralsDescription]
        * xref:cops_rspec.adoc#rspecunspecifiedexception[RSpec/UnspecifiedException]
        * xref:cops_rspec.adoc#rspecvariabledefinition[RSpec/VariableDefinition]
        * xref:cops_rspec.adoc#rspecvariablename[RSpec/VariableName]
        * xref:cops_rspec.adoc#rspecverifieddoublereference[RSpec/VerifiedDoubleReference]
        * xref:cops_rspec.adoc#rspecverifieddoubles[RSpec/VerifiedDoubles]
        * xref:cops_rspec.adoc#rspecvoidexpect[RSpec/VoidExpect]
        * xref:cops_rspec.adoc#rspecyield[RSpec/Yield]

        === Department xref:cops_rspec_capybara.adoc[RSpec/Capybara]

        * xref:cops_rspec_capybara.adoc#rspeccapybara/currentpathexpectation[RSpec/Capybara/CurrentPathExpectation]
        * xref:cops_rspec_capybara.adoc#rspeccapybara/featuremethods[RSpec/Capybara/FeatureMethods]
        * xref:cops_rspec_capybara.adoc#rspeccapybara/matchstyle[RSpec/Capybara/MatchStyle]
        * xref:cops_rspec_capybara.adoc#rspeccapybara/negationmatcher[RSpec/Capybara/NegationMatcher]
        * xref:cops_rspec_capybara.adoc#rspeccapybara/specificactions[RSpec/Capybara/SpecificActions]
        * xref:cops_rspec_capybara.adoc#rspeccapybara/specificfinders[RSpec/Capybara/SpecificFinders]
        * xref:cops_rspec_capybara.adoc#rspeccapybara/specificmatcher[RSpec/Capybara/SpecificMatcher]
        * xref:cops_rspec_capybara.adoc#rspeccapybara/visibilitymatcher[RSpec/Capybara/VisibilityMatcher]

        === Department xref:cops_rspec_factorybot.adoc[RSpec/FactoryBot]

        * xref:cops_rspec_factorybot.adoc#rspecfactorybot/attributedefinedstatically[RSpec/FactoryBot/AttributeDefinedStatically]
        * xref:cops_rspec_factorybot.adoc#rspecfactorybot/consistentparenthesesstyle[RSpec/FactoryBot/ConsistentParenthesesStyle]
        * xref:cops_rspec_factorybot.adoc#rspecfactorybot/createlist[RSpec/FactoryBot/CreateList]
        * xref:cops_rspec_factorybot.adoc#rspecfactorybot/factoryclassname[RSpec/FactoryBot/FactoryClassName]
        * xref:cops_rspec_factorybot.adoc#rspecfactorybot/factorynamestyle[RSpec/FactoryBot/FactoryNameStyle]
        * xref:cops_rspec_factorybot.adoc#rspecfactorybot/syntaxmethods[RSpec/FactoryBot/SyntaxMethods]

        === Department xref:cops_rspec_rails.adoc[RSpec/Rails]

        * xref:cops_rspec_rails.adoc#rspecrails/avoidsetuphook[RSpec/Rails/AvoidSetupHook]
        * xref:cops_rspec_rails.adoc#rspecrails/havehttpstatus[RSpec/Rails/HaveHttpStatus]
        * xref:cops_rspec_rails.adoc#rspecrails/httpstatus[RSpec/Rails/HttpStatus]
        * xref:cops_rspec_rails.adoc#rspecrails/inferredspectype[RSpec/Rails/InferredSpecType]
        * xref:cops_rspec_rails.adoc#rspecrails/minitestassertions[RSpec/Rails/MinitestAssertions]
        * xref:cops_rspec_rails.adoc#rspecrails/negationbevalid[RSpec/Rails/NegationBeValid]
        * xref:cops_rspec_rails.adoc#rspecrails/travelaround[RSpec/Rails/TravelAround]

        // END_COP_LIST
  recorded_at: Mon, 27 May 2024 05:30:45 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-rspec/v2.29.2/docs/modules/ROOT/pages/cops_rspec.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '99636'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"444796f86b98db03f114cceb7e796276e085239b470f105726d4d1b364322223"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 6F34:19D255:9DDC89:A83EC9:66541A84
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 27 May 2024 05:30:45 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-fra-eddf8230052-FRA
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1716787846.662583,VS0,VE216
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - 39c11dd591918c4de894e9d0fd10656bbca3903e
      Expires:
      - Mon, 27 May 2024 05:35:45 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Mon, 27 May 2024 05:30:46 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-rspec/v2.29.2/docs/modules/ROOT/pages/cops_rspec/capybara.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '14'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      Content-Type:
      - text/plain; charset=utf-8
      X-Github-Request-Id:
      - 2FD0:6D2AE:1313BCC:144BFE2:66541A85
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 27 May 2024 05:30:46 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-fra-eddf8230042-FRA
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1716787846.212046,VS0,VE164
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - 319b5f7f933025ee06b50608678ee72bf0139aab
      Expires:
      - Mon, 27 May 2024 05:35:46 GMT
      Source-Age:
      - '0'
    body:
      encoding: UTF-8
      string: '404: Not Found'
  recorded_at: Mon, 27 May 2024 05:30:46 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-rspec/v2.29.2/docs/modules/ROOT/pages/cops_rspec/factorybot.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '14'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      Content-Type:
      - text/plain; charset=utf-8
      X-Github-Request-Id:
      - A822:19D255:9DDCBD:A83F07:66541A85
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 27 May 2024 05:30:46 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-fra-eddf8230030-FRA
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1716787847.544777,VS0,VE161
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - d19cd354383b0732e8398406750e11390356b700
      Expires:
      - Mon, 27 May 2024 05:35:46 GMT
      Source-Age:
      - '0'
    body:
      encoding: UTF-8
      string: '404: Not Found'
  recorded_at: Mon, 27 May 2024 05:30:46 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-rspec/v2.29.2/docs/modules/ROOT/pages/cops_rspec/rails.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '14'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      Content-Type:
      - text/plain; charset=utf-8
      X-Github-Request-Id:
      - A350:82772:135A093:149254D:66541A86
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 27 May 2024 05:30:47 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-fra-eddf8230091-FRA
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1716787847.846925,VS0,VE161
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - e2fb9b5d7b5ebb975e7a017699b0fdbef147fde2
      Expires:
      - Mon, 27 May 2024 05:35:47 GMT
      Source-Age:
      - '0'
    body:
      encoding: UTF-8
      string: '404: Not Found'
  recorded_at: Mon, 27 May 2024 05:30:47 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-rspec/v2.29.2/config/default.yml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '39288'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"6675eb230d293485fd9cad3012b3405e4d16f37b3bfef8825c6719f8800eb85e"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 3A3E:12DE69:31D941:3595F2:66541A87
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 27 May 2024 05:30:47 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-fra-eddf8230113-FRA
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1716787847.154662,VS0,VE161
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      Cross-Origin-Resource-Policy:
      - cross-origin
      X-Fastly-Request-Id:
      - c9bdcfb76e88779af57bc176f6a8a61aed071e53
      Expires:
      - Mon, 27 May 2024 05:35:47 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        ---
        RSpec:
          Enabled: true
          StyleGuideBaseURL: https://rspec.rubystyle.guide
          DocumentationBaseURL: https://docs.rubocop.org/rubocop-rspec
          Include: &1
            - "**/*_spec.rb"
            - "**/spec/**/*"
          Language: &2
            inherit_mode:
              merge:
                - Expectations
                - Helpers
                - Hooks
                - Subjects
            ExampleGroups:
              inherit_mode:
                merge:
                  - Regular
                  - Skipped
                  - Focused
              Regular:
                - describe
                - context
                - feature
                - example_group
              Skipped:
                - xdescribe
                - xcontext
                - xfeature
              Focused:
                - fdescribe
                - fcontext
                - ffeature
            Examples:
              inherit_mode:
                merge:
                  - Regular
                  - Skipped
                  - Focused
                  - Pending
              Regular:
                - it
                - specify
                - example
                - scenario
                - its
              Focused:
                - fit
                - fspecify
                - fexample
                - fscenario
                - focus
              Skipped:
                - xit
                - xspecify
                - xexample
                - xscenario
                - skip
              Pending:
                - pending
            Expectations:
              - are_expected
              - expect
              - expect_any_instance_of
              - is_expected
              - should
              - should_not
              - should_not_receive
              - should_receive
            Helpers:
              - let
              - let!
            Hooks:
              - prepend_before
              - before
              - append_before
              - around
              - prepend_after
              - after
              - append_after
            Includes:
              inherit_mode:
                merge:
                  - Examples
                  - Context
              Examples:
                - it_behaves_like
                - it_should_behave_like
                - include_examples
              Context:
                - include_context
            SharedGroups:
              inherit_mode:
                merge:
                  - Examples
                  - Context
              Examples:
                - shared_examples
                - shared_examples_for
              Context:
                - shared_context
            Subjects:
              - subject
              - subject!

        Metrics/BlockLength:
          inherit_mode:
            merge:
              - Exclude
          Exclude:
            - "**/*_spec.rb"
            - "**/spec/**/*"

        RSpec/AlignLeftLetBrace:
          Description: Checks that left braces for adjacent single line lets are aligned.
          Enabled: false
          VersionAdded: '1.16'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/AlignLeftLetBrace

        RSpec/AlignRightLetBrace:
          Description: Checks that right braces for adjacent single line lets are aligned.
          Enabled: false
          VersionAdded: '1.16'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/AlignRightLetBrace

        RSpec/AnyInstance:
          Description: Check that instances are not being stubbed globally.
          Enabled: true
          VersionAdded: '1.4'
          StyleGuide: https://rspec.rubystyle.guide/#any_instance_of
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/AnyInstance

        RSpec/AroundBlock:
          Description: Checks that around blocks actually run the test.
          Enabled: true
          VersionAdded: '1.11'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/AroundBlock

        RSpec/Be:
          Description: Check for expectations where `be` is used without argument.
          Enabled: true
          VersionAdded: '1.25'
          StyleGuide: https://rspec.rubystyle.guide/#be-matcher
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Be

        RSpec/BeEmpty:
          Description: Prefer using `be_empty` when checking for an empty array.
          Enabled: pending
          VersionAdded: '2.20'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/BeEmpty

        RSpec/BeEq:
          Description: Check for expectations where `be(...)` can replace `eq(...)`.
          Enabled: pending
          Safe: false
          VersionAdded: 2.9.0
          VersionChanged: '2.16'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/BeEq

        RSpec/BeEql:
          Description: Check for expectations where `be(...)` can replace `eql(...)`.
          Enabled: true
          Safe: false
          VersionAdded: '1.7'
          VersionChanged: '2.16'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/BeEql

        RSpec/BeNil:
          Description: Ensures a consistent style is used when matching `nil`.
          Enabled: pending
          EnforcedStyle: be_nil
          SupportedStyles:
            - be
            - be_nil
          VersionAdded: 2.9.0
          VersionChanged: 2.10.0
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/BeNil

        RSpec/BeforeAfterAll:
          Description: Check that before/after(:all/:context) isn't being used.
          Enabled: true
          Exclude:
            - "**/spec/spec_helper.rb"
            - "**/spec/rails_helper.rb"
            - "**/spec/support/**/*.rb"
          VersionAdded: '1.12'
          VersionChanged: '2.23'
          StyleGuide: https://rspec.rubystyle.guide/#avoid-hooks-with-context-scope
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/BeforeAfterAll

        RSpec/ChangeByZero:
          Description: Prefer negated matchers over `to change.by(0)`.
          Enabled: pending
          VersionAdded: '2.11'
          VersionChanged: '2.14'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ChangeByZero
          NegatedMatcher: ~

        RSpec/ClassCheck:
          Description: Enforces consistent use of `be_a` or `be_kind_of`.
          StyleGuide: "#is-a-vs-kind-of"
          Enabled: pending
          VersionAdded: '2.13'
          EnforcedStyle: be_a
          SupportedStyles:
            - be_a
            - be_kind_of
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ClassCheck

        RSpec/ContainExactly:
          Description: Checks where `contain_exactly` is used.
          Enabled: pending
          VersionAdded: '2.19'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ContainExactly

        RSpec/ContextMethod:
          Description: "`context` should not be used for specifying methods."
          Enabled: true
          VersionAdded: '1.36'
          StyleGuide: https://rspec.rubystyle.guide/#example-group-naming
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ContextMethod

        RSpec/ContextWording:
          Description: Checks that `context` docstring starts with an allowed prefix.
          Enabled: true
          Prefixes:
            - when
            - with
            - without
          AllowedPatterns: []
          VersionAdded: '1.20'
          VersionChanged: '2.13'
          StyleGuide: https://rspec.rubystyle.guide/#context-descriptions
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ContextWording

        RSpec/DescribeClass:
          Description: Check that the first argument to the top-level describe is a constant.
          Enabled: true
          Exclude:
            - "**/spec/features/**/*"
            - "**/spec/requests/**/*"
            - "**/spec/routing/**/*"
            - "**/spec/system/**/*"
            - "**/spec/views/**/*"
          IgnoredMetadata:
            type:
              - channel
              - controller
              - helper
              - job
              - mailer
              - model
              - request
              - routing
              - view
              - feature
              - system
              - mailbox
              - aruba
              - task
          VersionAdded: '1.0'
          VersionChanged: '2.7'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/DescribeClass

        RSpec/DescribeMethod:
          Description: Checks that the second argument to `describe` specifies a method.
          Enabled: true
          VersionAdded: '1.0'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/DescribeMethod

        RSpec/DescribeSymbol:
          Description: Avoid describing symbols.
          Enabled: true
          VersionAdded: '1.15'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/DescribeSymbol

        RSpec/DescribedClass:
          Description: Checks that tests use `described_class`.
          Enabled: true
          SkipBlocks: false
          EnforcedStyle: described_class
          SupportedStyles:
            - described_class
            - explicit
          OnlyStaticConstants: true
          SafeAutoCorrect: false
          VersionAdded: '1.0'
          VersionChanged: '2.27'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/DescribedClass

        RSpec/DescribedClassModuleWrapping:
          Description: Avoid opening modules and defining specs within them.
          Enabled: false
          VersionAdded: '1.37'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/DescribedClassModuleWrapping

        RSpec/Dialect:
          Description: Enforces custom RSpec dialects.
          Enabled: false
          PreferredMethods: {}
          VersionAdded: '1.33'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Dialect

        RSpec/DuplicatedMetadata:
          Description: Avoid duplicated metadata.
          Enabled: pending
          VersionAdded: '2.16'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/DuplicatedMetadata

        RSpec/EmptyExampleGroup:
          Description: Checks if an example group does not include any tests.
          Enabled: true
          SafeAutoCorrect: false
          VersionAdded: '1.7'
          VersionChanged: '2.13'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/EmptyExampleGroup

        RSpec/EmptyHook:
          Description: Checks for empty before and after hooks.
          Enabled: true
          VersionAdded: '1.39'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/EmptyHook

        RSpec/EmptyLineAfterExample:
          Description: Checks if there is an empty line after example blocks.
          Enabled: true
          AllowConsecutiveOneLiners: true
          VersionAdded: '1.36'
          StyleGuide: https://rspec.rubystyle.guide/#empty-lines-around-examples
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/EmptyLineAfterExample

        RSpec/EmptyLineAfterExampleGroup:
          Description: Checks if there is an empty line after example group blocks.
          Enabled: true
          VersionAdded: '1.27'
          StyleGuide: https://rspec.rubystyle.guide/#empty-lines-between-describes
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/EmptyLineAfterExampleGroup

        RSpec/EmptyLineAfterFinalLet:
          Description: Checks if there is an empty line after the last let block.
          Enabled: true
          VersionAdded: '1.14'
          StyleGuide: https://rspec.rubystyle.guide/#empty-line-after-let
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/EmptyLineAfterFinalLet

        RSpec/EmptyLineAfterHook:
          Description: Checks if there is an empty line after hook blocks.
          Enabled: true
          VersionAdded: '1.27'
          VersionChanged: '2.13'
          StyleGuide: https://rspec.rubystyle.guide/#empty-line-after-let
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/EmptyLineAfterHook
          AllowConsecutiveOneLiners: true

        RSpec/EmptyLineAfterSubject:
          Description: Checks if there is an empty line after subject block.
          Enabled: true
          VersionAdded: '1.14'
          StyleGuide: https://rspec.rubystyle.guide/#empty-line-after-let
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/EmptyLineAfterSubject

        RSpec/EmptyMetadata:
          Description: Avoid empty metadata hash.
          Enabled: pending
          VersionAdded: '2.24'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/EmptyMetadata

        RSpec/EmptyOutput:
          Description: Check that the `output` matcher is not called with an empty string.
          Enabled: pending
          VersionAdded: '2.29'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/EmptyOutput

        RSpec/Eq:
          Description: Use `eq` instead of `be ==` to compare objects.
          Enabled: pending
          VersionAdded: '2.24'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Eq

        RSpec/ExampleLength:
          Description: Checks for long examples.
          Enabled: true
          Max: 5
          CountAsOne: []
          VersionAdded: '1.5'
          VersionChanged: '2.3'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ExampleLength

        RSpec/ExampleWithoutDescription:
          Description: Checks for examples without a description.
          Enabled: true
          EnforcedStyle: always_allow
          SupportedStyles:
            - always_allow
            - single_line_only
            - disallow
          VersionAdded: '1.22'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ExampleWithoutDescription

        RSpec/ExampleWording:
          Description: Checks for common mistakes in example descriptions.
          Enabled: true
          CustomTransform:
            be: is
            BE: IS
            have: has
            HAVE: HAS
          IgnoredWords: []
          DisallowedExamples:
            - works
          VersionAdded: '1.0'
          VersionChanged: '2.13'
          StyleGuide: https://rspec.rubystyle.guide/#should-in-example-docstrings
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ExampleWording

        RSpec/ExcessiveDocstringSpacing:
          Description: Checks for excessive whitespace in example descriptions.
          Enabled: pending
          VersionAdded: '2.5'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ExcessiveDocstringSpacing

        RSpec/ExpectActual:
          Description: Checks for `expect(...)` calls containing literal values.
          Enabled: true
          Exclude:
            - "**/spec/routing/**/*"
          VersionAdded: '1.7'
          VersionChanged: '2.23'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ExpectActual

        RSpec/ExpectChange:
          Description: Checks for consistent style of change matcher.
          Enabled: true
          EnforcedStyle: method_call
          SupportedStyles:
            - method_call
            - block
          SafeAutoCorrect: false
          VersionAdded: '1.22'
          VersionChanged: '2.5'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ExpectChange

        RSpec/ExpectInHook:
          Description: Do not use `expect` in hooks such as `before`.
          Enabled: true
          VersionAdded: '1.16'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ExpectInHook

        RSpec/ExpectOutput:
          Description: Checks for opportunities to use `expect { ... }.to output`.
          Enabled: true
          VersionAdded: '1.10'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ExpectOutput

        RSpec/FilePath:
          Description: Checks that spec file paths are consistent and well-formed.
          Enabled: true
          Include:
            - "**/*_spec*rb*"
            - "**/spec/**/*"
          CustomTransform:
            RuboCop: rubocop
            RSpec: rspec
          IgnoreMethods: false
          SpecSuffixOnly: false
          VersionAdded: '1.2'
          VersionChanged: '2.24'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/FilePath

        RSpec/Focus:
          Description: Checks if examples are focused.
          Enabled: true
          VersionAdded: '1.5'
          VersionChanged: '2.1'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Focus

        RSpec/HookArgument:
          Description: Checks the arguments passed to `before`, `around`, and `after`.
          Enabled: true
          EnforcedStyle: implicit
          SupportedStyles:
            - implicit
            - each
            - example
          VersionAdded: '1.7'
          StyleGuide: https://rspec.rubystyle.guide/#redundant-beforeeach
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/HookArgument

        RSpec/HooksBeforeExamples:
          Description: Checks for before/around/after hooks that come after an example.
          Enabled: true
          VersionAdded: '1.29'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/HooksBeforeExamples

        RSpec/IdenticalEqualityAssertion:
          Description: Checks for equality assertions with identical expressions on both sides.
          Enabled: pending
          VersionAdded: '2.4'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/IdenticalEqualityAssertion

        RSpec/ImplicitBlockExpectation:
          Description: Check that implicit block expectation syntax is not used.
          Enabled: true
          VersionAdded: '1.35'
          StyleGuide: https://rspec.rubystyle.guide/#implicit-block-expectations
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ImplicitBlockExpectation

        RSpec/ImplicitExpect:
          Description: Check that a consistent implicit expectation style is used.
          Enabled: true
          EnforcedStyle: is_expected
          SupportedStyles:
            - is_expected
            - should
          VersionAdded: '1.8'
          StyleGuide: https://rspec.rubystyle.guide/#use-expect
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ImplicitExpect

        RSpec/ImplicitSubject:
          Description: Checks for usage of implicit subject (`is_expected` / `should`).
          Enabled: true
          EnforcedStyle: single_line_only
          SupportedStyles:
            - single_line_only
            - single_statement_only
            - disallow
            - require_implicit
          VersionAdded: '1.29'
          VersionChanged: '2.13'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ImplicitSubject

        RSpec/IndexedLet:
          Description: Do not set up test data using indexes (e.g., `item_1`, `item_2`).
          Enabled: pending
          VersionAdded: '2.20'
          VersionChanged: '2.23'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/IndexedLet
          Max: 1
          AllowedIdentifiers: []
          AllowedPatterns: []

        RSpec/InstanceSpy:
          Description: Checks for `instance_double` used with `have_received`.
          Enabled: true
          VersionAdded: '1.12'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/InstanceSpy

        RSpec/InstanceVariable:
          Description: Checks for instance variable usage in specs.
          Enabled: true
          AssignmentOnly: false
          VersionAdded: '1.0'
          VersionChanged: '1.7'
          StyleGuide: https://rspec.rubystyle.guide/#instance-variables
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/InstanceVariable

        RSpec/IsExpectedSpecify:
          Description: Check for `specify` with `is_expected` and one-liner expectations.
          Enabled: pending
          VersionAdded: '2.27'
          StyleGuide: https://rspec.rubystyle.guide/#it-and-specify
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/IsExpectedSpecify

        RSpec/ItBehavesLike:
          Description: Checks that only one `it_behaves_like` style is used.
          Enabled: true
          EnforcedStyle: it_behaves_like
          SupportedStyles:
            - it_behaves_like
            - it_should_behave_like
          VersionAdded: '1.13'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ItBehavesLike

        RSpec/IteratedExpectation:
          Description: Check that `all` matcher is used instead of iterating over an array.
          Enabled: true
          VersionAdded: '1.14'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/IteratedExpectation

        RSpec/LeadingSubject:
          Description: Enforce that subject is the first definition in the test.
          Enabled: true
          VersionAdded: '1.7'
          VersionChanged: '1.14'
          StyleGuide: https://rspec.rubystyle.guide/#leading-subject
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/LeadingSubject

        RSpec/LeakyConstantDeclaration:
          Description: Checks that no class, module, or constant is declared.
          Enabled: true
          VersionAdded: '1.35'
          StyleGuide: https://rspec.rubystyle.guide/#declare-constants
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/LeakyConstantDeclaration

        RSpec/LetBeforeExamples:
          Description: Checks for `let` definitions that come after an example.
          Enabled: true
          VersionAdded: '1.16'
          VersionChanged: '1.22'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/LetBeforeExamples

        RSpec/LetSetup:
          Description: Checks unreferenced `let!` calls being used for test setup.
          Enabled: true
          VersionAdded: '1.7'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/LetSetup

        RSpec/MatchArray:
          Description: Checks where `match_array` is used.
          Enabled: pending
          VersionAdded: '2.19'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/MatchArray

        RSpec/MessageChain:
          Description: Check that chains of messages are not being stubbed.
          Enabled: true
          VersionAdded: '1.7'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/MessageChain

        RSpec/MessageExpectation:
          Description: Checks for consistent message expectation style.
          Enabled: false
          EnforcedStyle: allow
          SupportedStyles:
            - allow
            - expect
          VersionAdded: '1.7'
          VersionChanged: '1.8'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/MessageExpectation

        RSpec/MessageSpies:
          Description: Checks that message expectations are set using spies.
          Enabled: true
          EnforcedStyle: have_received
          SupportedStyles:
            - have_received
            - receive
          VersionAdded: '1.9'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/MessageSpies

        RSpec/MetadataStyle:
          Description: Use consistent metadata style.
          Enabled: pending
          EnforcedStyle: symbol
          SupportedStyles:
            - hash
            - symbol
          VersionAdded: '2.24'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/MetadataStyle

        RSpec/MissingExampleGroupArgument:
          Description: Checks that the first argument to an example group is not empty.
          Enabled: true
          VersionAdded: '1.28'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/MissingExampleGroupArgument

        RSpec/MultipleDescribes:
          Description: Checks for multiple top-level example groups.
          Enabled: true
          VersionAdded: '1.0'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/MultipleDescribes

        RSpec/MultipleExpectations:
          Description: Checks if examples contain too many `expect` calls.
          Enabled: true
          Max: 1
          VersionAdded: '1.7'
          VersionChanged: '1.21'
          StyleGuide: https://rspec.rubystyle.guide/#expectation-per-example
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/MultipleExpectations

        RSpec/MultipleMemoizedHelpers:
          Description: Checks if example groups contain too many `let` and `subject` calls.
          Enabled: true
          AllowSubject: true
          Max: 5
          VersionAdded: '1.43'
          StyleGuide: https://rspec.rubystyle.guide/#let-blocks
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/MultipleMemoizedHelpers

        RSpec/MultipleSubjects:
          Description: Checks if an example group defines `subject` multiple times.
          Enabled: true
          VersionAdded: '1.16'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/MultipleSubjects

        RSpec/NamedSubject:
          Description: Checks for explicitly referenced test subjects.
          Enabled: true
          EnforcedStyle: always
          SupportedStyles:
            - always
            - named_only
          IgnoreSharedExamples: true
          VersionAdded: 1.5.3
          VersionChanged: '2.15'
          StyleGuide: https://rspec.rubystyle.guide/#use-subject
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/NamedSubject

        RSpec/NestedGroups:
          Description: Checks for nested example groups.
          Enabled: true
          Max: 3
          AllowedGroups: []
          VersionAdded: '1.7'
          VersionChanged: '2.13'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/NestedGroups

        RSpec/NoExpectationExample:
          Description: Checks if an example contains any expectation.
          Enabled: pending
          Safe: false
          VersionAdded: '2.13'
          VersionChanged: '2.14'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/NoExpectationExample
          AllowedPatterns:
            - "^expect_"
            - "^assert_"

        RSpec/NotToNot:
          Description: Checks for consistent method usage for negating expectations.
          Enabled: true
          EnforcedStyle: not_to
          SupportedStyles:
            - not_to
            - to_not
          VersionAdded: '1.4'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/NotToNot

        RSpec/OverwritingSetup:
          Description: Checks if there is a let/subject that overwrites an existing one.
          Enabled: true
          VersionAdded: '1.14'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/OverwritingSetup

        RSpec/Pending:
          Description: Checks for any pending or skipped examples.
          Enabled: false
          VersionAdded: '1.25'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Pending

        RSpec/PendingWithoutReason:
          Description: Checks for pending or skipped examples without reason.
          Enabled: pending
          VersionAdded: '2.16'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/PendingWithoutReason

        RSpec/PredicateMatcher:
          Description: Prefer using predicate matcher over using predicate method directly.
          Enabled: true
          Strict: true
          EnforcedStyle: inflected
          AllowedExplicitMatchers: []
          SupportedStyles:
            - inflected
            - explicit
          SafeAutoCorrect: false
          VersionAdded: '1.16'
          StyleGuide: https://rspec.rubystyle.guide/#predicate-matchers
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/PredicateMatcher

        RSpec/ReceiveCounts:
          Description: Check for `once` and `twice` receive counts matchers usage.
          Enabled: true
          VersionAdded: '1.26'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ReceiveCounts

        RSpec/ReceiveMessages:
          Description: Checks for multiple messages stubbed on the same object.
          Enabled: pending
          SafeAutoCorrect: false
          VersionAdded: '2.23'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ReceiveMessages

        RSpec/ReceiveNever:
          Description: Prefer `not_to receive(...)` over `receive(...).never`.
          Enabled: true
          VersionAdded: '1.28'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ReceiveNever

        RSpec/RedundantAround:
          Description: Remove redundant `around` hook.
          Enabled: pending
          VersionAdded: '2.19'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/RedundantAround

        RSpec/RedundantPredicateMatcher:
          Description: Checks for redundant predicate matcher.
          Enabled: pending
          VersionAdded: '2.26'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/RedundantPredicateMatcher

        RSpec/RemoveConst:
          Description: Checks that `remove_const` is not used in specs.
          Enabled: pending
          VersionAdded: '2.26'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/RemoveConst

        RSpec/RepeatedDescription:
          Description: Check for repeated description strings in example groups.
          Enabled: true
          VersionAdded: '1.9'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/RepeatedDescription

        RSpec/RepeatedExample:
          Description: Check for repeated examples within example groups.
          Enabled: true
          VersionAdded: '1.10'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/RepeatedExample

        RSpec/RepeatedExampleGroupBody:
          Description: Check for repeated describe and context block body.
          Enabled: true
          VersionAdded: '1.38'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/RepeatedExampleGroupBody

        RSpec/RepeatedExampleGroupDescription:
          Description: Check for repeated example group descriptions.
          Enabled: true
          VersionAdded: '1.38'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/RepeatedExampleGroupDescription

        RSpec/RepeatedIncludeExample:
          Description: Check for repeated include of shared examples.
          Enabled: true
          VersionAdded: '1.44'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/RepeatedIncludeExample

        RSpec/RepeatedSubjectCall:
          Description: Checks for repeated calls to subject missing that it is memoized.
          Enabled: pending
          VersionAdded: '2.27'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/RepeatedSubjectCall

        RSpec/ReturnFromStub:
          Description: Checks for consistent style of stub's return setting.
          Enabled: true
          EnforcedStyle: and_return
          SupportedStyles:
            - and_return
            - block
          VersionAdded: '1.16'
          VersionChanged: '1.22'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ReturnFromStub

        RSpec/ScatteredLet:
          Description: Checks for let scattered across the example group.
          Enabled: true
          VersionAdded: '1.14'
          VersionChanged: '1.39'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ScatteredLet

        RSpec/ScatteredSetup:
          Description: Checks for setup scattered across multiple hooks in an example group.
          Enabled: true
          VersionAdded: '1.10'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ScatteredSetup

        RSpec/SharedContext:
          Description: Checks for proper shared_context and shared_examples usage.
          Enabled: true
          VersionAdded: '1.13'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/SharedContext

        RSpec/SharedExamples:
          Description: Checks for consistent style for shared example names.
          Enabled: true
          EnforcedStyle: string
          SupportedStyles:
            - string
            - symbol
          VersionAdded: '1.25'
          VersionChanged: '2.26'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/SharedExamples

        RSpec/SingleArgumentMessageChain:
          Description: Checks that chains of messages contain more than one element.
          Enabled: true
          VersionAdded: '1.9'
          VersionChanged: '1.10'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/SingleArgumentMessageChain

        RSpec/SkipBlockInsideExample:
          Description: Checks for passing a block to `skip` within examples.
          Enabled: pending
          VersionAdded: '2.19'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/SkipBlockInsideExample

        RSpec/SortMetadata:
          Description: Sort RSpec metadata alphabetically.
          Enabled: pending
          VersionAdded: '2.14'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/SortMetadata

        RSpec/SpecFilePathFormat:
          Description: Checks that spec file paths are consistent and well-formed.
          Enabled: pending
          Include:
            - "**/*_spec.rb"
          Exclude:
            - "**/spec/routing/**/*"
          CustomTransform:
            RuboCop: rubocop
            RSpec: rspec
          IgnoreMethods: false
          IgnoreMetadata:
            type: routing
          VersionAdded: '2.24'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/SpecFilePathFormat

        RSpec/SpecFilePathSuffix:
          Description: Checks that spec file paths suffix are consistent and well-formed.
          Enabled: pending
          VersionAdded: '2.24'
          Include:
            - "**/*_spec*rb*"
            - "**/spec/**/*"
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/SpecFilePathSuffix

        RSpec/StubbedMock:
          Description: Checks that message expectations do not have a configured response.
          Enabled: true
          VersionAdded: '1.44'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/StubbedMock

        RSpec/SubjectDeclaration:
          Description: Ensure that subject is defined using subject helper.
          Enabled: pending
          VersionAdded: '2.5'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/SubjectDeclaration

        RSpec/SubjectStub:
          Description: Checks for stubbed test subjects.
          Enabled: true
          VersionAdded: '1.7'
          VersionChanged: '2.8'
          StyleGuide: https://rspec.rubystyle.guide/#dont-stub-subject
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/SubjectStub

        RSpec/UndescriptiveLiteralsDescription:
          Description: Description should be descriptive.
          Enabled: pending
          VersionAdded: '2.29'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/UndescriptiveLiteralsDescription

        RSpec/UnspecifiedException:
          Description: Checks for a specified error in checking raised errors.
          Enabled: true
          VersionAdded: '1.30'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/UnspecifiedException

        RSpec/VariableDefinition:
          Description: Checks that memoized helpers names are symbols or strings.
          Enabled: true
          EnforcedStyle: symbols
          SupportedStyles:
            - symbols
            - strings
          VersionAdded: '1.40'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/VariableDefinition

        RSpec/VariableName:
          Description: Checks that memoized helper names use the configured style.
          Enabled: true
          EnforcedStyle: snake_case
          SupportedStyles:
            - snake_case
            - camelCase
          AllowedPatterns: []
          VersionAdded: '1.40'
          VersionChanged: '2.13'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/VariableName

        RSpec/VerifiedDoubleReference:
          Description: Checks for consistent verified double reference style.
          Enabled: pending
          SafeAutoCorrect: false
          EnforcedStyle: constant
          SupportedStyles:
            - constant
            - string
          VersionAdded: 2.10.0
          VersionChanged: '2.12'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/VerifiedDoubleReference

        RSpec/VerifiedDoubles:
          Description: Prefer using verifying doubles over normal doubles.
          Enabled: true
          IgnoreNameless: true
          IgnoreSymbolicNames: false
          VersionAdded: 1.2.1
          VersionChanged: '1.5'
          StyleGuide: https://rspec.rubystyle.guide/#doubles
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/VerifiedDoubles

        RSpec/VoidExpect:
          Description: Checks void `expect()`.
          Enabled: true
          VersionAdded: '1.16'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/VoidExpect

        RSpec/Yield:
          Description: Checks for calling a block within a stub.
          Enabled: true
          VersionAdded: '1.32'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Yield

        RSpec/Capybara:
          Enabled: true
          Include: *1
          Language: *2

        RSpec/Capybara/CurrentPathExpectation:
          Description: Checks that no expectations are set on Capybara's `current_path`.
          Enabled: true
          VersionAdded: '1.18'
          VersionChanged: '2.0'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Capybara/CurrentPathExpectation

        RSpec/Capybara/FeatureMethods:
          Description: Checks for consistent method usage in feature specs.
          Enabled: true
          EnabledMethods: []
          VersionAdded: '1.17'
          VersionChanged: '2.0'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Capybara/FeatureMethods

        RSpec/Capybara/MatchStyle:
          Description: Checks for usage of deprecated style methods.
          Enabled: pending
          VersionAdded: '2.17'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Capybara/MatchStyle

        RSpec/Capybara/NegationMatcher:
          Description: Enforces use of `have_no_*` or `not_to` for negated expectations.
          Enabled: pending
          VersionAdded: '2.14'
          EnforcedStyle: not_to
          SupportedStyles:
            - have_no
            - not_to
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Capybara/NegationMatcher

        RSpec/Capybara/SpecificActions:
          Description: Checks for there is a more specific actions offered by Capybara.
          Enabled: pending
          VersionAdded: '2.14'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Capybara/SpecificActions

        RSpec/Capybara/SpecificFinders:
          Description: Checks if there is a more specific finder offered by Capybara.
          Enabled: pending
          VersionAdded: '2.13'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Capybara/SpecificFinders

        RSpec/Capybara/SpecificMatcher:
          Description: Checks for there is a more specific matcher offered by Capybara.
          Enabled: pending
          VersionAdded: '2.12'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Capybara/SpecificMatcher

        RSpec/Capybara/VisibilityMatcher:
          Description: Checks for boolean visibility in Capybara finders.
          Enabled: true
          VersionAdded: '1.39'
          VersionChanged: '2.0'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Capybara/VisibilityMatcher

        RSpec/FactoryBot:
          Enabled: true
          Include: *1
          Language: *2

        RSpec/FactoryBot/AttributeDefinedStatically:
          Description: Always declare attribute values as blocks.
          Enabled: true
          Include:
            - "**/spec/factories.rb"
            - "**/spec/factories/**/*.rb"
            - "**/features/support/factories/**/*.rb"
          VersionAdded: '1.28'
          VersionChanged: '2.23'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/FactoryBot/AttributeDefinedStatically

        RSpec/FactoryBot/ConsistentParenthesesStyle:
          Description: Use a consistent style for parentheses in factory bot calls.
          Enabled: pending
          EnforcedStyle: require_parentheses
          SupportedStyles:
            - require_parentheses
            - omit_parentheses
          VersionAdded: '2.14'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/FactoryBot/ConsistentParenthesesStyle

        RSpec/FactoryBot/CreateList:
          Description: Checks for create_list usage.
          Enabled: true
          Include:
            - "**/*_spec.rb"
            - "**/spec/**/*"
            - "**/spec/factories.rb"
            - "**/spec/factories/**/*.rb"
            - "**/features/support/factories/**/*.rb"
          EnforcedStyle: create_list
          SupportedStyles:
            - create_list
            - n_times
          VersionAdded: '1.25'
          VersionChanged: '2.23'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/FactoryBot/CreateList

        RSpec/FactoryBot/FactoryClassName:
          Description: Use string value when setting the class attribute explicitly.
          Enabled: true
          Include:
            - "**/spec/factories.rb"
            - "**/spec/factories/**/*.rb"
            - "**/features/support/factories/**/*.rb"
          VersionAdded: '1.37'
          VersionChanged: '2.23'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/FactoryBot/FactoryClassName

        RSpec/FactoryBot/FactoryNameStyle:
          Description: Checks for name style for argument of FactoryBot::Syntax::Methods.
          Enabled: pending
          VersionAdded: '2.16'
          EnforcedStyle: symbol
          SupportedStyles:
            - symbol
            - string
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/FactoryBot/FactoryNameStyle

        RSpec/FactoryBot/SyntaxMethods:
          Description: Use shorthands from `FactoryBot::Syntax::Methods` in your specs.
          Enabled: pending
          SafeAutoCorrect: false
          VersionAdded: '2.7'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/FactoryBot/SyntaxMethods

        RSpec/Rails:
          Enabled: true
          Include: *1
          Language: *2

        RSpec/Rails/AvoidSetupHook:
          Description: Checks that tests use RSpec `before` hook over Rails `setup` method.
          Enabled: pending
          VersionAdded: '2.4'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Rails/AvoidSetupHook

        RSpec/Rails/HaveHttpStatus:
          Description: Checks that tests use `have_http_status` instead of equality matchers.
          Enabled: pending
          ResponseMethods:
            - response
            - last_response
          SafeAutoCorrect: false
          VersionAdded: '2.12'
          VersionChanged: '2.27'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Rails/HaveHttpStatus

        RSpec/Rails/HttpStatus:
          Description: Enforces use of symbolic or numeric value to describe HTTP status.
          Enabled: true
          EnforcedStyle: symbolic
          SupportedStyles:
            - numeric
            - symbolic
            - be_status
          VersionAdded: '1.23'
          VersionChanged: '2.20'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Rails/HttpStatus

        RSpec/Rails/InferredSpecType:
          Description: Identifies redundant spec type.
          Enabled: pending
          Safe: false
          VersionAdded: '2.14'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Rails/InferredSpecType
          Inferences:
            channels: channel
            controllers: controller
            features: feature
            generator: generator
            helpers: helper
            jobs: job
            mailboxes: mailbox
            mailers: mailer
            models: model
            requests: request
            integration: request
            api: request
            routing: routing
            system: system
            views: view

        RSpec/Rails/MinitestAssertions:
          Description: Check if using Minitest-like matchers.
          Enabled: pending
          VersionAdded: '2.17'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Rails/MinitestAssertions

        RSpec/Rails/NegationBeValid:
          Description: Enforces use of `be_invalid` or `not_to` for negated be_valid.
          Safe: false
          EnforcedStyle: not_to
          SupportedStyles:
            - not_to
            - be_invalid
          Enabled: pending
          VersionAdded: '2.23'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Rails/NegationBeValid

        RSpec/Rails/TravelAround:
          Description: Prefer to travel in `before` rather than `around`.
          Enabled: pending
          Safe: false
          VersionAdded: '2.19'
          Reference: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Rails/TravelAround
  recorded_at: Mon, 27 May 2024 05:30:47 GMT
recorded_with: VCR 6.2.0
