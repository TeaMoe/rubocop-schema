---
http_interactions:
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop/v1.16.0/docs/modules/ROOT/pages/cops.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 500
      message: Internal Server Error
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '26'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      Content-Type:
      - text/plain; charset=utf-8
      X-Github-Request-Id:
      - 7C60:7B05:25CBC2:2F32BE:60B7400B
      Fastly-Restarts:
      - '1'
      Accept-Ranges:
      - bytes
      Date:
      - Wed, 02 Jun 2021 08:23:45 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-syd10139-SYD
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1622622213.055694,VS0,VE12406
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 417134f14ea3305418d4e0187c69dcb97dfc0d12
      Expires:
      - Wed, 02 Jun 2021 08:28:45 GMT
    body:
      encoding: UTF-8
      string: '500: Internal Server Error'
  recorded_at: Wed, 02 Jun 2021 08:23:45 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop/v1.16.0/config/default.yml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '33643'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"5d1a381590716a6984565866b84f68531f221fed72fcdfd6f56ee27aa80d6064"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 92B2:69C4:70BB7:D8F70:60B74018
      Fastly-Restarts:
      - '1'
      Accept-Ranges:
      - bytes
      Date:
      - Wed, 02 Jun 2021 08:23:59 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-syd10143-SYD
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1622622226.636803,VS0,VE13490
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 71736a0259498992788a64462f7a3d4325772711
      Expires:
      - Wed, 02 Jun 2021 08:28:59 GMT
      Source-Age:
      - '1'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 02 Jun 2021 08:23:59 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-minitest/v0.12.1/docs/modules/ROOT/pages/cops.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '714'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"b250952b5d916f068fcfeea4bb10e17a5d69ee910992906b9a5df792c5f0cdf3"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 6A40:32B5:4BD4A2:60F3AA:60B74025
      Fastly-Restarts:
      - '1'
      Accept-Ranges:
      - bytes
      Date:
      - Wed, 02 Jun 2021 08:24:11 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-syd10174-SYD
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1622622239.416144,VS0,VE12499
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 9b647c9a60df4c215bbff7cd68773329f6f2a766
      Expires:
      - Wed, 02 Jun 2021 08:29:11 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        = Cops

        In RuboCop lingo the various checks performed on the code are called cops.
        Each cop is responsible for detecting one particular offense.
        RuboCop Minitest has only one Minitest department.

        == Minitest

        Minitest cops check for Minitest best practices and coding conventions. Many of the them are
        based on the https://minitest.rubystyle.guide/[Minitest Style Guide].

        // START_COP_LIST

        === Department xref:cops_minitest.adoc[Minitest]

        * xref:cops_minitest.adoc#minitestassertempty[Minitest/AssertEmpty]
        * xref:cops_minitest.adoc#minitestassertemptyliteral[Minitest/AssertEmptyLiteral]
        * xref:cops_minitest.adoc#minitestassertequal[Minitest/AssertEqual]
        * xref:cops_minitest.adoc#minitestassertindelta[Minitest/AssertInDelta]
        * xref:cops_minitest.adoc#minitestassertincludes[Minitest/AssertIncludes]
        * xref:cops_minitest.adoc#minitestassertinstanceof[Minitest/AssertInstanceOf]
        * xref:cops_minitest.adoc#minitestassertkindof[Minitest/AssertKindOf]
        * xref:cops_minitest.adoc#minitestassertmatch[Minitest/AssertMatch]
        * xref:cops_minitest.adoc#minitestassertnil[Minitest/AssertNil]
        * xref:cops_minitest.adoc#minitestassertoutput[Minitest/AssertOutput]
        * xref:cops_minitest.adoc#minitestassertpathexists[Minitest/AssertPathExists]
        * xref:cops_minitest.adoc#minitestassertrespondto[Minitest/AssertRespondTo]
        * xref:cops_minitest.adoc#minitestassertsilent[Minitest/AssertSilent]
        * xref:cops_minitest.adoc#minitestasserttruthy[Minitest/AssertTruthy]
        * xref:cops_minitest.adoc#minitestassertwithexpectedargument[Minitest/AssertWithExpectedArgument]
        * xref:cops_minitest.adoc#minitestassertioninlifecyclehook[Minitest/AssertionInLifecycleHook]
        * xref:cops_minitest.adoc#minitestglobalexpectations[Minitest/GlobalExpectations]
        * xref:cops_minitest.adoc#minitestliteralasactualargument[Minitest/LiteralAsActualArgument]
        * xref:cops_minitest.adoc#minitestmultipleassertions[Minitest/MultipleAssertions]
        * xref:cops_minitest.adoc#minitestnoassertions[Minitest/NoAssertions]
        * xref:cops_minitest.adoc#minitestrefuteempty[Minitest/RefuteEmpty]
        * xref:cops_minitest.adoc#minitestrefuteequal[Minitest/RefuteEqual]
        * xref:cops_minitest.adoc#minitestrefutefalse[Minitest/RefuteFalse]
        * xref:cops_minitest.adoc#minitestrefuteindelta[Minitest/RefuteInDelta]
        * xref:cops_minitest.adoc#minitestrefuteincludes[Minitest/RefuteIncludes]
        * xref:cops_minitest.adoc#minitestrefuteinstanceof[Minitest/RefuteInstanceOf]
        * xref:cops_minitest.adoc#minitestrefutekindof[Minitest/RefuteKindOf]
        * xref:cops_minitest.adoc#minitestrefutematch[Minitest/RefuteMatch]
        * xref:cops_minitest.adoc#minitestrefutenil[Minitest/RefuteNil]
        * xref:cops_minitest.adoc#minitestrefutepathexists[Minitest/RefutePathExists]
        * xref:cops_minitest.adoc#minitestrefuterespondto[Minitest/RefuteRespondTo]
        * xref:cops_minitest.adoc#minitesttestmethodname[Minitest/TestMethodName]
        * xref:cops_minitest.adoc#minitestunspecifiedexception[Minitest/UnspecifiedException]

        // END_COP_LIST
  recorded_at: Wed, 02 Jun 2021 08:24:11 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-minitest/v0.12.1/docs/modules/ROOT/pages/cops_minitest.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '2485'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"985b6461acb1c843d0f527c5979629e2ef76efb3a3300ca01d08e43496089a38"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - EE74:57D0:15DBF5:2AD782:60B7402C
      Accept-Ranges:
      - bytes
      Date:
      - Wed, 02 Jun 2021 08:24:18 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-syd10120-SYD
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1622622252.087456,VS0,VE6180
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 83d225dde616d52be03a648b25ed72097ac8005c
      Expires:
      - Wed, 02 Jun 2021 08:29:18 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        = Minitest

        == Minitest/AssertEmpty

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.2
        | -
        |===

        This cop enforces the test to use `assert_empty`
        instead of using `assert(object.empty?)`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert(object.empty?)
        assert(object.empty?, 'message')

        # good
        assert_empty(object)
        assert_empty(object, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide#assert-empty

        == Minitest/AssertEmptyLiteral

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes (Unsafe)
        | 0.5
        | 0.11
        |===

        This cop enforces the test to use `assert_empty`
        instead of using `assert_equal([], object)`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert_equal([], object)
        assert_equal({}, object)

        # good
        assert_empty(object)
        ----

        == Minitest/AssertEqual

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.4
        | -
        |===

        This cop enforces the use of `assert_equal(expected, actual)`
        over `assert(expected == actual)`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert("rubocop-minitest" == actual)

        # good
        assert_equal("rubocop-minitest", actual)
        ----

        === References

        * https://minitest.rubystyle.guide#assert-equal-arguments-order

        == Minitest/AssertInDelta

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | Yes
        | 0.10
        | -
        |===

        This cop enforces the test to use `assert_in_delta`
        instead of using `assert_equal` to compare floats.

        === Examples

        [source,ruby]
        ----
        # bad
        assert_equal(0.2, actual)
        assert_equal(0.2, actual, 'message')

        # good
        assert_in_delta(0.2, actual)
        assert_in_delta(0.2, actual, 0.001, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide/#assert-in-delta

        == Minitest/AssertIncludes

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.2
        | -
        |===

        This cop enforces the test to use `assert_includes`
        instead of using `assert(collection.include?(object))`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert(collection.include?(object))
        assert(collection.include?(object), 'message')

        # good
        assert_includes(collection, object)
        assert_includes(collection, object, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide#assert-includes

        == Minitest/AssertInstanceOf

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.4
        | -
        |===

        This cop enforces the test to use `assert_instance_of(Class, object)`
        over `assert(object.instance_of?(Class))`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert(object.instance_of?(Class))
        assert(object.instance_of?(Class), 'message')

        # good
        assert_instance_of(Class, object)
        assert_instance_of(Class, object, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide#assert-instance-of

        == Minitest/AssertKindOf

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | Yes
        | 0.10
        | -
        |===

        This cop enforces the test to use `assert_kind_of(Class, object)`
        over `assert(object.kind_of?(Class))`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert(object.kind_of?(Class))
        assert(object.kind_of?(Class), 'message')

        # good
        assert_kind_of(Class, object)
        assert_kind_of(Class, object, 'message')
        ----

        === References

        * https://github.com/rubocop/minitest-style-guide#assert-kind-of

        == Minitest/AssertMatch

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.6
        | -
        |===

        This cop enforces the test to use `assert_match`
        instead of using `assert(matcher.match(string))`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert(matcher.match(string))
        assert(matcher.match(string), 'message')

        # good
        assert_match(regex, string)
        assert_match(matcher, string, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide#assert-match

        == Minitest/AssertNil

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.1
        | -
        |===

        This cop enforces the test to use `assert_nil`
        instead of using `assert_equal(nil, something)`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert_equal(nil, actual)
        assert_equal(nil, actual, 'message')

        # good
        assert_nil(actual)
        assert_nil(actual, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide#assert-nil

        == Minitest/AssertOutput

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | No
        | 0.10
        | -
        |===

        This cop checks for opportunities to use `assert_output`.

        === Examples

        [source,ruby]
        ----
        # bad
        $stdout = StringIO.new
        puts object.method
        $stdout.rewind
        assert_match expected, $stdout.read

        # good
        assert_output(expected) { puts object.method }
        ----

        === References

        * https://minitest.rubystyle.guide/#assert-output

        == Minitest/AssertPathExists

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | Yes
        | 0.10
        | -
        |===

        This cop enforces the test to use `assert_path_exists`
        instead of using `assert(File.exist?(path))`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert(File.exist?(path))
        assert(File.exist?(path), 'message')

        # good
        assert_path_exists(path)
        assert_path_exists(path, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide/#assert-path-exists

        == Minitest/AssertRespondTo

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.3
        | -
        |===

        This cop enforces the use of `assert_respond_to(object, :do_something)`
        over `assert(object.respond_to?(:do_something))`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert(object.respond_to?(:do_something))
        assert(object.respond_to?(:do_something), 'message')
        assert(respond_to?(:do_something))

        # good
        assert_respond_to(object, :do_something)
        assert_respond_to(object, :do_something, 'message')
        assert_respond_to(self, :do_something)
        ----

        === References

        * https://minitest.rubystyle.guide#assert-responds-to-method

        == Minitest/AssertSilent

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | Yes
        | 0.10
        | -
        |===

        This cop enforces the test to use `assert_silent { ... }`
        instead of using `assert_output('', '') { ... }`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert_output('', '') { puts object.do_something }

        # good
        assert_silent { puts object.do_something }
        ----

        === References

        * https://github.com/rubocop/minitest-style-guide#assert-silent

        == Minitest/AssertTruthy

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.2
        | -
        |===

        This cop enforces the test to use `assert(actual)`
        instead of using `assert_equal(true, actual)`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert_equal(true, actual)
        assert_equal(true, actual, 'message')

        # good
        assert(actual)
        assert(actual, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide#assert-truthy

        == Minitest/AssertWithExpectedArgument

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | No
        | No
        | 0.11
        | -
        |===

        This cop tries to detect when a user accidentally used
        `assert` when they meant to use `assert_equal`.

        It is marked as unsafe because it is not possible to determine
        whether the second argument of `assert` is a message or not.

        === Examples

        [source,ruby]
        ----
        # bad
        assert(3, my_list.length)
        assert(expected, actual)

        # good
        assert_equal(3, my_list.length)
        assert_equal(expected, actual)
        assert(foo, 'message')
        ----

        == Minitest/AssertionInLifecycleHook

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | No
        | 0.10
        | -
        |===

        This cop checks for usage of assertions in lifecycle hooks.

        === Examples

        [source,ruby]
        ----
        # bad
        class FooTest < Minitest::Test
          def setup
            assert_equal(foo, bar)
          end
        end

        # good
        class FooTest < Minitest::Test
          def test_something
            assert_equal(foo, bar)
          end
        end
        ----

        == Minitest/GlobalExpectations

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.7
        | -
        |===

        This cop checks for deprecated global expectations
        and autocorrects them to use expect format.

        === Examples

        [source,ruby]
        ----
        # bad
        musts.must_equal expected_musts
        wonts.wont_match expected_wonts
        musts.must_raise TypeError

        # good
        _(musts).must_equal expected_musts
        _(wonts).wont_match expected_wonts
        _ { musts }.must_raise TypeError
        ----

        === References

        * https://minitest.rubystyle.guide#global-expectations

        == Minitest/LiteralAsActualArgument

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | Yes
        | 0.10
        | -
        |===

        This cop enforces correct order of expected and
        actual arguments for `assert_equal`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert_equal foo, 2
        assert_equal foo, [1, 2]
        assert_equal foo, [1, 2], 'message'

        # good
        assert_equal 2, foo
        assert_equal [1, 2], foo
        assert_equal [1, 2], foo, 'message'
        ----

        === References

        * https://minitest.rubystyle.guide/#assert-equal-arguments-order

        == Minitest/MultipleAssertions

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | No
        | 0.10
        | -
        |===

        This cop checks if test cases contain too many assertion calls.
        The maximum allowed assertion calls is configurable.

        === Examples

        ==== Max: 1

        [source,ruby]
        ----
        # bad
        class FooTest < Minitest::Test
          def test_asserts_twice
            assert_equal(42, do_something)
            assert_empty(array)
          end
        end

        # good
        class FooTest < Minitest::Test
          def test_asserts_once
            assert_equal(42, do_something)
          end

          def test_another_asserts_once
            assert_empty(array)
          end
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Max
        | `3`
        | Integer
        |===

        == Minitest/NoAssertions

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Disabled
        | Yes
        | No
        | 0.12
        | -
        |===

        This cop checks if test cases contain any assertion calls.

        === Examples

        [source,ruby]
        ----
        # bad
        class FooTest < Minitest::Test
          def test_the_truth
          end
        end

        # good
        class FooTest < Minitest::Test
          def test_the_truth
            assert true
          end
        end
        ----

        == Minitest/RefuteEmpty

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.3
        | -
        |===

        This cop enforces to use `refute_empty` instead of
        using `refute(object.empty?)`.

        === Examples

        [source,ruby]
        ----
        # bad
        refute(object.empty?)
        refute(object.empty?, 'message')

        # good
        refute_empty(object)
        refute_empty(object, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide#refute-empty

        == Minitest/RefuteEqual

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.3
        | -
        |===

        This cop enforces the use of `refute_equal(expected, object)`
        over `assert(expected != actual)` or `assert(! expected == actual)`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert("rubocop-minitest" != actual)
        assert(! "rubocop-minitest" == actual)

        # good
        refute_equal("rubocop-minitest", actual)
        ----

        === References

        * https://minitest.rubystyle.guide#refute-equal

        == Minitest/RefuteFalse

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.3
        | -
        |===

        This cop enforces the use of `refute(object)`
        over `assert_equal(false, object)`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert_equal(false, actual)
        assert_equal(false, actual, 'message')

        assert(!test)
        assert(!test, 'message')

        # good
        refute(actual)
        refute(actual, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide#refute-false

        == Minitest/RefuteInDelta

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | Yes
        | 0.10
        | -
        |===

        This cop enforces the test to use `refute_in_delta`
        instead of using `refute_equal` to compare floats.

        === Examples

        [source,ruby]
        ----
        # bad
        refute_equal(0.2, actual)
        refute_equal(0.2, actual, 'message')

        # good
        refute_in_delta(0.2, actual)
        refute_in_delta(0.2, actual, 0.001, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide/#refute-in-delta

        == Minitest/RefuteIncludes

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.3
        | -
        |===

        This cop enforces the test to use `refute_includes`
        instead of using `refute(collection.include?(object))`.

        === Examples

        [source,ruby]
        ----
        # bad
        refute(collection.include?(object))
        refute(collection.include?(object), 'message')

        # good
        refute_includes(collection, object)
        refute_includes(collection, object, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide#refute-includes

        == Minitest/RefuteInstanceOf

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.4
        | -
        |===

        This cop enforces the use of `refute_instance_of(Class, object)`
        over `refute(object.instance_of?(Class))`.

        === Examples

        [source,ruby]
        ----
        # bad
        refute(object.instance_of?(Class))
        refute(object.instance_of?(Class), 'message')

        # good
        refute_instance_of(Class, object)
        refute_instance_of(Class, object, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide#refute-instance-of

        == Minitest/RefuteKindOf

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | Yes
        | 0.10
        | -
        |===

        This cop enforces the use of `refute_kind_of(Class, object)`
        over `refute(object.kind_of?(Class))`.

        === Examples

        [source,ruby]
        ----
        # bad
        refute(object.kind_of?(Class))
        refute(object.kind_of?(Class), 'message')

        # good
        refute_kind_of(Class, object)
        refute_kind_of(Class, object, 'message')
        ----

        === References

        * https://github.com/rubocop/minitest-style-guide#refute-kind-of

        == Minitest/RefuteMatch

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.6
        | -
        |===

        This cop enforces the test to use `refute_match`
        instead of using `refute(matcher.match(string))`.

        === Examples

        [source,ruby]
        ----
        # bad
        refute(matcher.match(string))
        refute(matcher.match(string), 'message')

        # good
        refute_match(matcher, string)
        refute_match(matcher, string, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide#refute-match

        == Minitest/RefuteNil

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.2
        | -
        |===

        This cop enforces the test to use `refute_nil`
        instead of using `refute_equal(nil, something)`.

        === Examples

        [source,ruby]
        ----
        # bad
        refute_equal(nil, actual)
        refute_equal(nil, actual, 'message')

        # good
        refute_nil(actual)
        refute_nil(actual, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide#refute-nil

        == Minitest/RefutePathExists

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | Yes
        | 0.10
        | -
        |===

        This cop enforces the test to use `refute_path_exists`
        instead of using `refute(File.exist?(path))`.

        === Examples

        [source,ruby]
        ----
        # bad
        refute(File.exist?(path))
        refute(File.exist?(path), 'message')

        # good
        refute_path_exists(path)
        refute_path_exists(path, 'message')
        ----

        === References

        * https://minitest.rubystyle.guide/#refute-path-exists

        == Minitest/RefuteRespondTo

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.4
        | -
        |===

        This cop enforces the test to use `refute_respond_to(object, :do_something)`
        over `refute(object.respond_to?(:do_something))`.

        === Examples

        [source,ruby]
        ----
        # bad
        refute(object.respond_to?(:do_something))
        refute(object.respond_to?(:do_something), 'message')
        refute(respond_to?(:do_something))

        # good
        refute_respond_to(object, :do_something)
        refute_respond_to(object, :do_something, 'message')
        refute_respond_to(self, :do_something)
        ----

        === References

        * https://minitest.rubystyle.guide#refute-respond-to

        == Minitest/TestMethodName

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | Yes
        | 0.10
        | -
        |===

        This cop enforces that test method names start with `test_` prefix.
        It aims to prevent tests that aren't executed by forgetting to start test method name with `test_`.

        === Examples

        [source,ruby]
        ----
        # bad
        class FooTest < Minitest::Test
          def does_something
            assert_equal 42, do_something
          end
        end

        # good
        class FooTest < Minitest::Test
          def test_does_something
            assert_equal 42, do_something
          end
        end

        # good
        class FooTest < Minitest::Test
          def helper_method(argument)
          end
        end
        ----

        == Minitest/UnspecifiedException

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | No
        | 0.10
        | -
        |===

        This cop checks for a specified error in `assert_raises`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert_raises { raise FooException }
        assert_raises('This should have raised') { raise FooException }

        # good
        assert_raises(FooException) { raise FooException }
        assert_raises(FooException, 'This should have raised') { raise FooException }
        ----

        === References

        * https://minitest.rubystyle.guide#unspecified-exception
  recorded_at: Wed, 02 Jun 2021 08:24:18 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-minitest/v0.12.1/config/default.yml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '1380'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"5026ec62715529b6d67e73c8a2920687877ff6a113dd54ec1657eaa66b8e923d"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - AC3A:7B05:25CE39:2F359F:60B74038
      Fastly-Restarts:
      - '1'
      Accept-Ranges:
      - bytes
      Date:
      - Wed, 02 Jun 2021 08:24:26 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-syd10180-SYD
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1622622258.460097,VS0,VE8255
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 700f9adb7df120e389936491c1a9404abb140ae3
      Expires:
      - Wed, 02 Jun 2021 08:29:26 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        Minitest:
          Enabled: true
          Include:
            - '**/test/**/*'
            - '**/*_test.rb'

        Minitest/AssertEmpty:
          Description: 'This cop enforces the test to use `assert_empty` instead of using `assert(object.empty?)`.'
          StyleGuide: 'https://minitest.rubystyle.guide#assert-empty'
          Enabled: true
          VersionAdded: '0.2'

        Minitest/AssertEmptyLiteral:
          Description: 'This cop enforces the test to use `assert_empty` instead of using `assert([], object)` or `assert({}, object)`.'
          Enabled: true
          SafeAutoCorrect: false
          VersionAdded: '0.5'
          VersionChanged: '0.11'

        Minitest/AssertEqual:
          Description: 'This cop enforces the test to use `assert_equal` instead of using `assert(expected == actual)`.'
          StyleGuide: 'https://minitest.rubystyle.guide#assert-equal-arguments-order'
          Enabled: true
          VersionAdded: '0.4'

        Minitest/AssertInDelta:
          Description: 'This cop enforces the test to use `assert_in_delta` instead of using `assert_equal` to compare floats.'
          StyleGuide: 'https://minitest.rubystyle.guide/#assert-in-delta'
          Enabled: 'pending'
          VersionAdded: '0.10'

        Minitest/AssertionInLifecycleHook:
          Description: 'This cop checks for usage of assertions in lifecycle hooks.'
          Enabled: 'pending'
          VersionAdded: '0.10'

        Minitest/AssertMatch:
          Description: 'This cop enforces the test to use `assert_match` instead of using `assert(matcher.match(object))`.'
          StyleGuide: 'https://minitest.rubystyle.guide#assert-match'
          Enabled: true
          VersionAdded: '0.6'

        Minitest/AssertIncludes:
          Description: 'This cop enforces the test to use `assert_includes` instead of using `assert(collection.include?(object))`.'
          StyleGuide: 'https://minitest.rubystyle.guide#assert-includes'
          Enabled: true
          VersionAdded: '0.2'

        Minitest/AssertInstanceOf:
          Description: 'This cop enforces the test to use `assert_instance_of(Class, object)` over `assert(object.instance_of?(Class))`'
          StyleGuide: 'https://minitest.rubystyle.guide#assert-instance-of'
          Enabled: true
          VersionAdded: '0.4'

        Minitest/AssertKindOf:
          Description: 'This cop enforces the test to use `assert_kind_of(Class, object)` over `assert(object.kind_of?(Class))`'
          StyleGuide: 'https://github.com/rubocop/minitest-style-guide#assert-kind-of'
          Enabled: 'pending'
          VersionAdded: '0.10'

        Minitest/AssertNil:
          Description: 'This cop enforces the test to use `assert_nil` instead of using `assert_equal(nil, something)`.'
          StyleGuide: 'https://minitest.rubystyle.guide#assert-nil'
          Enabled: true
          VersionAdded: '0.1'

        Minitest/AssertOutput:
          Description: 'This cop checks for opportunities to use `assert_output`.'
          StyleGuide: 'https://minitest.rubystyle.guide/#assert-output'
          Enabled: 'pending'
          VersionAdded: '0.10'

        Minitest/AssertPathExists:
          Description: 'This cop enforces the test to use `assert_path_exists` instead of using `assert(File.exist?(path))`.'
          StyleGuide: 'https://minitest.rubystyle.guide/#assert-path-exists'
          Enabled: 'pending'
          VersionAdded: '0.10'

        Minitest/AssertRespondTo:
          Description: 'This cop enforces the test to use `assert_respond_to(object, :do_something)` over `assert(object.respond_to?(:do_something))`.'
          StyleGuide: 'https://minitest.rubystyle.guide#assert-responds-to-method'
          Enabled: true
          VersionAdded: '0.3'

        Minitest/AssertSilent:
          Description: "This cop enforces the test to use `assert_silent { ... }` instead of using `assert_output('', '') { ... }`."
          StyleGuide: 'https://github.com/rubocop/minitest-style-guide#assert-silent'
          Enabled: 'pending'
          VersionAdded: '0.10'

        Minitest/AssertTruthy:
          Description: 'This cop enforces the test to use `assert(actual)` instead of using `assert_equal(true, actual)`.'
          StyleGuide: 'https://minitest.rubystyle.guide#assert-truthy'
          Enabled: true
          VersionAdded: '0.2'

        Minitest/AssertWithExpectedArgument:
          Description: 'This cop tries to detect when a user accidentally used `assert` when they meant to use `assert_equal`.'
          Enabled: pending
          Safe: false
          VersionAdded: '0.11'

        Minitest/GlobalExpectations:
          Description: 'This cop checks for deprecated global expectations.'
          StyleGuide: 'https://minitest.rubystyle.guide#global-expectations'
          Enabled: true
          VersionAdded: '0.7'

        Minitest/LiteralAsActualArgument:
          Description: 'This cop enforces correct order of `expected` and `actual` arguments for `assert_equal`.'
          StyleGuide: 'https://minitest.rubystyle.guide/#assert-equal-arguments-order'
          Enabled: 'pending'
          VersionAdded: '0.10'

        Minitest/MultipleAssertions:
          Description: 'This cop checks if test cases contain too many assertion calls.'
          Enabled: 'pending'
          VersionAdded: '0.10'
          Max: 3

        Minitest/NoAssertions:
          Description: 'This cop checks for at least one assertion (or flunk) in tests.'
          Enabled: false
          VersionAdded: '0.12'

        Minitest/RefuteEmpty:
          Description: 'This cop enforces to use `refute_empty` instead of using `refute(object.empty?)`.'
          StyleGuide: 'https://minitest.rubystyle.guide#refute-empty'
          Enabled: true
          VersionAdded: '0.3'

        Minitest/RefuteEqual:
          Description: 'Check if your test uses `refute_equal` instead of `assert(expected != object)` or `assert(! expected == object))`.'
          StyleGuide: 'https://minitest.rubystyle.guide#refute-equal'
          Enabled: true
          VersionAdded: '0.3'

        Minitest/RefuteFalse:
          Description: 'Check if your test uses `refute(actual)` instead of `assert_equal(false, actual)`.'
          StyleGuide: 'https://minitest.rubystyle.guide#refute-false'
          Enabled: true
          VersionAdded: '0.3'

        Minitest/RefuteInDelta:
          Description: 'This cop enforces the test to use `refute_in_delta` instead of using `refute_equal` to compare floats.'
          StyleGuide: 'https://minitest.rubystyle.guide/#refute-in-delta'
          Enabled: 'pending'
          VersionAdded: '0.10'

        Minitest/RefuteIncludes:
          Description: 'This cop enforces the test to use `refute_includes` instead of using `refute(collection.include?(object))`.'
          StyleGuide: 'https://minitest.rubystyle.guide#refute-includes'
          Enabled: true
          VersionAdded: '0.3'

        Minitest/RefuteMatch:
          Description: 'This cop enforces the test to use `refute_match` instead of using `refute(matcher.match(object))`.'
          StyleGuide: 'https://minitest.rubystyle.guide#refute-match'
          Enabled: true
          VersionAdded: '0.6'

        Minitest/RefuteInstanceOf:
          Description: 'This cop enforces the test to use `refute_instance_of(Class, object)` over `refute(object.instance_of?(Class))`.'
          StyleGuide: 'https://minitest.rubystyle.guide#refute-instance-of'
          Enabled: true
          VersionAdded: '0.4'

        Minitest/RefuteKindOf:
          Description: 'This cop enforces the test to use `refute_kind_of(Class, object)` over `refute(object.kind_of?(Class))`.'
          StyleGuide: 'https://github.com/rubocop/minitest-style-guide#refute-kind-of'
          Enabled: 'pending'
          VersionAdded: '0.10'

        Minitest/RefuteNil:
          Description: 'This cop enforces the test to use `refute_nil` instead of using `refute_equal(nil, something)`.'
          StyleGuide: 'https://minitest.rubystyle.guide#refute-nil'
          Enabled: true
          VersionAdded: '0.2'

        Minitest/RefutePathExists:
          Description: 'This cop enforces the test to use `refute_path_exists` instead of using `refute(File.exist?(path))`.'
          StyleGuide: 'https://minitest.rubystyle.guide/#refute-path-exists'
          Enabled: 'pending'
          VersionAdded: '0.10'

        Minitest/RefuteRespondTo:
          Description: 'This cop enforces the test to use `refute_respond_to(object, :do_something)` over `refute(object.respond_to?(:do_something))`.'
          StyleGuide: 'https://minitest.rubystyle.guide#refute-respond-to'
          Enabled: true
          VersionAdded: '0.4'

        Minitest/TestMethodName:
          Description: 'This cop enforces that test method names start with `test_` prefix.'
          Enabled: 'pending'
          VersionAdded: '0.10'

        Minitest/UnspecifiedException:
          Description: 'This cop checks for a specified error in `assert_raises`.'
          StyleGuide: 'https://minitest.rubystyle.guide#unspecified-exception'
          Enabled: 'pending'
          VersionAdded: '0.10'
  recorded_at: Wed, 02 Jun 2021 08:24:26 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-performance/v1.11.3/docs/modules/ROOT/pages/cops.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '972'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"36419f7407f64684ef9d9a34eb6af1c00a2449eae17244833a12110273d3db88"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 6040:7B05:25CE88:2F35D2:60B7403A
      Accept-Ranges:
      - bytes
      Date:
      - Wed, 02 Jun 2021 08:24:28 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-syd10175-SYD
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1622622267.885546,VS0,VE1455
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 492e4b7f145dac74ecdd3946ebc42c7f366d8a4d
      Expires:
      - Wed, 02 Jun 2021 08:29:28 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        = Cops

        In RuboCop lingo the various checks performed on the code are called cops.
        Each cop is responsible for detecting one particular offense.
        RuboCop Performance has only one Performance department.

        == Performance

        Performance cops optimization analysis for your projects.

        // START_COP_LIST

        === Department xref:cops_performance.adoc[Performance]

        * xref:cops_performance.adoc#performanceancestorsinclude[Performance/AncestorsInclude]
        * xref:cops_performance.adoc#performancearraysemiinfiniterangeslice[Performance/ArraySemiInfiniteRangeSlice]
        * xref:cops_performance.adoc#performancebigdecimalwithnumericargument[Performance/BigDecimalWithNumericArgument]
        * xref:cops_performance.adoc#performancebindcall[Performance/BindCall]
        * xref:cops_performance.adoc#performanceblockgivenwithexplicitblock[Performance/BlockGivenWithExplicitBlock]
        * xref:cops_performance.adoc#performancecaller[Performance/Caller]
        * xref:cops_performance.adoc#performancecasewhensplat[Performance/CaseWhenSplat]
        * xref:cops_performance.adoc#performancecasecmp[Performance/Casecmp]
        * xref:cops_performance.adoc#performancechainarrayallocation[Performance/ChainArrayAllocation]
        * xref:cops_performance.adoc#performancecollectionliteralinloop[Performance/CollectionLiteralInLoop]
        * xref:cops_performance.adoc#performancecomparewithblock[Performance/CompareWithBlock]
        * xref:cops_performance.adoc#performanceconstantregexp[Performance/ConstantRegexp]
        * xref:cops_performance.adoc#performancecount[Performance/Count]
        * xref:cops_performance.adoc#performancedeleteprefix[Performance/DeletePrefix]
        * xref:cops_performance.adoc#performancedeletesuffix[Performance/DeleteSuffix]
        * xref:cops_performance.adoc#performancedetect[Performance/Detect]
        * xref:cops_performance.adoc#performancedoublestartendwith[Performance/DoubleStartEndWith]
        * xref:cops_performance.adoc#performanceendwith[Performance/EndWith]
        * xref:cops_performance.adoc#performancefixedsize[Performance/FixedSize]
        * xref:cops_performance.adoc#performanceflatmap[Performance/FlatMap]
        * xref:cops_performance.adoc#performanceinefficienthashsearch[Performance/InefficientHashSearch]
        * xref:cops_performance.adoc#performanceioreadlines[Performance/IoReadlines]
        * xref:cops_performance.adoc#performancemapcompact[Performance/MapCompact]
        * xref:cops_performance.adoc#performancemethodobjectasblock[Performance/MethodObjectAsBlock]
        * xref:cops_performance.adoc#performanceopenstruct[Performance/OpenStruct]
        * xref:cops_performance.adoc#performancerangeinclude[Performance/RangeInclude]
        * xref:cops_performance.adoc#performanceredundantblockcall[Performance/RedundantBlockCall]
        * xref:cops_performance.adoc#performanceredundantequalitycomparisonblock[Performance/RedundantEqualityComparisonBlock]
        * xref:cops_performance.adoc#performanceredundantmatch[Performance/RedundantMatch]
        * xref:cops_performance.adoc#performanceredundantmerge[Performance/RedundantMerge]
        * xref:cops_performance.adoc#performanceredundantsortblock[Performance/RedundantSortBlock]
        * xref:cops_performance.adoc#performanceredundantsplitregexpargument[Performance/RedundantSplitRegexpArgument]
        * xref:cops_performance.adoc#performanceredundantstringchars[Performance/RedundantStringChars]
        * xref:cops_performance.adoc#performanceregexpmatch[Performance/RegexpMatch]
        * xref:cops_performance.adoc#performancereverseeach[Performance/ReverseEach]
        * xref:cops_performance.adoc#performancereversefirst[Performance/ReverseFirst]
        * xref:cops_performance.adoc#performanceselectmap[Performance/SelectMap]
        * xref:cops_performance.adoc#performancesize[Performance/Size]
        * xref:cops_performance.adoc#performancesortreverse[Performance/SortReverse]
        * xref:cops_performance.adoc#performancesqueeze[Performance/Squeeze]
        * xref:cops_performance.adoc#performancestartwith[Performance/StartWith]
        * xref:cops_performance.adoc#performancestringinclude[Performance/StringInclude]
        * xref:cops_performance.adoc#performancestringreplacement[Performance/StringReplacement]
        * xref:cops_performance.adoc#performancesum[Performance/Sum]
        * xref:cops_performance.adoc#performancetimesmap[Performance/TimesMap]
        * xref:cops_performance.adoc#performanceunfreezestring[Performance/UnfreezeString]
        * xref:cops_performance.adoc#performanceuridefaultparser[Performance/UriDefaultParser]

        // END_COP_LIST
  recorded_at: Wed, 02 Jun 2021 08:24:28 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-performance/v1.11.3/docs/modules/ROOT/pages/cops_performance.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '8652'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"a40ec3813d2972283bdacd9382c764526194db7df658d42bf9170a6cb510de61"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 6040:7B05:25CEA8:2F35F6:60B7403C
      Accept-Ranges:
      - bytes
      Date:
      - Wed, 02 Jun 2021 08:24:29 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-syd10183-SYD
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1622622269.512982,VS0,VE543
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 46f19227d10747abd7e46e405feeb4ddbdd4dca2
      Expires:
      - Wed, 02 Jun 2021 08:29:29 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        = Performance

        == Performance/AncestorsInclude

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | No
        | Yes (Unsafe)
        | 1.7
        | -
        |===

        This cop is used to identify usages of `ancestors.include?` and
        change them to use `<=` instead.

        === Examples

        [source,ruby]
        ----
        # bad
        A.ancestors.include?(B)

        # good
        A <= B
        ----

        === References

        * https://github.com/JuanitoFatas/fast-ruby#ancestorsinclude-vs--code

        == Performance/ArraySemiInfiniteRangeSlice

        NOTE: Required Ruby version: 2.7

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Disabled
        | No
        | Yes (Unsafe)
        | 1.9
        | -
        |===

        This cop identifies places where slicing arrays with semi-infinite ranges
        can be replaced by `Array#take` and `Array#drop`.
        This cop was created due to a mistake in microbenchmark and hence is disabled by default.
        Refer https://github.com/rubocop/rubocop-performance/pull/175#issuecomment-731892717
        This cop is also unsafe for string slices because strings do not have `#take` and `#drop` methods.

        === Examples

        [source,ruby]
        ----
        # bad
        # array[..2]
        # array[...2]
        # array[2..]
        # array[2...]
        # array.slice(..2)

        # good
        array.take(3)
        array.take(2)
        array.drop(2)
        array.drop(2)
        array.take(3)
        ----

        == Performance/BigDecimalWithNumericArgument

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | Yes
        | 1.7
        | -
        |===

        This cop identifies places where numeric argument to BigDecimal should be
        converted to string. Initializing from String is faster
        than from Numeric for BigDecimal.

        === Examples

        [source,ruby]
        ----
        # bad
        BigDecimal(1, 2)
        BigDecimal(1.2, 3, exception: true)

        # good
        BigDecimal('1', 2)
        BigDecimal('1.2', 3, exception: true)
        ----

        == Performance/BindCall

        NOTE: Required Ruby version: 2.7

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 1.6
        | -
        |===

        In Ruby 2.7, `UnboundMethod#bind_call` has been added.

        This cop identifies places where `bind(obj).call(args, ...)`
        can be replaced by `bind_call(obj, args, ...)`.

        The `bind_call(obj, args, ...)` method is faster than
        `bind(obj).call(args, ...)`.

        === Examples

        [source,ruby]
        ----
        # bad
        umethod.bind(obj).call(foo, bar)
        umethod.bind(obj).(foo, bar)

        # good
        umethod.bind_call(obj, foo, bar)
        ----

        == Performance/BlockGivenWithExplicitBlock

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | Yes
        | 1.9
        | -
        |===

        This cop identifies unnecessary use of a `block_given?` where explicit check
        of block argument would suffice.

        === Examples

        [source,ruby]
        ----
        # bad
        def method(&block)
          do_something if block_given?
        end

        # good
        def method(&block)
          do_something if block
        end

        # good - block is reassigned
        def method(&block)
          block ||= -> { do_something }
          warn "Using default ..." unless block_given?
          # ...
        end
        ----

        == Performance/Caller

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.49
        | 1.9
        |===

        This cop identifies places where `caller[n]`
        can be replaced by `caller(n..n).first`.

        === Examples

        [source,ruby]
        ----
        # bad
        caller[1]
        caller.first
        caller_locations[1]
        caller_locations.first

        # good
        caller(2..2).first
        caller(1..1).first
        caller_locations(2..2).first
        caller_locations(1..1).first
        ----

        == Performance/CaseWhenSplat

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Disabled
        | Yes
        | Yes (Unsafe)
        | 0.34
        | 0.59
        |===

        Reordering `when` conditions with a splat to the end
        of the `when` branches can improve performance.

        Ruby has to allocate memory for the splat expansion every time
        that the `case` `when` statement is run. Since Ruby does not support
        fall through inside of `case` `when`, like some other languages do,
        the order of the `when` branches should not matter. By placing any
        splat expansions at the end of the list of `when` branches we will
        reduce the number of times that memory has to be allocated for
        the expansion. The exception to this is if multiple of your `when`
        conditions can be true for any given condition. A likely scenario for
        this defining a higher level when condition to override a condition
        that is inside of the splat expansion.

        This is not a guaranteed performance improvement. If the data being
        processed by the `case` condition is normalized in a manner that favors
        hitting a condition in the splat expansion, it is possible that
        moving the splat condition to the end will use more memory,
        and run slightly slower.

        === Examples

        [source,ruby]
        ----
        # bad
        case foo
        when *condition
          bar
        when baz
          foobar
        end

        case foo
        when *[1, 2, 3, 4]
          bar
        when 5
          baz
        end

        # good
        case foo
        when baz
          foobar
        when *condition
          bar
        end

        case foo
        when 1, 2, 3, 4
          bar
        when 5
          baz
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | AutoCorrect
        | `false`
        | Boolean
        |===

        == Performance/Casecmp

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | No
        | Yes (Unsafe)
        | 0.36
        | -
        |===

        This cop identifies places where a case-insensitive string comparison
        can better be implemented using `casecmp`.
        This cop is unsafe because `String#casecmp` and `String#casecmp?` behave
        differently when using Non-ASCII characters.

        === Examples

        [source,ruby]
        ----
        # bad
        str.downcase == 'abc'
        str.upcase.eql? 'ABC'
        'abc' == str.downcase
        'ABC'.eql? str.upcase
        str.downcase == str.downcase

        # good
        str.casecmp('ABC').zero?
        'abc'.casecmp(str).zero?
        ----

        === References

        * https://github.com/JuanitoFatas/fast-ruby#stringcasecmp-vs-stringdowncase---code

        == Performance/ChainArrayAllocation

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Disabled
        | Yes
        | No
        | 0.59
        | -
        |===

        This cop is used to identify usages of
        Each of these methods (`compact`, `flatten`, `map`) will generate a
        new intermediate array that is promptly thrown away. Instead it is
        faster to mutate when we know it's safe.

        === Examples

        [source,ruby]
        ----
        # bad
        array = ["a", "b", "c"]
        array.compact.flatten.map { |x| x.downcase }
        ----

        [source,ruby]
        ----
        # good.
        array = ["a", "b", "c"]
        array.compact!
        array.flatten!
        array.map! { |x| x.downcase }
        array
        ----

        === References

        * https://twitter.com/schneems/status/1034123879978029057

        == Performance/CollectionLiteralInLoop

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | No
        | 1.8
        | -
        |===

        This cop identifies places where Array and Hash literals are used
        within loops. It is better to extract them into a local variable or constant
        to avoid unnecessary allocations on each iteration.

        You can set the minimum number of elements to consider
        an offense with `MinSize`.

        === Examples

        [source,ruby]
        ----
        # bad
        users.select do |user|
          %i[superadmin admin].include?(user.role)
        end

        # good
        admin_roles = %i[superadmin admin]
        users.select do |user|
          admin_roles.include?(user.role)
        end

        # good
        ADMIN_ROLES = %i[superadmin admin]
        ...
        users.select do |user|
          ADMIN_ROLES.include?(user.role)
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | MinSize
        | `1`
        | Integer
        |===

        == Performance/CompareWithBlock

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.46
        | -
        |===

        This cop identifies places where `sort { |a, b| a.foo <=> b.foo }`
        can be replaced by `sort_by(&:foo)`.
        This cop also checks `max` and `min` methods.

        === Examples

        [source,ruby]
        ----
        # bad
        array.sort { |a, b| a.foo <=> b.foo }
        array.max { |a, b| a.foo <=> b.foo }
        array.min { |a, b| a.foo <=> b.foo }
        array.sort { |a, b| a[:foo] <=> b[:foo] }

        # good
        array.sort_by(&:foo)
        array.sort_by { |v| v.foo }
        array.sort_by do |var|
          var.foo
        end
        array.max_by(&:foo)
        array.min_by(&:foo)
        array.sort_by { |a| a[:foo] }
        ----

        == Performance/ConstantRegexp

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | Yes
        | 1.9
        | 1.10
        |===

        This cop finds regular expressions with dynamic components that are all constants.

        Ruby allocates a new Regexp object every time it executes a code containing such
        a regular expression. It is more efficient to extract it into a constant,
        memoize it, or add an `/o` option to perform `#{}` interpolation only once and
        reuse that Regexp object.

        === Examples

        [source,ruby]
        ----
        # bad
        def tokens(pattern)
          pattern.scan(TOKEN).reject { |token| token.match?(/\A#{SEPARATORS}\Z/) }
        end

        # good
        ALL_SEPARATORS = /\A#{SEPARATORS}\Z/
        def tokens(pattern)
          pattern.scan(TOKEN).reject { |token| token.match?(ALL_SEPARATORS) }
        end

        # good
        def tokens(pattern)
          pattern.scan(TOKEN).reject { |token| token.match?(/\A#{SEPARATORS}\Z/o) }
        end

        # good
        def separators
          @separators ||= /\A#{SEPARATORS}\Z/
        end
        ----

        == Performance/Count

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes (Unsafe)
        | 0.31
        | 1.8
        |===

        This cop is used to identify usages of `count` on an `Enumerable` that
        follow calls to `select`, `find_all`, `filter` or `reject`. Querying logic can instead be
        passed to the `count` call.

        `ActiveRecord` compatibility:
        `ActiveRecord` will ignore the block that is passed to `count`.
        Other methods, such as `select`, will convert the association to an
        array and then run the block on the array. A simple work around to
        make `count` work with a block is to call `to_a.count {...}`.

        Example:
          `Model.where(id: [1, 2, 3]).select { |m| m.method == true }.size`

          becomes:

          `Model.where(id: [1, 2, 3]).to_a.count { |m| m.method == true }`

        === Examples

        [source,ruby]
        ----
        # bad
        [1, 2, 3].select { |e| e > 2 }.size
        [1, 2, 3].reject { |e| e > 2 }.size
        [1, 2, 3].select { |e| e > 2 }.length
        [1, 2, 3].reject { |e| e > 2 }.length
        [1, 2, 3].select { |e| e > 2 }.count { |e| e.odd? }
        [1, 2, 3].reject { |e| e > 2 }.count { |e| e.even? }
        array.select(&:value).count

        # good
        [1, 2, 3].count { |e| e > 2 }
        [1, 2, 3].count { |e| e < 2 }
        [1, 2, 3].count { |e| e > 2 && e.odd? }
        [1, 2, 3].count { |e| e < 2 && e.even? }
        Model.select('field AS field_one').count
        Model.select(:value).count
        ----

        == Performance/DeletePrefix

        NOTE: Required Ruby version: 2.5

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 1.6
        | -
        |===

        In Ruby 2.5, `String#delete_prefix` has been added.

        This cop identifies places where `gsub(/\Aprefix/, '')` and `sub(/\Aprefix/, '')`
        can be replaced by `delete_prefix('prefix')`.

        This cop has `SafeMultiline` configuration option that `true` by default because
        `^prefix` is unsafe as it will behave incompatible with `delete_prefix`
        for receiver is multiline string.

        The `delete_prefix('prefix')` method is faster than `gsub(/\Aprefix/, '')`.

        === Examples

        [source,ruby]
        ----
        # bad
        str.gsub(/\Aprefix/, '')
        str.gsub!(/\Aprefix/, '')

        str.sub(/\Aprefix/, '')
        str.sub!(/\Aprefix/, '')

        # good
        str.delete_prefix('prefix')
        str.delete_prefix!('prefix')
        ----

        ==== SafeMultiline: true (default)

        [source,ruby]
        ----
        # good
        str.gsub(/^prefix/, '')
        str.gsub!(/^prefix/, '')
        str.sub(/^prefix/, '')
        str.sub!(/^prefix/, '')
        ----

        ==== SafeMultiline: false

        [source,ruby]
        ----
        # bad
        str.gsub(/^prefix/, '')
        str.gsub!(/^prefix/, '')
        str.sub(/^prefix/, '')
        str.sub!(/^prefix/, '')
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | SafeMultiline
        | `true`
        | Boolean
        |===

        == Performance/DeleteSuffix

        NOTE: Required Ruby version: 2.5

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 1.6
        | -
        |===

        In Ruby 2.5, `String#delete_suffix` has been added.

        This cop identifies places where `gsub(/suffix\z/, '')` and `sub(/suffix\z/, '')`
        can be replaced by `delete_suffix('suffix')`.

        This cop has `SafeMultiline` configuration option that `true` by default because
        `suffix$` is unsafe as it will behave incompatible with `delete_suffix?`
        for receiver is multiline string.

        The `delete_suffix('suffix')` method is faster than `gsub(/suffix\z/, '')`.

        === Examples

        [source,ruby]
        ----
        # bad
        str.gsub(/suffix\z/, '')
        str.gsub!(/suffix\z/, '')

        str.sub(/suffix\z/, '')
        str.sub!(/suffix\z/, '')

        # good
        str.delete_suffix('suffix')
        str.delete_suffix!('suffix')
        ----

        ==== SafeMultiline: true (default)

        [source,ruby]
        ----
        # good
        str.gsub(/suffix$/, '')
        str.gsub!(/suffix$/, '')
        str.sub(/suffix$/, '')
        str.sub!(/suffix$/, '')
        ----

        ==== SafeMultiline: false

        [source,ruby]
        ----
        # bad
        str.gsub(/suffix$/, '')
        str.gsub!(/suffix$/, '')
        str.sub(/suffix$/, '')
        str.sub!(/suffix$/, '')
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | SafeMultiline
        | `true`
        | Boolean
        |===

        == Performance/Detect

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes (Unsafe)
        | 0.30
        | 1.8
        |===

        This cop is used to identify usages of `first`, `last`, `[0]` or `[-1]`
        chained to `select`, `find_all` or `filter` and change them to use
        `detect` instead.

        `ActiveRecord` compatibility:
        `ActiveRecord` does not implement a `detect` method and `find` has its
        own meaning. Correcting ActiveRecord methods with this cop should be
        considered unsafe.

        === Examples

        [source,ruby]
        ----
        # bad
        [].select { |item| true }.first
        [].select { |item| true }.last
        [].find_all { |item| true }.first
        [].find_all { |item| true }.last
        [].filter { |item| true }.first
        [].filter { |item| true }.last
        [].filter { |item| true }[0]
        [].filter { |item| true }[-1]

        # good
        [].detect { |item| true }
        [].reverse.detect { |item| true }
        ----

        === References

        * https://github.com/JuanitoFatas/fast-ruby#enumerabledetect-vs-enumerableselectfirst-code

        == Performance/DoubleStartEndWith

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.36
        | 0.48
        |===

        This cop checks for double `#start_with?` or `#end_with?` calls
        separated by `||`. In some cases such calls can be replaced
        with an single `#start_with?`/`#end_with?` call.

        === Examples

        [source,ruby]
        ----
        # bad
        str.start_with?("a") || str.start_with?(Some::CONST)
        str.start_with?("a", "b") || str.start_with?("c")
        str.end_with?(var1) || str.end_with?(var2)

        # good
        str.start_with?("a", Some::CONST)
        str.start_with?("a", "b", "c")
        str.end_with?(var1, var2)
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | IncludeActiveSupportAliases
        | `false`
        | Boolean
        |===

        == Performance/EndWith

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes (Unsafe)
        | 0.36
        | 1.10
        |===

        This cop identifies unnecessary use of a regex where `String#end_with?` would suffice.

        This cop has `SafeMultiline` configuration option that `true` by default because
        `end$` is unsafe as it will behave incompatible with `end_with?`
        for receiver is multiline string.

        === Examples

        [source,ruby]
        ----
        # bad
        'abc'.match?(/bc\Z/)
        /bc\Z/.match?('abc')
        'abc' =~ /bc\Z/
        /bc\Z/ =~ 'abc'
        'abc'.match(/bc\Z/)
        /bc\Z/.match('abc')

        # good
        'abc'.end_with?('bc')
        ----

        ==== SafeMultiline: true (default)

        [source,ruby]
        ----
        # good
        'abc'.match?(/bc$/)
        /bc$/.match?('abc')
        'abc' =~ /bc$/
        /bc$/ =~ 'abc'
        'abc'.match(/bc$/)
        /bc$/.match('abc')
        ----

        ==== SafeMultiline: false

        [source,ruby]
        ----
        # bad
        'abc'.match?(/bc$/)
        /bc$/.match?('abc')
        'abc' =~ /bc$/
        /bc$/ =~ 'abc'
        'abc'.match(/bc$/)
        /bc$/.match('abc')
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | SafeMultiline
        | `true`
        | Boolean
        |===

        === References

        * https://github.com/JuanitoFatas/fast-ruby#stringmatch-vs-stringstart_withstringend_with-code-start-code-end

        == Performance/FixedSize

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | No
        | 0.35
        | -
        |===

        Do not compute the size of statically sized objects.

        === Examples

        [source,ruby]
        ----
        # String methods
        # bad
        'foo'.size
        %q[bar].count
        %(qux).length

        # Symbol methods
        # bad
        :fred.size
        :'baz'.length

        # Array methods
        # bad
        [1, 2, thud].count
        %W(1, 2, bar).size

        # Hash methods
        # bad
        { a: corge, b: grault }.length

        # good
        foo.size
        bar.count
        qux.length

        # good
        :"#{fred}".size
        CONST = :baz.length

        # good
        [1, 2, *thud].count
        garply = [1, 2, 3]
        garply.size

        # good
        { a: corge, **grault }.length
        waldo = { a: corge, b: grault }
        waldo.size
        ----

        == Performance/FlatMap

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.30
        | -
        |===

        This cop is used to identify usages of `map { ... }.flatten` and
        change them to use `flat_map { ... }` instead.

        === Examples

        [source,ruby]
        ----
        # bad
        [1, 2, 3, 4].map { |e| [e, e] }.flatten(1)
        [1, 2, 3, 4].collect { |e| [e, e] }.flatten(1)

        # good
        [1, 2, 3, 4].flat_map { |e| [e, e] }
        [1, 2, 3, 4].map { |e| [e, e] }.flatten
        [1, 2, 3, 4].collect { |e| [e, e] }.flatten
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | EnabledForFlattenWithoutParams
        | `false`
        | Boolean
        |===

        === References

        * https://github.com/JuanitoFatas/fast-ruby#enumerablemaparrayflatten-vs-enumerableflat_map-code

        == Performance/InefficientHashSearch

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | No
        | Yes (Unsafe)
        | 0.56
        | -
        |===

        This cop checks for inefficient searching of keys and values within
        hashes.

        `Hash#keys.include?` is less efficient than `Hash#key?` because
        the former allocates a new array and then performs an O(n) search
        through that array, while `Hash#key?` does not allocate any array and
        performs a faster O(1) search for the key.

        `Hash#values.include?` is less efficient than `Hash#value?`. While they
        both perform an O(n) search through all of the values, calling `values`
        allocates a new array while using `value?` does not.

        === Examples

        [source,ruby]
        ----
        # bad
        { a: 1, b: 2 }.keys.include?(:a)
        { a: 1, b: 2 }.keys.include?(:z)
        h = { a: 1, b: 2 }; h.keys.include?(100)

        # good
        { a: 1, b: 2 }.key?(:a)
        { a: 1, b: 2 }.has_key?(:z)
        h = { a: 1, b: 2 }; h.key?(100)

        # bad
        { a: 1, b: 2 }.values.include?(2)
        { a: 1, b: 2 }.values.include?('garbage')
        h = { a: 1, b: 2 }; h.values.include?(nil)

        # good
        { a: 1, b: 2 }.value?(2)
        { a: 1, b: 2 }.has_value?('garbage')
        h = { a: 1, b: 2 }; h.value?(nil)
        ----

        === References

        * https://github.com/JuanitoFatas/fast-ruby#hashkey-instead-of-hashkeysinclude-code

        == Performance/IoReadlines

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Disabled
        | Yes
        | Yes
        | 1.7
        | -
        |===

        This cop identifies places where inefficient `readlines` method
        can be replaced by `each_line` to avoid fully loading file content into memory.

        === Examples

        [source,ruby]
        ----
        # bad
        File.readlines('testfile').each { |l| puts l }
        IO.readlines('testfile', chomp: true).each { |l| puts l }

        conn.readlines(10).map { |l| l.size }
        file.readlines.find { |l| l.start_with?('#') }
        file.readlines.each { |l| puts l }

        # good
        File.open('testfile', 'r').each_line { |l| puts l }
        IO.open('testfile').each_line(chomp: true) { |l| puts l }

        conn.each_line(10).map { |l| l.size }
        file.each_line.find { |l| l.start_with?('#') }
        file.each_line { |l| puts l }
        ----

        === References

        * https://docs.gitlab.com/ee/development/performance.html#reading-from-files-and-other-data-sources

        == Performance/MapCompact

        NOTE: Required Ruby version: 2.7

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | Yes (Unsafe)
        | 1.11
        | -
        |===

        In Ruby 2.7, `Enumerable#filter_map` has been added.

        This cop identifies places where `map { ... }.compact` can be replaced by `filter_map`.
        It is marked as unsafe auto-correction by default because `map { ... }.compact`
        that is not compatible with `filter_map`.

        [source,ruby]
        ----
        [true, false, nil].compact              #=> [true, false]
        [true, false, nil].filter_map(&:itself) #=> [true]
        ----

        === Examples

        [source,ruby]
        ----
        # bad
        ary.map(&:foo).compact
        ary.collect(&:foo).compact

        # good
        ary.filter_map(&:foo)
        ary.map(&:foo).compact!
        ary.compact.map(&:foo)
        ----

        == Performance/MethodObjectAsBlock

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | No
        | 1.9
        | -
        |===

        This cop identifies places where methods are converted to blocks, with the
        use of `&method`, and passed as arguments to method calls.
        It is faster to replace those with explicit blocks, calling those methods inside.

        === Examples

        [source,ruby]
        ----
        # bad
        array.map(&method(:do_something))
        [1, 2, 3].each(&out.method(:puts))

        # good
        array.map { |x| do_something(x) }
        [1, 2, 3].each { |x| out.puts(x) }
        ----

        === References

        * https://github.com/JuanitoFatas/fast-ruby#normal-way-to-apply-method-vs-method-code

        == Performance/OpenStruct

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Disabled
        | No
        | No
        | 0.61
        | -
        |===

        This cop checks for `OpenStruct.new` calls.
        Instantiation of an `OpenStruct` invalidates
        Ruby global method cache as it causes dynamic method
        definition during program runtime.
        This could have an effect on performance,
        especially in case of single-threaded
        applications with multiple `OpenStruct` instantiations.

        === Examples

        [source,ruby]
        ----
        # bad
        class MyClass
          def my_method
            OpenStruct.new(my_key1: 'my_value1', my_key2: 'my_value2')
          end
        end

        # good
        class MyClass
          MyStruct = Struct.new(:my_key1, :my_key2)
          def my_method
            MyStruct.new('my_value1', 'my_value2')
          end
        end
        ----

        == Performance/RangeInclude

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | No
        | Yes (Unsafe)
        | 0.36
        | 1.7
        |===

        This cop identifies uses of `Range#include?` and `Range#member?`, which iterates over each
        item in a `Range` to see if a specified item is there. In contrast,
        `Range#cover?` simply compares the target item with the beginning and
        end points of the `Range`. In a great majority of cases, this is what
        is wanted.

        This cop is `Safe: false` by default because `Range#include?` (or `Range#member?`) and
        `Range#cover?` are not equivalent behaviour.

        === Examples

        [source,ruby]
        ----
        # bad
        ('a'..'z').include?('b') # => true
        ('a'..'z').member?('b')  # => true

        # good
        ('a'..'z').cover?('b') # => true

        # Example of a case where `Range#cover?` may not provide
        # the desired result:

        ('a'..'z').cover?('yellow') # => true
        ----

        === References

        * https://github.com/JuanitoFatas/fast-ruby#cover-vs-include-code

        == Performance/RedundantBlockCall

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.36
        | -
        |===

        This cop identifies the use of a `&block` parameter and `block.call`
        where `yield` would do just as well.

        === Examples

        [source,ruby]
        ----
        # bad
        def method(&block)
          block.call
        end
        def another(&func)
          func.call 1, 2, 3
        end

        # good
        def method
          yield
        end
        def another
          yield 1, 2, 3
        end
        ----

        === References

        * https://github.com/JuanitoFatas/fast-ruby#proccall-and-block-arguments-vs-yieldcode

        == Performance/RedundantEqualityComparisonBlock

        NOTE: Required Ruby version: 2.5

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | No
        | Yes (Unsafe)
        | 1.10
        | -
        |===

        This cop checks for uses `Enumerable#all?`, `Enumerable#any?`, `Enumerable#one?`,
        and `Enumerable#none?` are compared with `===` or similar methods in block.

        By default, `Object#===` behaves the same as `Object#==`, but this
        behavior is appropriately overridden in subclass. For example,
        `Range#===` returns `true` when argument is within the range.
        Therefore, It is marked as unsafe by default because `===` and `==`
        do not always behave the same.

        === Examples

        [source,ruby]
        ----
        # bad
        items.all? { |item| pattern === item }
        items.all? { |item| item == other }
        items.all? { |item| item.is_a?(Klass) }
        items.all? { |item| item.kind_of?(Klass) }

        # good
        items.all?(pattern)
        ----

        === References

        * https://github.com/rails/rails/pull/41363

        == Performance/RedundantMatch

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.36
        | -
        |===

        This cop identifies the use of `Regexp#match` or `String#match`, which
        returns `#<MatchData>`/`nil`. The return value of `=~` is an integral
        index/`nil` and is more performant.

        === Examples

        [source,ruby]
        ----
        # bad
        do_something if str.match(/regex/)
        while regex.match('str')
          do_something
        end

        # good
        method(str =~ /regex/)
        return value unless regex =~ 'str'
        ----

        == Performance/RedundantMerge

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | No
        | Yes (Unsafe)
        | 0.36
        | 1.11
        |===

        This cop identifies places where `Hash#merge!` can be replaced by
        `Hash#[]=`.
        You can set the maximum number of key-value pairs to consider
        an offense with `MaxKeyValuePairs`.

        This cop is marked as unsafe because RuboCop cannot determine if the
        receiver of `merge!` is actually a hash or not.

        === Examples

        [source,ruby]
        ----
        # bad
        hash.merge!(a: 1)
        hash.merge!({'key' => 'value'})

        # good
        hash[:a] = 1
        hash['key'] = 'value'
        ----

        ==== MaxKeyValuePairs: 2 (default)

        [source,ruby]
        ----
        # bad
        hash.merge!(a: 1, b: 2)

        # good
        hash[:a] = 1
        hash[:b] = 2
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | MaxKeyValuePairs
        | `2`
        | Integer
        |===

        === References

        * https://github.com/JuanitoFatas/fast-ruby#hashmerge-vs-hash-code

        == Performance/RedundantSortBlock

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | Yes
        | 1.7
        | -
        |===

        This cop identifies places where `sort { |a, b| a <=> b }`
        can be replaced with `sort`.

        === Examples

        [source,ruby]
        ----
        # bad
        array.sort { |a, b| a <=> b }

        # good
        array.sort
        ----

        == Performance/RedundantSplitRegexpArgument

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | Yes
        | 1.10
        | -
        |===

        This cop identifies places where `split` argument can be replaced from
        a deterministic regexp to a string.

        === Examples

        [source,ruby]
        ----
        # bad
        'a,b,c'.split(/,/)

        # good
        'a,b,c'.split(',')
        ----

        == Performance/RedundantStringChars

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | Yes
        | 1.7
        | -
        |===

        This cop checks for redundant `String#chars`.

        === Examples

        [source,ruby]
        ----
        # bad
        str.chars[0..2]
        str.chars.slice(0..2)

        # good
        str[0..2].chars

        # bad
        str.chars.first
        str.chars.first(2)
        str.chars.last
        str.chars.last(2)

        # good
        str[0]
        str[0...2].chars
        str[-1]
        str[-2..-1].chars

        # bad
        str.chars.take(2)
        str.chars.drop(2)
        str.chars.length
        str.chars.size
        str.chars.empty?

        # good
        str[0...2].chars
        str[2..-1].chars
        str.length
        str.size
        str.empty?
        ----

        == Performance/RegexpMatch

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.47
        | -
        |===

        In Ruby 2.4, `String#match?`, `Regexp#match?`, and `Symbol#match?`
        have been added. The methods are faster than `match`.
        Because the methods avoid creating a `MatchData` object or saving
        backref.
        So, when `MatchData` is not used, use `match?` instead of `match`.

        === Examples

        [source,ruby]
        ----
        # bad
        def foo
          if x =~ /re/
            do_something
          end
        end

        # bad
        def foo
          if x !~ /re/
            do_something
          end
        end

        # bad
        def foo
          if x.match(/re/)
            do_something
          end
        end

        # bad
        def foo
          if /re/ === x
            do_something
          end
        end

        # good
        def foo
          if x.match?(/re/)
            do_something
          end
        end

        # good
        def foo
          if !x.match?(/re/)
            do_something
          end
        end

        # good
        def foo
          if x =~ /re/
            do_something(Regexp.last_match)
          end
        end

        # good
        def foo
          if x.match(/re/)
            do_something($~)
          end
        end

        # good
        def foo
          if /re/ === x
            do_something($~)
          end
        end
        ----

        === References

        * https://github.com/JuanitoFatas/fast-ruby#regexp-vs-stringmatch-vs-string-vs-stringmatch-code-

        == Performance/ReverseEach

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.30
        | -
        |===

        This cop is used to identify usages of `reverse.each` and
        change them to use `reverse_each` instead.

        If the return value is used, it will not be detected because the result will be different.

        [source,ruby]
        ----
        [1, 2, 3].reverse.each {} #=> [3, 2, 1]
        [1, 2, 3].reverse_each {} #=> [1, 2, 3]
        ----

        === Examples

        [source,ruby]
        ----
        # bad
        items.reverse.each

        # good
        items.reverse_each
        ----

        === References

        * https://github.com/JuanitoFatas/fast-ruby#enumerablereverseeach-vs-enumerablereverse_each-code

        == Performance/ReverseFirst

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | Yes
        | 1.7
        | -
        |===

        This cop identifies places where `reverse.first(n)` and `reverse.first`
        can be replaced by `last(n).reverse` and `last`.

        === Examples

        [source,ruby]
        ----
        # bad
        array.reverse.first(5)
        array.reverse.first

        # good
        array.last(5).reverse
        array.last
        ----

        == Performance/SelectMap

        NOTE: Required Ruby version: 2.7

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Disabled
        | Yes
        | No
        | 1.11
        | -
        |===

        In Ruby 2.7, `Enumerable#filter_map` has been added.

        This cop identifies places where `select.map` can be replaced by `filter_map`.

        === Examples

        [source,ruby]
        ----
        # bad
        ary.select(&:foo).map(&:bar)
        ary.filter(&:foo).map(&:bar)

        # good
        ary.filter_map { |o| o.bar if o.foo }
        ----

        == Performance/Size

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.30
        | -
        |===

        This cop is used to identify usages of `count` on an
        `Array` and `Hash` and change them to `size`.

        TODO: Add advanced detection of variables that could
        have been assigned to an array or a hash.

        === Examples

        [source,ruby]
        ----
        # bad
        [1, 2, 3].count
        (1..3).to_a.count
        Array[*1..3].count
        Array(1..3).count

        # bad
        {a: 1, b: 2, c: 3}.count
        [[:foo, :bar], [1, 2]].to_h.count
        Hash[*('a'..'z')].count
        Hash(key: :value).count

        # good
        [1, 2, 3].size
        (1..3).to_a.size
        Array[*1..3].size
        Array(1..3).size

        # good
        {a: 1, b: 2, c: 3}.size
        [[:foo, :bar], [1, 2]].to_h.size
        Hash[*('a'..'z')].size
        Hash(key: :value).size

        # good
        [1, 2, 3].count { |e| e > 2 }
        ----

        === References

        * https://github.com/JuanitoFatas/fast-ruby#arraylength-vs-arraysize-vs-arraycount-code

        == Performance/SortReverse

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | Yes
        | 1.7
        | -
        |===

        This cop identifies places where `sort { |a, b| b <=> a }`
        can be replaced by a faster `sort.reverse`.

        === Examples

        [source,ruby]
        ----
        # bad
        array.sort { |a, b| b <=> a }

        # good
        array.sort.reverse
        ----

        == Performance/Squeeze

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | Yes
        | 1.7
        | -
        |===

        This cop identifies places where `gsub(/a+/, 'a')` and `gsub!(/a+/, 'a')`
        can be replaced by `squeeze('a')` and `squeeze!('a')`.

        The `squeeze('a')` method is faster than `gsub(/a+/, 'a')`.

        === Examples

        [source,ruby]
        ----
        # bad
        str.gsub(/a+/, 'a')
        str.gsub!(/a+/, 'a')

        # good
        str.squeeze('a')
        str.squeeze!('a')
        ----

        === References

        * https://github.com/JuanitoFatas/fast-ruby#remove-extra-spaces-or-other-contiguous-characters-code

        == Performance/StartWith

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes (Unsafe)
        | 0.36
        | 1.10
        |===

        This cop identifies unnecessary use of a regex where `String#start_with?` would suffice.

        This cop has `SafeMultiline` configuration option that `true` by default because
        `^start` is unsafe as it will behave incompatible with `start_with?`
        for receiver is multiline string.

        === Examples

        [source,ruby]
        ----
        # bad
        'abc'.match?(/\Aab/)
        /\Aab/.match?('abc')
        'abc' =~ /\Aab/
        /\Aab/ =~ 'abc'
        'abc'.match(/\Aab/)
        /\Aab/.match('abc')

        # good
        'abc'.start_with?('ab')
        ----

        ==== SafeMultiline: true (default)

        [source,ruby]
        ----
        # good
        'abc'.match?(/^ab/)
        /^ab/.match?('abc')
        'abc' =~ /^ab/
        /^ab/ =~ 'abc'
        'abc'.match(/^ab/)
        /^ab/.match('abc')
        ----

        ==== SafeMultiline: false

        [source,ruby]
        ----
        # bad
        'abc'.match?(/^ab/)
        /^ab/.match?('abc')
        'abc' =~ /^ab/
        /^ab/ =~ 'abc'
        'abc'.match(/^ab/)
        /^ab/.match('abc')
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | SafeMultiline
        | `true`
        | Boolean
        |===

        === References

        * https://github.com/JuanitoFatas/fast-ruby#stringmatch-vs-stringstart_withstringend_with-code-start-code-end

        == Performance/StringInclude

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | Yes (Unsafe)
        | 1.7
        | -
        |===

        This cop identifies unnecessary use of a regex where
        `String#include?` would suffice.

        This cop's offenses are not safe to auto-correct if a receiver is nil.

        === Examples

        [source,ruby]
        ----
        # bad
        'abc'.match?(/ab/)
        /ab/.match?('abc')
        'abc' =~ /ab/
        /ab/ =~ 'abc'
        'abc'.match(/ab/)
        /ab/.match('abc')

        # good
        'abc'.include?('ab')
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | AutoCorrect
        | `false`
        | Boolean
        |===

        == Performance/StringReplacement

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.33
        | -
        |===

        This cop identifies places where `gsub` can be replaced by
        `tr` or `delete`.

        === Examples

        [source,ruby]
        ----
        # bad
        'abc'.gsub('b', 'd')
        'abc'.gsub('a', '')
        'abc'.gsub(/a/, 'd')
        'abc'.gsub!('a', 'd')

        # good
        'abc'.gsub(/.*/, 'a')
        'abc'.gsub(/a+/, 'd')
        'abc'.tr('b', 'd')
        'a b c'.delete(' ')
        ----

        === References

        * https://github.com/JuanitoFatas/fast-ruby#stringgsub-vs-stringtr-code

        == Performance/Sum

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | Yes
        | 1.8
        | -
        |===

        This cop identifies places where custom code finding the sum of elements
        in some Enumerable object can be replaced by `Enumerable#sum` method.

        This cop can change auto-correction scope depending on the value of
        `SafeAutoCorrect`.
        Its auto-correction is marked as safe by default (`SafeAutoCorrect: true`)
        to prevent `TypeError` in auto-correced code when initial value is not
        specified as shown below:

        [source,ruby]
        ----
        ['a', 'b'].sum # => (String can't be coerced into Integer)
        ----

        Therefore if initial value is not specified, unsafe auto-corrected will not occur.

        If you always want to enable auto-correction, you can set `SafeAutoCorrect: false`.

        [source,yaml]
        ----
        Performance/Sum:
          SafeAutoCorrect: false
        ----

        Please note that the auto-correction command line option will be changed from
        `rubocop -a` to `rubocop -A`, which includes unsafe auto-correction.

        === Examples

        [source,ruby]
        ----
        # bad
        [1, 2, 3].inject(:+)                        # These bad cases with no initial value are unsafe and
        [1, 2, 3].inject(&:+)                       # will not be auto-correced by default. If you want to
        [1, 2, 3].reduce { |acc, elem| acc + elem } # auto-corrected, you can set `SafeAutoCorrect: false`.
        [1, 2, 3].reduce(10, :+)
        [1, 2, 3].map { |elem| elem ** 2 }.sum
        [1, 2, 3].collect(&:count).sum(10)

        # good
        [1, 2, 3].sum
        [1, 2, 3].sum(10)
        [1, 2, 3].sum { |elem| elem ** 2 }
        [1, 2, 3].sum(10, &:count)
        ----

        === References

        * https://blog.bigbinary.com/2016/11/02/ruby-2-4-introduces-enumerable-sum.html

        == Performance/TimesMap

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes (Unsafe)
        | 0.36
        | 0.50
        |===

        This cop checks for .times.map calls.
        In most cases such calls can be replaced
        with an explicit array creation.

        === Examples

        [source,ruby]
        ----
        # bad
        9.times.map do |i|
          i.to_s
        end

        # good
        Array.new(9) do |i|
          i.to_s
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | AutoCorrect
        | `false`
        | Boolean
        |===

        == Performance/UnfreezeString

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes (Unsafe)
        | 0.50
        | 1.9
        |===

        In Ruby 2.3 or later, use unary plus operator to unfreeze a string
        literal instead of `String#dup` and `String.new`.
        Unary plus operator is faster than `String#dup`.

        NOTE: `String.new` (without operator) is not exactly the same as `+''`.
        These differ in encoding. `String.new.encoding` is always `ASCII-8BIT`.
        However, `(+'').encoding` is the same as script encoding(e.g. `UTF-8`).
        Therefore, auto-correction is unsafe.
        So, if you expect `ASCII-8BIT` encoding, disable this cop.

        === Examples

        [source,ruby]
        ----
        # bad
        ''.dup
        "something".dup
        String.new
        String.new('')
        String.new('something')

        # good
        +'something'
        +''
        ----

        == Performance/UriDefaultParser

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.50
        | -
        |===

        This cop identifies places where `URI::Parser.new`
        can be replaced by `URI::DEFAULT_PARSER`.

        === Examples

        [source,ruby]
        ----
        # bad
        URI::Parser.new

        # good
        URI::DEFAULT_PARSER
        ----
  recorded_at: Wed, 02 Jun 2021 08:24:29 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-performance/v1.11.3/config/default.yml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '3384'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"46dda4e34d98523fbcf35ad3d41503dc81ed3287117e0b951068dfe713f0bbf4"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 68C6:7B04:B845D:14E5ED:60B7403D
      Accept-Ranges:
      - bytes
      Date:
      - Wed, 02 Jun 2021 08:24:30 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-syd10148-SYD
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1622622269.278801,VS0,VE1025
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 6c85082f0520a51b0d268bd2b1c242d6a0036ead
      Expires:
      - Wed, 02 Jun 2021 08:29:30 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        # This is the default configuration file.

        Performance/AncestorsInclude:
          Description: 'Use `A <= B` instead of `A.ancestors.include?(B)`.'
          Reference: 'https://github.com/JuanitoFatas/fast-ruby#ancestorsinclude-vs--code'
          Enabled: 'pending'
          Safe: false
          VersionAdded: '1.7'

        Performance/ArraySemiInfiniteRangeSlice:
          Description: 'Identifies places where slicing arrays with semi-infinite ranges can be replaced by `Array#take` and `Array#drop`.'
          # This cop was created due to a mistake in microbenchmark.
          # Refer https://github.com/rubocop/rubocop-performance/pull/175#issuecomment-731892717
          Enabled: false
          # Unsafe for string slices because strings do not have `#take` and `#drop` methods.
          Safe: false
          VersionAdded: '1.9'

        Performance/BigDecimalWithNumericArgument:
          Description: 'Convert numeric argument to string before passing to BigDecimal.'
          Enabled: 'pending'
          VersionAdded: '1.7'

        Performance/BindCall:
          Description: 'Use `bind_call(obj, args, ...)` instead of `bind(obj).call(args, ...)`.'
          Enabled: true
          VersionAdded: '1.6'

        Performance/BlockGivenWithExplicitBlock:
          Description: 'Check block argument explicitly instead of using `block_given?`.'
          Enabled: pending
          VersionAdded: '1.9'

        Performance/Caller:
          Description: >-
                     Use `caller(n..n)` instead of `caller`.
          Enabled: true
          VersionAdded: '0.49'
          VersionChanged: '1.9'

        Performance/CaseWhenSplat:
          Description: >-
                         Reordering `when` conditions with a splat to the end
                         of the `when` branches can improve performance.
          Enabled: false
          AutoCorrect: false
          SafeAutoCorrect: false
          VersionAdded: '0.34'
          VersionChanged: '0.59'

        Performance/Casecmp:
          Description: >-
                     Use `casecmp` rather than `downcase ==`, `upcase ==`, `== downcase`, or `== upcase`..
          Reference: 'https://github.com/JuanitoFatas/fast-ruby#stringcasecmp-vs-stringdowncase---code'
          Enabled: true
          Safe: false
          VersionAdded: '0.36'

        Performance/ChainArrayAllocation:
          Description: >-
                          Instead of chaining array methods that allocate new arrays, mutate an
                          existing array.
          Reference: 'https://twitter.com/schneems/status/1034123879978029057'
          Enabled: false
          VersionAdded: '0.59'

        Performance/CollectionLiteralInLoop:
          Description: 'Extract Array and Hash literals outside of loops into local variables or constants.'
          Enabled: 'pending'
          VersionAdded: '1.8'
          # Min number of elements to consider an offense
          MinSize: 1

        Performance/CompareWithBlock:
          Description: 'Use `sort_by(&:foo)` instead of `sort { |a, b| a.foo <=> b.foo }`.'
          Enabled: true
          VersionAdded: '0.46'

        Performance/ConstantRegexp:
          Description: 'Finds regular expressions with dynamic components that are all constants.'
          Enabled: pending
          VersionAdded: '1.9'
          VersionChanged: '1.10'

        Performance/Count:
          Description: >-
                          Use `count` instead of `{select,find_all,filter,reject}...{size,count,length}`.
          # This cop has known compatibility issues with `ActiveRecord` and other
          # frameworks. ActiveRecord's `count` ignores the block that is passed to it.
          # For more information, see the documentation in the cop itself.
          SafeAutoCorrect: false
          Enabled: true
          VersionAdded: '0.31'
          VersionChanged: '1.8'

        Performance/DeletePrefix:
          Description: 'Use `delete_prefix` instead of `gsub`.'
          Enabled: true
          SafeMultiline: true
          VersionAdded: '1.6'

        Performance/DeleteSuffix:
          Description: 'Use `delete_suffix` instead of `gsub`.'
          Enabled: true
          SafeMultiline: true
          VersionAdded: '1.6'

        Performance/Detect:
          Description: >-
                          Use `detect` instead of `select.first`, `find_all.first`, `filter.first`,
                          `select.last`, `find_all.last`, and `filter.last`.
          Reference: 'https://github.com/JuanitoFatas/fast-ruby#enumerabledetect-vs-enumerableselectfirst-code'
          # This cop has known compatibility issues with `ActiveRecord` and other
          # frameworks. `ActiveRecord` does not implement a `detect` method and `find`
          # has its own meaning. Correcting `ActiveRecord` methods with this cop
          # should be considered unsafe.
          SafeAutoCorrect: false
          Enabled: true
          VersionAdded: '0.30'
          VersionChanged: '1.8'

        Performance/DoubleStartEndWith:
          Description: >-
                          Use `str.{start,end}_with?(x, ..., y, ...)`
                          instead of `str.{start,end}_with?(x, ...) || str.{start,end}_with?(y, ...)`.
          Enabled: true
          VersionAdded: '0.36'
          VersionChanged: '0.48'
          # Used to check for `starts_with?` and `ends_with?`.
          # These methods are defined by `ActiveSupport`.
          IncludeActiveSupportAliases: false

        Performance/EndWith:
          Description: 'Use `end_with?` instead of a regex match anchored to the end of a string.'
          Reference: 'https://github.com/JuanitoFatas/fast-ruby#stringmatch-vs-stringstart_withstringend_with-code-start-code-end'
          # This will change to a new method call which isn't guaranteed to be on the
          # object. Switching these methods has to be done with knowledge of the types
          # of the variables which rubocop doesn't have.
          SafeAutoCorrect: false
          Enabled: true
          SafeMultiline: true
          VersionAdded: '0.36'
          VersionChanged: '1.10'

        Performance/FixedSize:
          Description: 'Do not compute the size of statically sized objects except in constants.'
          Enabled: true
          VersionAdded: '0.35'

        Performance/FlatMap:
          Description: >-
                          Use `Enumerable#flat_map`
                          instead of `Enumerable#map...Array#flatten(1)`
                          or `Enumberable#collect..Array#flatten(1)`.
          Reference: 'https://github.com/JuanitoFatas/fast-ruby#enumerablemaparrayflatten-vs-enumerableflat_map-code'
          Enabled: true
          VersionAdded: '0.30'
          EnabledForFlattenWithoutParams: false
          # If enabled, this cop will warn about usages of
          # `flatten` being called without any parameters.
          # This can be dangerous since `flat_map` will only flatten 1 level, and
          # `flatten` without any parameters can flatten multiple levels.

        Performance/InefficientHashSearch:
          Description: 'Use `key?` or `value?` instead of `keys.include?` or `values.include?`.'
          Reference: 'https://github.com/JuanitoFatas/fast-ruby#hashkey-instead-of-hashkeysinclude-code'
          Enabled: true
          VersionAdded: '0.56'
          Safe: false

        Performance/IoReadlines:
          Description: 'Use `IO.each_line` (`IO#each_line`) instead of `IO.readlines` (`IO#readlines`).'
          Reference: 'https://docs.gitlab.com/ee/development/performance.html#reading-from-files-and-other-data-sources'
          Enabled: false
          VersionAdded: '1.7'

        Performance/MapCompact:
          Description: 'Use `filter_map` instead of `collection.map(&:do_something).compact`.'
          Enabled: pending
          SafeAutoCorrect: false
          VersionAdded: '1.11'

        Performance/MethodObjectAsBlock:
          Description: 'Use block explicitly instead of block-passing a method object.'
          Reference: 'https://github.com/JuanitoFatas/fast-ruby#normal-way-to-apply-method-vs-method-code'
          Enabled: pending
          VersionAdded: '1.9'

        Performance/OpenStruct:
          Description: 'Use `Struct` instead of `OpenStruct`.'
          Enabled: false
          VersionAdded: '0.61'
          Safe: false

        Performance/RangeInclude:
          Description: 'Use `Range#cover?` instead of `Range#include?` (or `Range#member?`).'
          Reference: 'https://github.com/JuanitoFatas/fast-ruby#cover-vs-include-code'
          Enabled: true
          VersionAdded: '0.36'
          VersionChanged: '1.7'
          Safe: false

        Performance/RedundantBlockCall:
          Description: 'Use `yield` instead of `block.call`.'
          Reference: 'https://github.com/JuanitoFatas/fast-ruby#proccall-and-block-arguments-vs-yieldcode'
          Enabled: true
          VersionAdded: '0.36'

        Performance/RedundantEqualityComparisonBlock:
          Description: >-
                          Checks for uses `Enumerable#all?`, `Enumerable#any?`, `Enumerable#one?`,
                          or `Enumerable#none?` are compared with `===` or similar methods in block.
          Reference: 'https://github.com/rails/rails/pull/41363'
          Enabled: pending
          Safe: false
          VersionAdded: '1.10'

        Performance/RedundantMatch:
          Description: >-
                          Use `=~` instead of `String#match` or `Regexp#match` in a context where the
                          returned `MatchData` is not needed.
          Enabled: true
          VersionAdded: '0.36'

        Performance/RedundantMerge:
          Description: 'Use Hash#[]=, rather than Hash#merge! with a single key-value pair.'
          Reference: 'https://github.com/JuanitoFatas/fast-ruby#hashmerge-vs-hash-code'
          Enabled: true
          Safe: false
          VersionAdded: '0.36'
          VersionChanged: '1.11'
          # Max number of key-value pairs to consider an offense
          MaxKeyValuePairs: 2

        Performance/RedundantSortBlock:
          Description: 'Use `sort` instead of `sort { |a, b| a <=> b }`.'
          Enabled: 'pending'
          VersionAdded: '1.7'

        Performance/RedundantSplitRegexpArgument:
          Description: 'This cop identifies places where `split` argument can be replaced from a deterministic regexp to a string.'
          Enabled: pending
          VersionAdded: '1.10'

        Performance/RedundantStringChars:
          Description: 'Checks for redundant `String#chars`.'
          Enabled: 'pending'
          VersionAdded: '1.7'

        Performance/RegexpMatch:
          Description: >-
                          Use `match?` instead of `Regexp#match`, `String#match`, `Symbol#match`,
                          `Regexp#===`, or `=~` when `MatchData` is not used.
          Reference: 'https://github.com/JuanitoFatas/fast-ruby#regexp-vs-stringmatch-vs-string-vs-stringmatch-code-'
          Enabled: true
          VersionAdded: '0.47'

        Performance/ReverseEach:
          Description: 'Use `reverse_each` instead of `reverse.each`.'
          Reference: 'https://github.com/JuanitoFatas/fast-ruby#enumerablereverseeach-vs-enumerablereverse_each-code'
          Enabled: true
          VersionAdded: '0.30'

        Performance/ReverseFirst:
          Description: 'Use `last(n).reverse` instead of `reverse.first(n)`.'
          Enabled: 'pending'
          VersionAdded: '1.7'

        Performance/SelectMap:
          Description: 'Use `filter_map` instead of `ary.select(&:foo).map(&:bar)`.'
          Enabled: false
          VersionAdded: '1.11'

        Performance/Size:
          Description: >-
                          Use `size` instead of `count` for counting
                          the number of elements in `Array` and `Hash`.
          Reference: 'https://github.com/JuanitoFatas/fast-ruby#arraylength-vs-arraysize-vs-arraycount-code'
          Enabled: true
          VersionAdded: '0.30'

        Performance/SortReverse:
          Description: 'Use `sort.reverse` instead of `sort { |a, b| b <=> a }`.'
          Enabled: 'pending'
          VersionAdded: '1.7'

        Performance/Squeeze:
          Description: "Use `squeeze('a')` instead of `gsub(/a+/, 'a')`."
          Reference: 'https://github.com/JuanitoFatas/fast-ruby#remove-extra-spaces-or-other-contiguous-characters-code'
          Enabled: 'pending'
          VersionAdded: '1.7'

        Performance/StartWith:
          Description: 'Use `start_with?` instead of a regex match anchored to the beginning of a string.'
          Reference: 'https://github.com/JuanitoFatas/fast-ruby#stringmatch-vs-stringstart_withstringend_with-code-start-code-end'
          # This will change to a new method call which isn't guaranteed to be on the
          # object. Switching these methods has to be done with knowledge of the types
          # of the variables which rubocop doesn't have.
          SafeAutoCorrect: false
          Enabled: true
          SafeMultiline: true
          VersionAdded: '0.36'
          VersionChanged: '1.10'

        Performance/StringInclude:
          Description: 'Use `String#include?` instead of a regex match with literal-only pattern.'
          Enabled: 'pending'
          AutoCorrect: false
          SafeAutoCorrect: false
          VersionAdded: '1.7'

        Performance/StringReplacement:
          Description: >-
                          Use `tr` instead of `gsub` when you are replacing the same
                          number of characters. Use `delete` instead of `gsub` when
                          you are deleting characters.
          Reference: 'https://github.com/JuanitoFatas/fast-ruby#stringgsub-vs-stringtr-code'
          Enabled: true
          VersionAdded: '0.33'

        Performance/Sum:
          Description: 'Use `sum` instead of a custom array summation.'
          Reference: 'https://blog.bigbinary.com/2016/11/02/ruby-2-4-introduces-enumerable-sum.html'
          Enabled: 'pending'
          VersionAdded: '1.8'

        Performance/TimesMap:
          Description: 'Checks for .times.map calls.'
          AutoCorrect: false
          Enabled: true
          VersionAdded: '0.36'
          VersionChanged: '0.50'
          SafeAutoCorrect: false # see https://github.com/rubocop/rubocop/issues/4658

        Performance/UnfreezeString:
          Description: 'Use unary plus to get an unfrozen string literal.'
          Enabled: true
          SafeAutoCorrect: false
          VersionAdded: '0.50'
          VersionChanged: '1.9'

        Performance/UriDefaultParser:
          Description: 'Use `URI::DEFAULT_PARSER` instead of `URI::Parser.new`.'
          Enabled: true
          VersionAdded: '0.50'
  recorded_at: Wed, 02 Jun 2021 08:24:30 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-rails/v2.10.1/docs/modules/ROOT/pages/cops.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '1648'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"b368e416e44a1556887f4c76169ab53b0dee78d15f948361cd22548bc4019995"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - DD3C:2324:3EFD94:4F60F3:60B7403E
      Accept-Ranges:
      - bytes
      Date:
      - Wed, 02 Jun 2021 08:24:31 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-mel11278-MEL
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1622622271.699396,VS0,VE892
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 9ad86eb62d139d3ec653d4151170f832e999b830
      Expires:
      - Wed, 02 Jun 2021 08:29:31 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        = Cops

        In RuboCop lingo the various checks performed on the code are called cops.
        Each cop is responsible for detecting one particular offense.
        RuboCop Rails has only one Rails department.

        Some of the Rails cops have configuration options, allowing them to
        enforce different coding conventions.

        == Rails

        Rails cops check for Rails best practices and coding conventions. Many of the them are
        based on the https://rails.rubystyle.guide/[Rails Style Guide].

        // START_COP_LIST

        === Department xref:cops_rails.adoc[Rails]

        * xref:cops_rails.adoc#railsactionfilter[Rails/ActionFilter]
        * xref:cops_rails.adoc#railsactiverecordaliases[Rails/ActiveRecordAliases]
        * xref:cops_rails.adoc#railsactiverecordcallbacksorder[Rails/ActiveRecordCallbacksOrder]
        * xref:cops_rails.adoc#railsactiverecordoverride[Rails/ActiveRecordOverride]
        * xref:cops_rails.adoc#railsactivesupportaliases[Rails/ActiveSupportAliases]
        * xref:cops_rails.adoc#railsaftercommitoverride[Rails/AfterCommitOverride]
        * xref:cops_rails.adoc#railsapplicationcontroller[Rails/ApplicationController]
        * xref:cops_rails.adoc#railsapplicationjob[Rails/ApplicationJob]
        * xref:cops_rails.adoc#railsapplicationmailer[Rails/ApplicationMailer]
        * xref:cops_rails.adoc#railsapplicationrecord[Rails/ApplicationRecord]
        * xref:cops_rails.adoc#railsarelstar[Rails/ArelStar]
        * xref:cops_rails.adoc#railsassertnot[Rails/AssertNot]
        * xref:cops_rails.adoc#railsattributedefaultblockvalue[Rails/AttributeDefaultBlockValue]
        * xref:cops_rails.adoc#railsbelongsto[Rails/BelongsTo]
        * xref:cops_rails.adoc#railsblank[Rails/Blank]
        * xref:cops_rails.adoc#railsbulkchangetable[Rails/BulkChangeTable]
        * xref:cops_rails.adoc#railscontenttag[Rails/ContentTag]
        * xref:cops_rails.adoc#railscreatetablewithtimestamps[Rails/CreateTableWithTimestamps]
        * xref:cops_rails.adoc#railsdate[Rails/Date]
        * xref:cops_rails.adoc#railsdefaultscope[Rails/DefaultScope]
        * xref:cops_rails.adoc#railsdelegate[Rails/Delegate]
        * xref:cops_rails.adoc#railsdelegateallowblank[Rails/DelegateAllowBlank]
        * xref:cops_rails.adoc#railsdynamicfindby[Rails/DynamicFindBy]
        * xref:cops_rails.adoc#railsenumhash[Rails/EnumHash]
        * xref:cops_rails.adoc#railsenumuniqueness[Rails/EnumUniqueness]
        * xref:cops_rails.adoc#railsenvironmentcomparison[Rails/EnvironmentComparison]
        * xref:cops_rails.adoc#railsenvironmentvariableaccess[Rails/EnvironmentVariableAccess]
        * xref:cops_rails.adoc#railsexit[Rails/Exit]
        * xref:cops_rails.adoc#railsfilepath[Rails/FilePath]
        * xref:cops_rails.adoc#railsfindby[Rails/FindBy]
        * xref:cops_rails.adoc#railsfindbyid[Rails/FindById]
        * xref:cops_rails.adoc#railsfindeach[Rails/FindEach]
        * xref:cops_rails.adoc#railshasandbelongstomany[Rails/HasAndBelongsToMany]
        * xref:cops_rails.adoc#railshasmanyorhasonedependent[Rails/HasManyOrHasOneDependent]
        * xref:cops_rails.adoc#railshelperinstancevariable[Rails/HelperInstanceVariable]
        * xref:cops_rails.adoc#railshttppositionalarguments[Rails/HttpPositionalArguments]
        * xref:cops_rails.adoc#railshttpstatus[Rails/HttpStatus]
        * xref:cops_rails.adoc#railsignoredskipactionfilteroption[Rails/IgnoredSkipActionFilterOption]
        * xref:cops_rails.adoc#railsindexby[Rails/IndexBy]
        * xref:cops_rails.adoc#railsindexwith[Rails/IndexWith]
        * xref:cops_rails.adoc#railsinquiry[Rails/Inquiry]
        * xref:cops_rails.adoc#railsinverseof[Rails/InverseOf]
        * xref:cops_rails.adoc#railslexicallyscopedactionfilter[Rails/LexicallyScopedActionFilter]
        * xref:cops_rails.adoc#railslinktoblank[Rails/LinkToBlank]
        * xref:cops_rails.adoc#railsmailername[Rails/MailerName]
        * xref:cops_rails.adoc#railsmatchroute[Rails/MatchRoute]
        * xref:cops_rails.adoc#railsnegateinclude[Rails/NegateInclude]
        * xref:cops_rails.adoc#railsnotnullcolumn[Rails/NotNullColumn]
        * xref:cops_rails.adoc#railsorderbyid[Rails/OrderById]
        * xref:cops_rails.adoc#railsoutput[Rails/Output]
        * xref:cops_rails.adoc#railsoutputsafety[Rails/OutputSafety]
        * xref:cops_rails.adoc#railspick[Rails/Pick]
        * xref:cops_rails.adoc#railspluck[Rails/Pluck]
        * xref:cops_rails.adoc#railspluckid[Rails/PluckId]
        * xref:cops_rails.adoc#railspluckinwhere[Rails/PluckInWhere]
        * xref:cops_rails.adoc#railspluralizationgrammar[Rails/PluralizationGrammar]
        * xref:cops_rails.adoc#railspresence[Rails/Presence]
        * xref:cops_rails.adoc#railspresent[Rails/Present]
        * xref:cops_rails.adoc#railsrakeenvironment[Rails/RakeEnvironment]
        * xref:cops_rails.adoc#railsreadwriteattribute[Rails/ReadWriteAttribute]
        * xref:cops_rails.adoc#railsredundantallownil[Rails/RedundantAllowNil]
        * xref:cops_rails.adoc#railsredundantforeignkey[Rails/RedundantForeignKey]
        * xref:cops_rails.adoc#railsredundantreceiverinwithoptions[Rails/RedundantReceiverInWithOptions]
        * xref:cops_rails.adoc#railsreflectionclassname[Rails/ReflectionClassName]
        * xref:cops_rails.adoc#railsrefutemethods[Rails/RefuteMethods]
        * xref:cops_rails.adoc#railsrelativedateconstant[Rails/RelativeDateConstant]
        * xref:cops_rails.adoc#railsrenderinline[Rails/RenderInline]
        * xref:cops_rails.adoc#railsrenderplaintext[Rails/RenderPlainText]
        * xref:cops_rails.adoc#railsrequestreferer[Rails/RequestReferer]
        * xref:cops_rails.adoc#railsrequiredependency[Rails/RequireDependency]
        * xref:cops_rails.adoc#railsreversiblemigration[Rails/ReversibleMigration]
        * xref:cops_rails.adoc#railsreversiblemigrationmethoddefinition[Rails/ReversibleMigrationMethodDefinition]
        * xref:cops_rails.adoc#railssafenavigation[Rails/SafeNavigation]
        * xref:cops_rails.adoc#railssafenavigationwithblank[Rails/SafeNavigationWithBlank]
        * xref:cops_rails.adoc#railssavebang[Rails/SaveBang]
        * xref:cops_rails.adoc#railsscopeargs[Rails/ScopeArgs]
        * xref:cops_rails.adoc#railsshorti18n[Rails/ShortI18n]
        * xref:cops_rails.adoc#railsskipsmodelvalidations[Rails/SkipsModelValidations]
        * xref:cops_rails.adoc#railssquishedsqlheredocs[Rails/SquishedSQLHeredocs]
        * xref:cops_rails.adoc#railstimezone[Rails/TimeZone]
        * xref:cops_rails.adoc#railstimezoneassignment[Rails/TimeZoneAssignment]
        * xref:cops_rails.adoc#railsuniqbeforepluck[Rails/UniqBeforePluck]
        * xref:cops_rails.adoc#railsuniquevalidationwithoutindex[Rails/UniqueValidationWithoutIndex]
        * xref:cops_rails.adoc#railsunknownenv[Rails/UnknownEnv]
        * xref:cops_rails.adoc#railsvalidation[Rails/Validation]
        * xref:cops_rails.adoc#railswhereequals[Rails/WhereEquals]
        * xref:cops_rails.adoc#railswhereexists[Rails/WhereExists]
        * xref:cops_rails.adoc#railswherenot[Rails/WhereNot]

        // END_COP_LIST
  recorded_at: Wed, 02 Jun 2021 08:24:31 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-rails/v2.10.1/docs/modules/ROOT/pages/cops_rails.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '18213'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"fe138cb06dffcb98833ffdedb7ea25d5a892fb606b37b8c898bc0dd894e8aeba"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - BA46:7B05:25CF11:2F3658:60B7403F
      Accept-Ranges:
      - bytes
      Date:
      - Wed, 02 Jun 2021 08:24:34 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-mel11233-MEL
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1622622272.796476,VS0,VE2961
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 8b1f259738ce69debd07727823e08aba59b61a18
      Expires:
      - Wed, 02 Jun 2021 08:29:34 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        = Rails

        == Rails/ActionFilter

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.19
        | -
        |===

        This cop enforces the consistent use of action filter methods.

        The cop is configurable and can enforce the use of the older
        something_filter methods or the newer something_action methods.

        === Examples

        ==== EnforcedStyle: action (default)

        [source,ruby]
        ----
        # bad
        after_filter :do_stuff
        append_around_filter :do_stuff
        skip_after_filter :do_stuff

        # good
        after_action :do_stuff
        append_around_action :do_stuff
        skip_after_action :do_stuff
        ----

        ==== EnforcedStyle: filter

        [source,ruby]
        ----
        # bad
        after_action :do_stuff
        append_around_action :do_stuff
        skip_after_action :do_stuff

        # good
        after_filter :do_stuff
        append_around_filter :do_stuff
        skip_after_filter :do_stuff
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | EnforcedStyle
        | `action`
        | `action`, `filter`

        | Include
        | `app/controllers/**/*.rb`
        | Array
        |===

        == Rails/ActiveRecordAliases

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes (Unsafe)
        | 0.53
        | -
        |===

        Checks that ActiveRecord aliases are not used. The direct method names
        are more clear and easier to read.

        === Examples

        [source,ruby]
        ----
        #bad
        Book.update_attributes!(author: 'Alice')

        #good
        Book.update!(author: 'Alice')
        ----

        == Rails/ActiveRecordCallbacksOrder

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | Yes
        | 2.7
        | -
        |===

        This cop checks that Active Record callbacks are declared
        in the order in which they will be executed.

        === Examples

        [source,ruby]
        ----
        # bad
        class Person < ApplicationRecord
          after_commit :after_commit_callback
          before_validation :before_validation_callback
        end

        # good
        class Person < ApplicationRecord
          before_validation :before_validation_callback
          after_commit :after_commit_callback
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `app/models/**/*.rb`
        | Array
        |===

        === References

        * https://rails.rubystyle.guide/#callbacks-order

        == Rails/ActiveRecordOverride

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | No
        | 0.67
        | -
        |===

        Checks for overriding built-in Active Record methods instead of using
        callbacks.

        === Examples

        [source,ruby]
        ----
        # bad
        class Book < ApplicationRecord
          def save
            self.title = title.upcase!
            super
          end
        end

        # good
        class Book < ApplicationRecord
          before_save :upcase_title

          def upcase_title
            self.title = title.upcase!
          end
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `app/models/**/*.rb`
        | Array
        |===

        == Rails/ActiveSupportAliases

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.48
        | -
        |===

        This cop checks that ActiveSupport aliases to core ruby methods
        are not used.

        === Examples

        [source,ruby]
        ----
        # good
        'some_string'.start_with?('prefix')
        'some_string'.end_with?('suffix')
        [1, 2, 'a'] << 'b'
        [1, 2, 'a'].unshift('b')

        # bad
        'some_string'.starts_with?('prefix')
        'some_string'.ends_with?('suffix')
        [1, 2, 'a'].append('b')
        [1, 2, 'a'].prepend('b')
        ----

        == Rails/AfterCommitOverride

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | No
        | 2.8
        | -
        |===

        This cop enforces that there is only one call to `after_commit`
        (and its aliases - `after_create_commit`, `after_update_commit`,
        and `after_destroy_commit`) with the same callback name per model.

        === Examples

        [source,ruby]
        ----
        # bad
        # This won't be triggered.
        after_create_commit :log_action

        # This will override the callback added by
        # after_create_commit.
        after_update_commit :log_action

        # bad
        # This won't be triggered.
        after_commit :log_action, on: :create
        # This won't be triggered.
        after_update_commit :log_action
        # This will override both previous callbacks.
        after_commit :log_action, on: :destroy

        # good
        after_save_commit :log_action

        # good
        after_create_commit :log_create_action
        after_update_commit :log_update_action
        ----

        == Rails/ApplicationController

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes (Unsafe)
        | 2.4
        | 2.5
        |===

        This cop checks that controllers subclass ApplicationController.

        === Examples

        [source,ruby]
        ----
        # good
        class MyController < ApplicationController
          # ...
        end

        # bad
        class MyController < ActionController::Base
          # ...
        end
        ----

        == Rails/ApplicationJob

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes (Unsafe)
        | 0.49
        | 2.5
        |===

        This cop checks that jobs subclass ApplicationJob with Rails 5.0.

        === Examples

        [source,ruby]
        ----
        # good
        class Rails5Job < ApplicationJob
          # ...
        end

        # bad
        class Rails4Job < ActiveJob::Base
          # ...
        end
        ----

        == Rails/ApplicationMailer

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes (Unsafe)
        | 2.4
        | 2.5
        |===

        This cop checks that mailers subclass ApplicationMailer with Rails 5.0.

        === Examples

        [source,ruby]
        ----
        # good
        class MyMailer < ApplicationMailer
          # ...
        end

        # bad
        class MyMailer < ActionMailer::Base
          # ...
        end
        ----

        == Rails/ApplicationRecord

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes (Unsafe)
        | 0.49
        | 2.5
        |===

        This cop checks that models subclass ApplicationRecord with Rails 5.0.

        === Examples

        [source,ruby]
        ----
        # good
        class Rails5Model < ApplicationRecord
          # ...
        end

        # bad
        class Rails4Model < ActiveRecord::Base
          # ...
        end
        ----

        == Rails/ArelStar

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes (Unsafe)
        | 2.9
        | -
        |===

        This cop prevents usage of `"*"` on an Arel::Table column reference.

        Using `arel_table["*"]` causes the outputted string to be a literal
        quoted asterisk (e.g. <tt>`my_model`.`*`</tt>). This causes the
        database to look for a column named <tt>`*`</tt> (or `"*"`) as opposed
        to expanding the column list as one would likely expect.

        === Examples

        [source,ruby]
        ----
        # bad
        MyTable.arel_table["*"]

        # good
        MyTable.arel_table[Arel.star]
        ----

        == Rails/AssertNot

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.56
        | -
        |===

        Use `assert_not` instead of `assert !`.

        === Examples

        [source,ruby]
        ----
        # bad
        assert !x

        # good
        assert_not x
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `+**/test/**/*+`
        | Array
        |===

        == Rails/AttributeDefaultBlockValue

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | Yes
        | 2.9
        | -
        |===

        This cop looks for `attribute` class methods that specify a `:default` option
        which value is an array, string literal or method call without a block.
        It will accept all other values, such as string, symbol, integer and float literals
        as well as constants.

        === Examples

        [source,ruby]
        ----
        # bad
        class User < ApplicationRecord
          attribute :confirmed_at, :datetime, default: Time.zone.now
        end

        # good
        class User < ApplicationRecord
          attribute :confirmed_at, :datetime, default: -> { Time.zone.now }
        end

        # bad
        class User < ApplicationRecord
          attribute :roles, :string, array: true, default: []
        end

        # good
        class User < ApplicationRecord
          attribute :roles, :string, array: true, default: -> { [] }
        end

        # bad
        class User < ApplicationRecord
          attribute :configuration, default: {}
        end

        # good
        class User < ApplicationRecord
          attribute :configuration, default: -> { {} }
        end

        # good
        class User < ApplicationRecord
          attribute :role, :string, default: :customer
        end

        # good
        class User < ApplicationRecord
          attribute :activated, :boolean, default: false
        end

        # good
        class User < ApplicationRecord
          attribute :login_count, :integer, default: 0
        end

        # good
        class User < ApplicationRecord
          FOO = 123
          attribute :custom_attribute, :integer, default: FOO
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `models/**/*`
        | Array
        |===

        == Rails/BelongsTo

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.62
        | -
        |===

        This cop looks for belongs_to associations where we control whether the
        association is required via the deprecated `required` option instead.

        Since Rails 5, belongs_to associations are required by default and this
        can be controlled through the use of `optional: true`.

        From the release notes:

            belongs_to will now trigger a validation error by default if the
            association is not present. You can turn this off on a
            per-association basis with optional: true. Also deprecate required
            option in favor of optional for belongs_to. (Pull Request)

        In the case that the developer is doing `required: false`, we
        definitely want to autocorrect to `optional: true`.

        However, without knowing whether they've set overridden the default
        value of `config.active_record.belongs_to_required_by_default`, we
        can't say whether it's safe to remove `required: true` or whether we
        should replace it with `optional: false` (or, similarly, remove a
        superfluous `optional: false`). Therefore, in the cases we're using
        `required: true`, we'll simply invert it to `optional: false` and the
        user can remove depending on their defaults.

        === Examples

        [source,ruby]
        ----
        # bad
        class Post < ApplicationRecord
          belongs_to :blog, required: false
        end

        # good
        class Post < ApplicationRecord
          belongs_to :blog, optional: true
        end

        # bad
        class Post < ApplicationRecord
          belongs_to :blog, required: true
        end

        # good
        class Post < ApplicationRecord
          belongs_to :blog, optional: false
        end
        ----

        == Rails/Blank

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes (Unsafe)
        | 0.48
        | 2.10
        |===

        This cop checks for code that can be written with simpler conditionals
        using `Object#blank?` defined by Active Support.

        This cop is marked as unsafe auto-correction, because `' '.empty?` returns false,
        but `' '.blank?` returns true. Therefore, auto-correction is not compatible
        if the receiver is a non-empty blank string, tab, or newline meta characters.

        Interaction with `Style/UnlessElse`:
        The configuration of `NotPresent` will not produce an offense in the
        context of `unless else` if `Style/UnlessElse` is inabled. This is
        to prevent interference between the auto-correction of the two cops.

        === Examples

        ==== NilOrEmpty: true (default)

        [source,ruby]
        ----
        # Converts usages of `nil? || empty?` to `blank?`

        # bad
        foo.nil? || foo.empty?
        foo == nil || foo.empty?

        # good
        foo.blank?
        ----

        ==== NotPresent: true (default)

        [source,ruby]
        ----
        # Converts usages of `!present?` to `blank?`

        # bad
        !foo.present?

        # good
        foo.blank?
        ----

        ==== UnlessPresent: true (default)

        [source,ruby]
        ----
        # Converts usages of `unless present?` to `if blank?`

        # bad
        something unless foo.present?

        # good
        something if foo.blank?

        # bad
        unless foo.present?
          something
        end

        # good
        if foo.blank?
          something
        end

        # good
        def blank?
          !present?
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | NilOrEmpty
        | `true`
        | Boolean

        | NotPresent
        | `true`
        | Boolean

        | UnlessPresent
        | `true`
        | Boolean
        |===

        == Rails/BulkChangeTable

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | No
        | 0.57
        | -
        |===

        This Cop checks whether alter queries are combinable.
        If combinable queries are detected, it suggests to you
        to use `change_table` with `bulk: true` instead.
        This option causes the migration to generate a single
        ALTER TABLE statement combining multiple column alterations.

        The `bulk` option is only supported on the MySQL and
        the PostgreSQL (5.2 later) adapter; thus it will
        automatically detect an adapter from `development` environment
        in `config/database.yml` when the `Database` option is not set.
        If the adapter is not `mysql2` or `postgresql`,
        this Cop ignores offenses.

        === Examples

        [source,ruby]
        ----
        # bad
        def change
          add_column :users, :name, :string, null: false
          add_column :users, :nickname, :string

          # ALTER TABLE `users` ADD `name` varchar(255) NOT NULL
          # ALTER TABLE `users` ADD `nickname` varchar(255)
        end

        # good
        def change
          change_table :users, bulk: true do |t|
            t.string :name, null: false
            t.string :nickname
          end

          # ALTER TABLE `users` ADD `name` varchar(255) NOT NULL,
          #                     ADD `nickname` varchar(255)
        end
        ----

        [source,ruby]
        ----
        # bad
        def change
          change_table :users do |t|
            t.string :name, null: false
            t.string :nickname
          end
        end

        # good
        def change
          change_table :users, bulk: true do |t|
            t.string :name, null: false
            t.string :nickname
          end
        end

        # good
        # When you don't want to combine alter queries.
        def change
          change_table :users, bulk: false do |t|
            t.string :name, null: false
            t.string :nickname
          end
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Database
        | `<none>`
        | `mysql`, `postgresql`

        | Include
        | `db/migrate/*.rb`
        | Array
        |===

        == Rails/ContentTag

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 2.6
        | -
        |===

        This cop checks that `tag` is used instead of `content_tag`
        because `content_tag` is legacy syntax.

        NOTE: Allow `content_tag` when the first argument is a variable because
             `content_tag(name)` is simpler rather than `tag.public_send(name)`.

        === Examples

        [source,ruby]
        ----
        # bad
        content_tag(:p, 'Hello world!')
        content_tag(:br)

        # good
        tag.p('Hello world!')
        tag.br
        content_tag(name, 'Hello world!')
        ----

        === References

        * https://github.com/rails/rails/issues/25195
        * https://api.rubyonrails.org/classes/ActionView/Helpers/TagHelper.html#method-i-content_tag

        == Rails/CreateTableWithTimestamps

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | No
        | 0.52
        | -
        |===

        This cop checks the migration for which timestamps are not included
        when creating a new table.
        In many cases, timestamps are useful information and should be added.

        === Examples

        [source,ruby]
        ----
        # bad
        create_table :users

        # bad
        create_table :users do |t|
          t.string :name
          t.string :email
        end

        # good
        create_table :users do |t|
          t.string :name
          t.string :email

          t.timestamps
        end

        # good
        create_table :users do |t|
          t.string :name
          t.string :email

          t.datetime :created_at, default: -> { 'CURRENT_TIMESTAMP' }
        end

        # good
        create_table :users do |t|
          t.string :name
          t.string :email

          t.datetime :updated_at, default: -> { 'CURRENT_TIMESTAMP' }
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `db/migrate/*.rb`
        | Array
        |===

        == Rails/Date

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | No
        | 0.30
        | 0.33
        |===

        This cop checks for the correct use of Date methods,
        such as Date.today, Date.current etc.

        Using `Date.today` is dangerous, because it doesn't know anything about
        Rails time zone. You must use `Time.zone.today` instead.

        The cop also reports warnings when you are using `to_time` method,
        because it doesn't know about Rails time zone either.

        Two styles are supported for this cop. When EnforcedStyle is 'strict'
        then the Date methods `today`, `current`, `yesterday`, and `tomorrow`
        are prohibited and the usage of both `to_time`
        and 'to_time_in_current_zone' are reported as warning.

        When EnforcedStyle is 'flexible' then only `Date.today` is prohibited
        and only `to_time` is reported as warning.

        === Examples

        ==== EnforcedStyle: strict

        [source,ruby]
        ----
        # bad
        Date.current
        Date.yesterday
        Date.today
        date.to_time

        # good
        Time.zone.today
        Time.zone.today - 1.day
        ----

        ==== EnforcedStyle: flexible (default)

        [source,ruby]
        ----
        # bad
        Date.today
        date.to_time

        # good
        Time.zone.today
        Time.zone.today - 1.day
        Date.current
        Date.yesterday
        date.in_time_zone
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | EnforcedStyle
        | `flexible`
        | `strict`, `flexible`
        |===

        == Rails/DefaultScope

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Disabled
        | Yes
        | No
        | 2.7
        | -
        |===

        This cop looks for uses of `default_scope`.

        === Examples

        [source,ruby]
        ----
        # bad
        default_scope -> { where(hidden: false) }

        # good
        scope :published, -> { where(hidden: false) }

        # bad
        def self.default_scope
          where(hidden: false)
        end

        # good
        def self.published
          where(hidden: false)
        end
        ----

        === References

        * https://rails.rubystyle.guide#avoid-default-scope

        == Rails/Delegate

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.21
        | 0.50
        |===

        This cop looks for delegations that could have been created
        automatically with the `delegate` method.

        Safe navigation `&.` is ignored because Rails' `allow_nil`
        option checks not just for nil but also delegates if nil
        responds to the delegated method.

        The `EnforceForPrefixed` option (defaulted to `true`) means that
        using the target object as a prefix of the method name
        without using the `delegate` method will be a violation.
        When set to `false`, this case is legal.

        === Examples

        [source,ruby]
        ----
        # bad
        def bar
          foo.bar
        end

        # good
        delegate :bar, to: :foo

        # good
        def bar
          foo&.bar
        end

        # good
        private
        def bar
          foo.bar
        end
        ----

        ==== EnforceForPrefixed: true (default)

        [source,ruby]
        ----
        # bad
        def foo_bar
          foo.bar
        end

        # good
        delegate :bar, to: :foo, prefix: true
        ----

        ==== EnforceForPrefixed: false

        [source,ruby]
        ----
        # good
        def foo_bar
          foo.bar
        end

        # good
        delegate :bar, to: :foo, prefix: true
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | EnforceForPrefixed
        | `true`
        | Boolean
        |===

        == Rails/DelegateAllowBlank

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.44
        | -
        |===

        This cop looks for delegations that pass :allow_blank as an option
        instead of :allow_nil. :allow_blank is not a valid option to pass
        to ActiveSupport#delegate.

        === Examples

        [source,ruby]
        ----
        # bad
        delegate :foo, to: :bar, allow_blank: true

        # good
        delegate :foo, to: :bar, allow_nil: true
        ----

        == Rails/DynamicFindBy

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | No
        | Yes (Unsafe)
        | 0.44
        | 2.10
        |===

        This cop checks dynamic `find_by_*` methods.
        Use `find_by` instead of dynamic method.
        See. https://rails.rubystyle.guide#find_by

        === Examples

        [source,ruby]
        ----
        # bad
        User.find_by_name(name)
        User.find_by_name_and_email(name)
        User.find_by_email!(name)

        # good
        User.find_by(name: name)
        User.find_by(name: name, email: email)
        User.find_by!(email: email)
        ----

        ==== AllowedMethods: find_by_sql

        [source,ruby]
        ----
        # bad
        User.find_by_query(users_query)

        # good
        User.find_by_sql(users_sql)
        ----

        ==== AllowedReceivers: Gem::Specification

        [source,ruby]
        ----
        # bad
        Specification.find_by_name('backend').gem_dir

        # good
        Gem::Specification.find_by_name('backend').gem_dir
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Whitelist
        | `find_by_sql`
        | Array

        | AllowedMethods
        | `find_by_sql`
        | Array

        | AllowedReceivers
        | `Gem::Specification`
        | Array
        |===

        === References

        * https://rails.rubystyle.guide#find_by

        == Rails/EnumHash

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 2.3
        | -
        |===

        This cop looks for enums written with array syntax.

        When using array syntax, adding an element in a
        position other than the last causes all previous
        definitions to shift. Explicitly specifying the
        value for each key prevents this from happening.

        === Examples

        [source,ruby]
        ----
        # bad
        enum status: [:active, :archived]

        # good
        enum status: { active: 0, archived: 1 }
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `app/models/**/*.rb`
        | Array
        |===

        === References

        * https://rails.rubystyle.guide#enums

        == Rails/EnumUniqueness

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | No
        | 0.46
        | -
        |===

        This cop looks for duplicate values in enum declarations.

        === Examples

        [source,ruby]
        ----
        # bad
        enum status: { active: 0, archived: 0 }

        # good
        enum status: { active: 0, archived: 1 }

        # bad
        enum status: [:active, :archived, :active]

        # good
        enum status: [:active, :archived]
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `app/models/**/*.rb`
        | Array
        |===

        == Rails/EnvironmentComparison

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.52
        | -
        |===

        This cop checks that Rails.env is compared using `.production?`-like
        methods instead of equality against a string or symbol.

        === Examples

        [source,ruby]
        ----
        # bad
        Rails.env == 'production'

        # bad, always returns false
        Rails.env == :test

        # good
        Rails.env.production?
        ----

        == Rails/EnvironmentVariableAccess

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | No
        | 2.10
        | -
        |===

        This cop looks for direct access to environment variables through the
        `ENV` variable within the application code. This can lead to runtime
        errors due to misconfiguration that could have been discovered at boot
        time if the environment variables were loaded as part of initialization
        and copied into the application's configuration or secrets. The cop can
        be configured to allow either reads or writes if required.

        === Examples

        [source,ruby]
        ----
        # good
        Rails.application.config.foo
        Rails.application.config.x.foo.bar
        Rails.application.secrets.foo
        Rails.application.config.foo = "bar"
        ----

        ==== AllowReads: false (default)

        [source,ruby]
        ----
        # bad
        ENV["FOO"]
        ENV.fetch("FOO")
        ----

        ==== AllowReads: true

        [source,ruby]
        ----
        # good
        ENV["FOO"]
        ENV.fetch("FOO")
        ----

        ==== AllowWrites: false (default)

        [source,ruby]
        ----
        # bad
        ENV["FOO"] = "bar"
        ----

        ==== AllowWrites: true

        [source,ruby]
        ----
        # good
        ENV["FOO"] = "bar"
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `app/**/*.rb`, `lib/**/*.rb`
        | Array

        | Exclude
        | `lib/**/*.rake`
        | Array

        | AllowReads
        | `false`
        | Boolean

        | AllowWrites
        | `false`
        | Boolean
        |===

        == Rails/Exit

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | No
        | 0.41
        | -
        |===

        This cop enforces that `exit` calls are not used within a rails app.
        Valid options are instead to raise an error, break, return, or some
        other form of stopping execution of current request.

        There are two obvious cases where `exit` is particularly harmful:

        * Usage in library code for your application. Even though Rails will
        rescue from a `SystemExit` and continue on, unit testing that library
        code will result in specs exiting (potentially silently if `exit(0)`
        is used.)
        * Usage in application code outside of the web process could result in
        the program exiting, which could result in the code failing to run and
        do its job.

        === Examples

        [source,ruby]
        ----
        # bad
        exit(0)

        # good
        raise 'a bad error has happened'
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `app/**/*.rb`, `config/**/*.rb`, `lib/**/*.rb`
        | Array

        | Exclude
        | `lib/**/*.rake`
        | Array
        |===

        == Rails/FilePath

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | No
        | 0.47
        | 2.4
        |===

        This cop is used to identify usages of file path joining process
        to use `Rails.root.join` clause. It is used to add uniformity when
        joining paths.

        === Examples

        ==== EnforcedStyle: arguments

        [source,ruby]
        ----
        # bad
        Rails.root.join('app/models/goober')
        File.join(Rails.root, 'app/models/goober')
        "#{Rails.root}/app/models/goober"

        # good
        Rails.root.join('app', 'models', 'goober')
        ----

        ==== EnforcedStyle: slashes (default)

        [source,ruby]
        ----
        # bad
        Rails.root.join('app', 'models', 'goober')
        File.join(Rails.root, 'app/models/goober')
        "#{Rails.root}/app/models/goober"

        # good
        Rails.root.join('app/models/goober')
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | EnforcedStyle
        | `slashes`
        | `slashes`, `arguments`
        |===

        == Rails/FindBy

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.30
        | -
        |===

        This cop is used to identify usages of `where.first` and
        change them to use `find_by` instead.

        === Examples

        [source,ruby]
        ----
        # bad
        User.where(name: 'Bruce').first
        User.where(name: 'Bruce').take

        # good
        User.find_by(name: 'Bruce')
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `app/models/**/*.rb`
        | Array
        |===

        === References

        * https://rails.rubystyle.guide#find_by

        == Rails/FindById

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | Yes
        | 2.7
        | -
        |===

        This cop enforces that `ActiveRecord#find` is used instead of
        `where.take!`, `find_by!`, and `find_by_id!` to retrieve a single record
        by primary key when you expect it to be found.

        === Examples

        [source,ruby]
        ----
        # bad
        User.where(id: id).take!
        User.find_by_id!(id)
        User.find_by!(id: id)

        # good
        User.find(id)
        ----

        === References

        * https://rails.rubystyle.guide/#find

        == Rails/FindEach

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.30
        | 2.9
        |===

        This cop is used to identify usages of `all.each` and
        change them to use `all.find_each` instead.

        === Examples

        [source,ruby]
        ----
        # bad
        User.all.each

        # good
        User.all.find_each
        ----

        ==== IgnoredMethods: ['order']

        [source,ruby]
        ----
        # good
        User.order(:foo).each
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `app/models/**/*.rb`
        | Array

        | IgnoredMethods
        | `order`, `limit`, `select`, `lock`
        | Array
        |===

        === References

        * https://rails.rubystyle.guide#find-each

        == Rails/HasAndBelongsToMany

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | No
        | 0.12
        | -
        |===

        This cop checks for the use of the has_and_belongs_to_many macro.

        === Examples

        [source,ruby]
        ----
        # bad
        # has_and_belongs_to_many :ingredients

        # good
        # has_many :ingredients, through: :recipe_ingredients
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `app/models/**/*.rb`
        | Array
        |===

        === References

        * https://rails.rubystyle.guide#has-many-through

        == Rails/HasManyOrHasOneDependent

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | No
        | 0.50
        | -
        |===

        This cop looks for `has_many` or `has_one` associations that don't
        specify a `:dependent` option.

        It doesn't register an offense if `:through` or `dependent: nil`
        is specified, or if the model is read-only.

        === Examples

        [source,ruby]
        ----
        # bad
        class User < ActiveRecord::Base
          has_many :comments
          has_one :avatar
        end

        # good
        class User < ActiveRecord::Base
          has_many :comments, dependent: :restrict_with_exception
          has_one :avatar, dependent: :destroy
          has_many :articles, dependent: nil
          has_many :patients, through: :appointments
        end

        class User < ActiveRecord::Base
          has_many :comments
          has_one :avatar

          def readonly?
            true
          end
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `app/models/**/*.rb`
        | Array
        |===

        === References

        * https://rails.rubystyle.guide#has_many-has_one-dependent-option

        == Rails/HelperInstanceVariable

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | No
        | 2.0
        | -
        |===

        This cop checks for use of the helper methods which reference
        instance variables.

        Relying on instance variables makes it difficult to re-use helper
        methods.

        If it seems awkward to explicitly pass in each dependent
        variable, consider moving the behaviour elsewhere, for
        example to a model, decorator or presenter.

        Provided that a class inherits `ActionView::Helpers::FormBuilder`,
        an offense will not be registered.

        === Examples

        [source,ruby]
        ----
        # bad
        def welcome_message
          "Hello #{@user.name}"
        end

        # good
        def welcome_message(user)
          "Hello #{user.name}"
        end

        # good
        class MyFormBuilder < ActionView::Helpers::FormBuilder
          @template.do_something
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `app/helpers/**/*.rb`
        | Array
        |===

        == Rails/HttpPositionalArguments

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.44
        | -
        |===

        This cop is used to identify usages of http methods like `get`, `post`,
        `put`, `patch` without the usage of keyword arguments in your tests and
        change them to use keyword args. This cop only applies to Rails >= 5.
        If you are running Rails < 5 you should disable the
        Rails/HttpPositionalArguments cop or set your TargetRailsVersion in your
        .rubocop.yml file to 4.2.

        === Examples

        [source,ruby]
        ----
        # bad
        get :new, { user_id: 1}

        # good
        get :new, params: { user_id: 1 }
        get :new, **options
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `spec/**/*`, `test/**/*`
        | Array
        |===

        == Rails/HttpStatus

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.54
        | -
        |===

        Enforces use of symbolic or numeric value to define HTTP status.

        === Examples

        ==== EnforcedStyle: symbolic (default)

        [source,ruby]
        ----
        # bad
        render :foo, status: 200
        render json: { foo: 'bar' }, status: 200
        render plain: 'foo/bar', status: 304
        redirect_to root_url, status: 301

        # good
        render :foo, status: :ok
        render json: { foo: 'bar' }, status: :ok
        render plain: 'foo/bar', status: :not_modified
        redirect_to root_url, status: :moved_permanently
        ----

        ==== EnforcedStyle: numeric

        [source,ruby]
        ----
        # bad
        render :foo, status: :ok
        render json: { foo: 'bar' }, status: :not_found
        render plain: 'foo/bar', status: :not_modified
        redirect_to root_url, status: :moved_permanently

        # good
        render :foo, status: 200
        render json: { foo: 'bar' }, status: 404
        render plain: 'foo/bar', status: 304
        redirect_to root_url, status: 301
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | EnforcedStyle
        | `symbolic`
        | `numeric`, `symbolic`
        |===

        == Rails/IgnoredSkipActionFilterOption

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | No
        | 0.63
        | -
        |===

        This cop checks that `if` and `only` (or `except`) are not used together
        as options of `skip_*` action filter.

        The `if` option will be ignored when `if` and `only` are used together.
        Similarly, the `except` option will be ignored when `if` and `except`
        are used together.

        === Examples

        [source,ruby]
        ----
        # bad
        class MyPageController < ApplicationController
          skip_before_action :login_required,
            only: :show, if: :trusted_origin?
        end

        # good
        class MyPageController < ApplicationController
          skip_before_action :login_required,
            if: -> { trusted_origin? && action_name == "show" }
        end
        ----

        [source,ruby]
        ----
        # bad
        class MyPageController < ApplicationController
          skip_before_action :login_required,
            except: :admin, if: :trusted_origin?
        end

        # good
        class MyPageController < ApplicationController
          skip_before_action :login_required,
            if: -> { trusted_origin? && action_name != "admin" }
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `app/controllers/**/*.rb`
        | Array
        |===

        === References

        * https://api.rubyonrails.org/classes/AbstractController/Callbacks/ClassMethods.html#method-i-_normalize_callback_options

        == Rails/IndexBy

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 2.5
        | 2.8
        |===

        This cop looks for uses of `each_with_object({}) { ... }`,
        `map { ... }.to_h`, and `Hash[map { ... }]` that are transforming
        an enumerable into a hash where the values are the original elements.
        Rails provides the `index_by` method for this purpose.

        === Examples

        [source,ruby]
        ----
        # bad
        [1, 2, 3].each_with_object({}) { |el, h| h[foo(el)] = el }
        [1, 2, 3].to_h { |el| [foo(el), el] }
        [1, 2, 3].map { |el| [foo(el), el] }.to_h
        Hash[[1, 2, 3].collect { |el| [foo(el), el] }]

        # good
        [1, 2, 3].index_by { |el| foo(el) }
        ----

        == Rails/IndexWith

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 2.5
        | 2.8
        |===

        This cop looks for uses of `each_with_object({}) { ... }`,
        `map { ... }.to_h`, and `Hash[map { ... }]` that are transforming
        an enumerable into a hash where the keys are the original elements.
        Rails provides the `index_with` method for this purpose.

        === Examples

        [source,ruby]
        ----
        # bad
        [1, 2, 3].each_with_object({}) { |el, h| h[el] = foo(el) }
        [1, 2, 3].to_h { |el| [el, foo(el)] }
        [1, 2, 3].map { |el| [el, foo(el)] }.to_h
        Hash[[1, 2, 3].collect { |el| [el, foo(el)] }]

        # good
        [1, 2, 3].index_with { |el| foo(el) }
        ----

        == Rails/Inquiry

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | No
        | 2.7
        | -
        |===

        This cop checks that Active Support's `inquiry` method is not used.

        === Examples

        [source,ruby]
        ----
        # bad - String#inquiry
        ruby = 'two'.inquiry
        ruby.two?

        # good
        ruby = 'two'
        ruby == 'two'

        # bad - Array#inquiry
        pets = %w(cat dog).inquiry
        pets.gopher?

        # good
        pets = %w(cat dog)
        pets.include? 'cat'
        ----

        === References

        * https://rails.rubystyle.guide/#inquiry

        == Rails/InverseOf

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | No
        | 0.52
        | -
        |===

        This cop looks for has_(one|many) and belongs_to associations where
        Active Record can't automatically determine the inverse association
        because of a scope or the options used. Using the blog with order scope
        example below, traversing the a Blog's association in both directions
        with `blog.posts.first.blog` would cause the `blog` to be loaded from
        the database twice.

        `:inverse_of` must be manually specified for Active Record to use the
        associated object in memory, or set to `false` to opt-out. Note that
        setting `nil` does not stop Active Record from trying to determine the
        inverse automatically, and is not considered a valid value for this.

        === Examples

        [source,ruby]
        ----
        # good
        class Blog < ApplicationRecord
          has_many :posts
        end

        class Post < ApplicationRecord
          belongs_to :blog
        end
        ----

        [source,ruby]
        ----
        # bad
        class Blog < ApplicationRecord
          has_many :posts, -> { order(published_at: :desc) }
        end

        class Post < ApplicationRecord
          belongs_to :blog
        end

        # good
        class Blog < ApplicationRecord
          has_many(:posts,
                   -> { order(published_at: :desc) },
                   inverse_of: :blog)
        end

        class Post < ApplicationRecord
          belongs_to :blog
        end

        # good
        class Blog < ApplicationRecord
          with_options inverse_of: :blog do
            has_many :posts, -> { order(published_at: :desc) }
          end
        end

        class Post < ApplicationRecord
          belongs_to :blog
        end

        # good
        # When you don't want to use the inverse association.
        class Blog < ApplicationRecord
          has_many(:posts,
                   -> { order(published_at: :desc) },
                   inverse_of: false)
        end
        ----

        [source,ruby]
        ----
        # bad
        class Picture < ApplicationRecord
          belongs_to :imageable, polymorphic: true
        end

        class Employee < ApplicationRecord
          has_many :pictures, as: :imageable
        end

        class Product < ApplicationRecord
          has_many :pictures, as: :imageable
        end

        # good
        class Picture < ApplicationRecord
          belongs_to :imageable, polymorphic: true
        end

        class Employee < ApplicationRecord
          has_many :pictures, as: :imageable, inverse_of: :imageable
        end

        class Product < ApplicationRecord
          has_many :pictures, as: :imageable, inverse_of: :imageable
        end
        ----

        [source,ruby]
        ----
        # bad
        # However, RuboCop can not detect this pattern...
        class Physician < ApplicationRecord
          has_many :appointments
          has_many :patients, through: :appointments
        end

        class Appointment < ApplicationRecord
          belongs_to :physician
          belongs_to :patient
        end

        class Patient < ApplicationRecord
          has_many :appointments
          has_many :physicians, through: :appointments
        end

        # good
        class Physician < ApplicationRecord
          has_many :appointments
          has_many :patients, through: :appointments
        end

        class Appointment < ApplicationRecord
          belongs_to :physician, inverse_of: :appointments
          belongs_to :patient, inverse_of: :appointments
        end

        class Patient < ApplicationRecord
          has_many :appointments
          has_many :physicians, through: :appointments
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `app/models/**/*.rb`
        | Array
        |===

        == Rails/LexicallyScopedActionFilter

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | No
        | No
        | 0.52
        | -
        |===

        This cop checks that methods specified in the filter's `only` or
        `except` options are defined within the same class or module.

        You can technically specify methods of superclass or methods added by
        mixins on the filter, but these can confuse developers. If you specify
        methods that are defined in other classes or modules, you should
        define the filter in that class or module.

        If you rely on behaviour defined in the superclass actions, you must
        remember to invoke `super` in the subclass actions.

        === Examples

        [source,ruby]
        ----
        # bad
        class LoginController < ApplicationController
          before_action :require_login, only: %i[index settings logout]

          def index
          end
        end

        # good
        class LoginController < ApplicationController
          before_action :require_login, only: %i[index settings logout]

          def index
          end

          def settings
          end

          def logout
          end
        end
        ----

        [source,ruby]
        ----
        # bad
        module FooMixin
          extend ActiveSupport::Concern

          included do
            before_action proc { authenticate }, only: :foo
          end
        end

        # good
        module FooMixin
          extend ActiveSupport::Concern

          included do
            before_action proc { authenticate }, only: :foo
          end

          def foo
            # something
          end
        end
        ----

        [source,ruby]
        ----
        class ContentController < ApplicationController
          def update
            @content.update(content_attributes)
          end
        end

        class ArticlesController < ContentController
          before_action :load_article, only: [:update]

          # the cop requires this method, but it relies on behaviour defined
          # in the superclass, so needs to invoke `super`
          def update
            super
          end

          private

          def load_article
            @content = Article.find(params[:article_id])
          end
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `app/controllers/**/*.rb`
        | Array
        |===

        === References

        * https://rails.rubystyle.guide#lexically-scoped-action-filter

        == Rails/LinkToBlank

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.62
        | -
        |===

        This cop checks for calls to `link_to` that contain a
        `target: '_blank'` but no `rel: 'noopener'`. This can be a security
        risk as the loaded page will have control over the previous page
        and could change its location for phishing purposes.

        The option `rel: 'noreferrer'` also blocks this behavior
        and removes the http-referrer header.

        === Examples

        [source,ruby]
        ----
        # bad
        link_to 'Click here', url, target: '_blank'

        # good
        link_to 'Click here', url, target: '_blank', rel: 'noopener'

        # good
        link_to 'Click here', url, target: '_blank', rel: 'noreferrer'
        ----

        === References

        * https://mathiasbynens.github.io/rel-noopener/
        * https://html.spec.whatwg.org/multipage/links.html#link-type-noopener
        * https://html.spec.whatwg.org/multipage/links.html#link-type-noreferrer

        == Rails/MailerName

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | Yes (Unsafe)
        | 2.7
        | -
        |===

        This cop enforces that mailer names end with `Mailer` suffix.

        Without the `Mailer` suffix it isn't immediately apparent what's a mailer
        and which views are related to the mailer.

        === Examples

        [source,ruby]
        ----
        # bad
        class User < ActionMailer::Base
        end

        class User < ApplicationMailer
        end

        # good
        class UserMailer < ActionMailer::Base
        end

        class UserMailer < ApplicationMailer
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `app/mailers/**/*.rb`
        | Array
        |===

        === References

        * https://rails.rubystyle.guide/#mailer-name

        == Rails/MatchRoute

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | Yes
        | 2.7
        | -
        |===

        This cop identifies places where defining routes with `match`
        can be replaced with a specific HTTP method.

        Don't use `match` to define any routes unless there is a need to map multiple request types
        among [:get, :post, :patch, :put, :delete] to a single action using the `:via` option.

        === Examples

        [source,ruby]
        ----
        # bad
        match ':controller/:action/:id'
        match 'photos/:id', to: 'photos#show', via: :get

        # good
        get ':controller/:action/:id'
        get 'photos/:id', to: 'photos#show'
        match 'photos/:id', to: 'photos#show', via: [:get, :post]
        match 'photos/:id', to: 'photos#show', via: :all
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `config/routes.rb`, `config/routes/**/*.rb`
        | Array
        |===

        === References

        * https://rails.rubystyle.guide/#no-match-routes

        == Rails/NegateInclude

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | No
        | Yes (Unsafe)
        | 2.7
        | 2.9
        |===

        This cop enforces the use of `collection.exclude?(obj)`
        over `!collection.include?(obj)`.

        It is marked as unsafe by default because false positive will occur for
        a receiver object that do not have `exclude?` method. (e.g. `IPAddr`)

        === Examples

        [source,ruby]
        ----
        # bad
        !array.include?(2)
        !hash.include?(:key)

        # good
        array.exclude?(2)
        hash.exclude?(:key)
        ----

        === References

        * https://rails.rubystyle.guide#exclude

        == Rails/NotNullColumn

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | No
        | 0.43
        | -
        |===

        This cop checks for add_column call with NOT NULL constraint
        in migration file.

        === Examples

        [source,ruby]
        ----
        # bad
        add_column :users, :name, :string, null: false
        add_reference :products, :category, null: false

        # good
        add_column :users, :name, :string, null: true
        add_column :users, :name, :string, null: false, default: ''
        add_reference :products, :category
        add_reference :products, :category, null: false, default: 1
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `db/migrate/*.rb`
        | Array
        |===

        == Rails/OrderById

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Disabled
        | Yes
        | No
        | 2.8
        | -
        |===

        This cop checks for places where ordering by `id` column is used.

        Don't use the `id` column for ordering. The sequence of ids is not guaranteed
        to be in any particular order, despite often (incidentally) being chronological.
        Use a timestamp column to order chronologically. As a bonus the intent is clearer.

        NOTE: Make sure the changed order column does not introduce performance
        bottlenecks and appropriate database indexes are added.

        === Examples

        [source,ruby]
        ----
        # bad
        scope :chronological, -> { order(id: :asc) }
        scope :chronological, -> { order(primary_key => :asc) }

        # good
        scope :chronological, -> { order(created_at: :asc) }
        ----

        === References

        * https://rails.rubystyle.guide/#order-by-id

        == Rails/Output

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | No
        | 0.15
        | 0.19
        |===

        This cop checks for the use of output calls like puts and print

        === Examples

        [source,ruby]
        ----
        # bad
        puts 'A debug message'
        pp 'A debug message'
        print 'A debug message'

        # good
        Rails.logger.debug 'A debug message'
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `app/**/*.rb`, `config/**/*.rb`, `db/**/*.rb`, `lib/**/*.rb`
        | Array
        |===

        == Rails/OutputSafety

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | No
        | 0.41
        | -
        |===

        This cop checks for the use of output safety calls like `html_safe`,
        `raw`, and `safe_concat`. These methods do not escape content. They
        simply return a SafeBuffer containing the content as is. Instead,
        use `safe_join` to join content and escape it and concat to
        concatenate content and escape it, ensuring its safety.

        === Examples

        [source,ruby]
        ----
        user_content = "<b>hi</b>"

        # bad
        "<p>#{user_content}</p>".html_safe
        # => ActiveSupport::SafeBuffer "<p><b>hi</b></p>"

        # good
        content_tag(:p, user_content)
        # => ActiveSupport::SafeBuffer "<p>&lt;b&gt;hi&lt;/b&gt;</p>"

        # bad
        out = ""
        out << "<li>#{user_content}</li>"
        out << "<li>#{user_content}</li>"
        out.html_safe
        # => ActiveSupport::SafeBuffer "<li><b>hi</b></li><li><b>hi</b></li>"

        # good
        out = []
        out << content_tag(:li, user_content)
        out << content_tag(:li, user_content)
        safe_join(out)
        # => ActiveSupport::SafeBuffer
        #    "<li>&lt;b&gt;hi&lt;/b&gt;</li><li>&lt;b&gt;hi&lt;/b&gt;</li>"

        # bad
        out = "<h1>trusted content</h1>".html_safe
        out.safe_concat(user_content)
        # => ActiveSupport::SafeBuffer "<h1>trusted_content</h1><b>hi</b>"

        # good
        out = "<h1>trusted content</h1>".html_safe
        out.concat(user_content)
        # => ActiveSupport::SafeBuffer
        #    "<h1>trusted_content</h1>&lt;b&gt;hi&lt;/b&gt;"

        # safe, though maybe not good style
        out = "trusted content"
        result = out.concat(user_content)
        # => String "trusted content<b>hi</b>"
        # because when rendered in ERB the String will be escaped:
        # <%= result %>
        # => trusted content&lt;b&gt;hi&lt;/b&gt;

        # bad
        (user_content + " " + content_tag(:span, user_content)).html_safe
        # => ActiveSupport::SafeBuffer "<b>hi</b> <span><b>hi</b></span>"

        # good
        safe_join([user_content, " ", content_tag(:span, user_content)])
        # => ActiveSupport::SafeBuffer
        #    "&lt;b&gt;hi&lt;/b&gt; <span>&lt;b&gt;hi&lt;/b&gt;</span>"
        ----

        == Rails/Pick

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | No
        | Yes (Unsafe)
        | 2.6
        | -
        |===

        This cop enforces the use of `pick` over `pluck(...).first`.

        Using `pluck` followed by `first` creates an intermediate array, which
        `pick` avoids. When called on an Active Record relation, `pick` adds a
        limit to the query so that only one value is fetched from the database.

        === Examples

        [source,ruby]
        ----
        # bad
        Model.pluck(:a).first
        [{ a: :b, c: :d }].pluck(:a, :b).first

        # good
        Model.pick(:a)
        [{ a: :b, c: :d }].pick(:a, :b)
        ----

        === References

        * https://rails.rubystyle.guide#pick

        == Rails/Pluck

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | Yes
        | 2.7
        | -
        |===

        This cop enforces the use of `pluck` over `map`.

        `pluck` can be used instead of `map` to extract a single key from each
        element in an enumerable. When called on an Active Record relation, it
        results in a more efficient query that only selects the necessary key.

        === Examples

        [source,ruby]
        ----
        # bad
        Post.published.map { |post| post[:title] }
        [{ a: :b, c: :d }].collect { |el| el[:a] }

        # good
        Post.published.pluck(:title)
        [{ a: :b, c: :d }].pluck(:a)
        ----

        === References

        * https://rails.rubystyle.guide#pluck

        == Rails/PluckId

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Disabled
        | No
        | Yes (Unsafe)
        | 2.7
        | -
        |===

        This cop enforces the use of `ids` over `pluck(:id)` and `pluck(primary_key)`.

        === Examples

        [source,ruby]
        ----
        # bad
        User.pluck(:id)
        user.posts.pluck(:id)

        def self.user_ids
          pluck(primary_key)
        end

        # good
        User.ids
        user.posts.ids

        def self.user_ids
          ids
        end
        ----

        === References

        * https://rails.rubystyle.guide/#ids

        == Rails/PluckInWhere

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | No
        | Yes (Unsafe)
        | 2.7
        | 2.8
        |===

        This cop identifies places where `pluck` is used in `where` query methods
        and can be replaced with `select`.

        Since `pluck` is an eager method and hits the database immediately,
        using `select` helps to avoid additional database queries.

        This cop has two different enforcement modes. When the EnforcedStyle
        is conservative (the default) then only calls to `pluck` on a constant
        (i.e. a model class) in the `where` is used as offenses.

        When the EnforcedStyle is aggressive then all calls to `pluck` in the
        `where` is used as offenses. This may lead to false positives
        as the cop cannot replace to `select` between calls to `pluck` on an
        `ActiveRecord::Relation` instance vs a call to `pluck` on an `Array` instance.

        === Examples

        [source,ruby]
        ----
        # bad
        Post.where(user_id: User.active.pluck(:id))

        # good
        Post.where(user_id: User.active.select(:id))
        Post.where(user_id: active_users.select(:id))
        ----

        ==== EnforcedStyle: conservative (default)

        [source,ruby]
        ----
        # good
        Post.where(user_id: active_users.pluck(:id))
        ----

        ==== EnforcedStyle: aggressive

        [source,ruby]
        ----
        # bad
        Post.where(user_id: active_users.pluck(:id))
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | EnforcedStyle
        | `conservative`
        | `conservative`, `aggressive`
        |===

        == Rails/PluralizationGrammar

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.35
        | -
        |===

        This cop checks for correct grammar when using ActiveSupport's
        core extensions to the numeric classes.

        === Examples

        [source,ruby]
        ----
        # bad
        3.day.ago
        1.months.ago

        # good
        3.days.ago
        1.month.ago
        ----

        == Rails/Presence

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.52
        | -
        |===

        This cop checks code that can be written more easily using
        `Object#presence` defined by Active Support.

        === Examples

        [source,ruby]
        ----
        # bad
        a.present? ? a : nil

        # bad
        !a.present? ? nil : a

        # bad
        a.blank? ? nil : a

        # bad
        !a.blank? ? a : nil

        # good
        a.presence
        ----

        [source,ruby]
        ----
        # bad
        a.present? ? a : b

        # bad
        !a.present? ? b : a

        # bad
        a.blank? ? b : a

        # bad
        !a.blank? ? a : b

        # good
        a.presence || b
        ----

        == Rails/Present

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.48
        | 0.67
        |===

        This cop checks for code that can be written with simpler conditionals
        using `Object#present?` defined by Active Support.

        Interaction with `Style/UnlessElse`:
        The configuration of `NotBlank` will not produce an offense in the
        context of `unless else` if `Style/UnlessElse` is inabled. This is
        to prevent interference between the auto-correction of the two cops.

        === Examples

        ==== NotNilAndNotEmpty: true (default)

        [source,ruby]
        ----
        # Converts usages of `!nil? && !empty?` to `present?`

        # bad
        !foo.nil? && !foo.empty?

        # bad
        foo != nil && !foo.empty?

        # good
        foo.present?
        ----

        ==== NotBlank: true (default)

        [source,ruby]
        ----
        # Converts usages of `!blank?` to `present?`

        # bad
        !foo.blank?

        # bad
        not foo.blank?

        # good
        foo.present?
        ----

        ==== UnlessBlank: true (default)

        [source,ruby]
        ----
        # Converts usages of `unless blank?` to `if present?`

        # bad
        something unless foo.blank?

        # good
        something if foo.present?
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | NotNilAndNotEmpty
        | `true`
        | Boolean

        | NotBlank
        | `true`
        | Boolean

        | UnlessBlank
        | `true`
        | Boolean
        |===

        == Rails/RakeEnvironment

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | No
        | Yes (Unsafe)
        | 2.4
        | 2.6
        |===

        This cop checks for Rake tasks without the `:environment` task
        dependency. The `:environment` task loads application code for other
        Rake tasks. Without it, tasks cannot make use of application code like
        models.

        You can ignore the offense if the task satisfies at least one of the
        following conditions:

        * The task does not need application code.
        * The task invokes the `:environment` task.

        === Examples

        [source,ruby]
        ----
        # bad
        task :foo do
          do_something
        end

        # good
        task foo: :environment do
          do_something
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `+**/Rakefile+`, `+**/*.rake+`
        | Array

        | Exclude
        | `lib/capistrano/tasks/**/*.rake`
        | Array
        |===

        == Rails/ReadWriteAttribute

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.20
        | 0.29
        |===

        This cop checks for the use of the `read_attribute` or `write_attribute`
        methods and recommends square brackets instead.

        If an attribute is missing from the instance (for example, when
        initialized by a partial `select`) then `read_attribute`
        will return nil, but square brackets will raise
        an `ActiveModel::MissingAttributeError`.

        Explicitly raising an error in this situation is preferable, and that
        is why rubocop recommends using square brackets.

        === Examples

        [source,ruby]
        ----
        # bad
        x = read_attribute(:attr)
        write_attribute(:attr, val)

        # good
        x = self[:attr]
        self[:attr] = val
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `app/models/**/*.rb`
        | Array
        |===

        === References

        * https://rails.rubystyle.guide#read-attribute

        == Rails/RedundantAllowNil

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.67
        | -
        |===

        Checks Rails model validations for a redundant `allow_nil` when
        `allow_blank` is present.

        === Examples

        [source,ruby]
        ----
        # bad
        validates :x, length: { is: 5 }, allow_nil: true, allow_blank: true

        # bad
        validates :x, length: { is: 5 }, allow_nil: false, allow_blank: true

        # bad
        validates :x, length: { is: 5 }, allow_nil: false, allow_blank: false

        # good
        validates :x, length: { is: 5 }, allow_blank: true

        # good
        validates :x, length: { is: 5 }, allow_blank: false

        # good
        # Here, `nil` is valid but `''` is not
        validates :x, length: { is: 5 }, allow_nil: true, allow_blank: false
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `app/models/**/*.rb`
        | Array
        |===

        == Rails/RedundantForeignKey

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 2.6
        | -
        |===

        This cop detects cases where the `:foreign_key` option on associations
        is redundant.

        === Examples

        [source,ruby]
        ----
        # bad
        class Post
          has_many :comments, foreign_key: 'post_id'
        end

        class Comment
          belongs_to :post, foreign_key: 'post_id'
        end

        # good
        class Post
          has_many :comments
        end

        class Comment
          belongs_to :author, foreign_key: 'user_id'
        end
        ----

        == Rails/RedundantReceiverInWithOptions

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.52
        | -
        |===

        This cop checks for redundant receiver in `with_options`.
        Receiver is implicit from Rails 4.2 or higher.

        === Examples

        [source,ruby]
        ----
        # bad
        class Account < ApplicationRecord
          with_options dependent: :destroy do |assoc|
            assoc.has_many :customers
            assoc.has_many :products
            assoc.has_many :invoices
            assoc.has_many :expenses
          end
        end

        # good
        class Account < ApplicationRecord
          with_options dependent: :destroy do
            has_many :customers
            has_many :products
            has_many :invoices
            has_many :expenses
          end
        end
        ----

        [source,ruby]
        ----
        # bad
        with_options options: false do |merger|
          merger.invoke(merger.something)
        end

        # good
        with_options options: false do
          invoke(something)
        end

        # good
        client = Client.new
        with_options options: false do |merger|
          client.invoke(merger.something, something)
        end

        # ok
        # When `with_options` includes a block, all scoping scenarios
        # cannot be evaluated. Thus, it is ok to include the explicit
        # receiver.
        with_options options: false do |merger|
          merger.invoke
          with_another_method do |another_receiver|
            merger.invoke(another_receiver)
          end
        end
        ----

        == Rails/ReflectionClassName

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | No
        | No
        | 0.64
        | 2.10
        |===

        This cop checks if the value of the option `class_name`, in
        the definition of a reflection is a string.
        It is marked as unsafe because it cannot be determined whether
        constant or method return value specified to `class_name` is a string.

        === Examples

        [source,ruby]
        ----
        # bad
        has_many :accounts, class_name: Account
        has_many :accounts, class_name: Account.name

        # good
        has_many :accounts, class_name: 'Account'
        ----

        == Rails/RefuteMethods

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.56
        | -
        |===

        Use `assert_not` methods instead of `refute` methods.

        === Examples

        ==== EnforcedStyle: assert_not (default)

        [source,ruby]
        ----
        # bad
        refute false
        refute_empty [1, 2, 3]
        refute_equal true, false

        # good
        assert_not false
        assert_not_empty [1, 2, 3]
        assert_not_equal true, false
        ----

        ==== EnforcedStyle: refute

        [source,ruby]
        ----
        # bad
        assert_not false
        assert_not_empty [1, 2, 3]
        assert_not_equal true, false

        # good
        refute false
        refute_empty [1, 2, 3]
        refute_equal true, false
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | EnforcedStyle
        | `assert_not`
        | `assert_not`, `refute`

        | Include
        | `+**/test/**/*+`
        | Array
        |===

        == Rails/RelativeDateConstant

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.48
        | 0.59
        |===

        This cop checks whether constant value isn't relative date.
        Because the relative date will be evaluated only once.

        === Examples

        [source,ruby]
        ----
        # bad
        class SomeClass
          EXPIRED_AT = 1.week.since
        end

        # good
        class SomeClass
          EXPIRES = 1.week

          def self.expired_at
            EXPIRES.since
          end
        end

        # good
        class SomeClass
          def self.expired_at
            1.week.since
          end
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | AutoCorrect
        | `false`
        | Boolean
        |===

        == Rails/RenderInline

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | No
        | 2.7
        | -
        |===

        This cop looks for inline rendering within controller actions.

        === Examples

        [source,ruby]
        ----
        # bad
        class ProductsController < ApplicationController
          def index
            render inline: "<% products.each do |p| %><p><%= p.name %></p><% end %>", type: :erb
          end
        end

        # good
        # app/views/products/index.html.erb
        # <% products.each do |p| %>
        #   <p><%= p.name %></p>
        # <% end %>

        class ProductsController < ApplicationController
          def index
          end
        end
        ----

        === References

        * https://rails.rubystyle.guide/#inline-rendering

        == Rails/RenderPlainText

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | Yes
        | 2.7
        | -
        |===

        This cop identifies places where `render text:` can be
        replaced with `render plain:`.

        === Examples

        [source,ruby]
        ----
        # bad - explicit MIME type to `text/plain`
        render text: 'Ruby!', content_type: 'text/plain'

        # good - short and precise
        render plain: 'Ruby!'

        # good - explicit MIME type not to `text/plain`
        render text: 'Ruby!', content_type: 'text/html'
        ----

        ==== ContentTypeCompatibility: true (default)

        [source,ruby]
        ----
        # good - sets MIME type to `text/html`
        render text: 'Ruby!'
        ----

        ==== ContentTypeCompatibility: false

        [source,ruby]
        ----
        # bad - sets MIME type to `text/html`
        render text: 'Ruby!'
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | ContentTypeCompatibility
        | `true`
        | Boolean
        |===

        === References

        * https://rails.rubystyle.guide/#plain-text-rendering

        == Rails/RequestReferer

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.41
        | -
        |===

        This cop checks for consistent uses of `request.referer` or
        `request.referrer`, depending on the cop's configuration.

        === Examples

        ==== EnforcedStyle: referer (default)

        [source,ruby]
        ----
        # bad
        request.referrer

        # good
        request.referer
        ----

        ==== EnforcedStyle: referrer

        [source,ruby]
        ----
        # bad
        request.referer

        # good
        request.referrer
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | EnforcedStyle
        | `referer`
        | `referer`, `referrer`
        |===

        == Rails/RequireDependency

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Disabled
        | Yes
        | No
        | 2.10
        | -
        |===

        This cop checks for the usage of `require_dependency`.

        `require_dependency` is an obsolete method for Rails applications running in Zeitwerk mode.
        In Zeitwerk mode, the semantics should match Ruby's and no need to be defensive with load order,
        just refer to classes and modules normally.
        If the constant name is dynamic, camelize if needed, and constantize.

        Applications running in Zeitwerk mode should not use `require_dependency`.

        NOTE: This cop is disabled by default. Please enable it if you are using Zeitwerk mode.

        === Examples

        [source,ruby]
        ----
        # bad
        require_dependency 'some_lib'
        ----

        === References

        * https://guides.rubyonrails.org/autoloading_and_reloading_constants.html

        == Rails/ReversibleMigration

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | No
        | 0.47
        | -
        |===

        This cop checks whether the change method of the migration file is
        reversible.

        === Examples

        [source,ruby]
        ----
        # bad
        def change
          change_table :users do |t|
            t.remove :name
          end
        end

        # good
        def change
          create_table :users do |t|
            t.string :name
          end
        end

        # good
        def change
          reversible do |dir|
            change_table :users do |t|
              dir.up do
                t.column :name, :string
              end

              dir.down do
                t.remove :name
              end
            end
          end
        end
        ----

        [source,ruby]
        ----
        # drop_table

        # bad
        def change
          drop_table :users
        end

        # good
        def change
          drop_table :users do |t|
            t.string :name
          end
        end
        ----

        [source,ruby]
        ----
        # change_column_default

        # bad
        def change
          change_column_default(:suppliers, :qualification, 'new')
        end

        # good
        def change
          change_column_default(:posts, :state, from: nil, to: "draft")
        end
        ----

        [source,ruby]
        ----
        # remove_column

        # bad
        def change
          remove_column(:suppliers, :qualification)
        end

        # good
        def change
          remove_column(:suppliers, :qualification, :string)
        end
        ----

        [source,ruby]
        ----
        # remove_foreign_key

        # bad
        def change
          remove_foreign_key :accounts, column: :owner_id
        end

        # good
        def change
          remove_foreign_key :accounts, :branches
        end

        # good
        def change
          remove_foreign_key :accounts, to_table: :branches
        end
        ----

        [source,ruby]
        ----
        # change_table

        # bad
        def change
          change_table :users do |t|
            t.remove :name
            t.change_default :authorized, 1
            t.change :price, :string
          end
        end

        # good
        def change
          change_table :users do |t|
            t.string :name
          end
        end

        # good
        def change
          reversible do |dir|
            change_table :users do |t|
              dir.up do
                t.change :price, :string
              end

              dir.down do
                t.change :price, :integer
              end
            end
          end
        end
        ----

        [source,ruby]
        ----
        # remove_columns

        # bad
        def change
          remove_columns :users, :name, :email
        end

        # good
        def change
          reversible do |dir|
            dir.up do
              remove_columns :users, :name, :email
            end

            dir.down do
              add_column :users, :name, :string
              add_column :users, :email, :string
            end
          end
        end

        # good (Rails >= 6.1, see https://github.com/rails/rails/pull/36589)
        def change
          remove_columns :users, :name, :email, type: :string
        end
        ----

        [source,ruby]
        ----
        # remove_index

        # bad
        def change
          remove_index :users, name: :index_users_on_email
        end

        # good
        def change
          remove_index :users, :email
        end

        # good
        def change
          remove_index :users, column: :email
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `db/migrate/*.rb`
        | Array
        |===

        === References

        * https://rails.rubystyle.guide#reversible-migration
        * https://api.rubyonrails.org/classes/ActiveRecord/Migration/CommandRecorder.html

        == Rails/ReversibleMigrationMethodDefinition

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Disabled
        | Yes
        | No
        | 2.10
        | -
        |===

        This cop checks whether the migration implements
        either a `change` method or both an `up` and a `down`
        method.

        === Examples

        [source,ruby]
        ----
        # bad
        class SomeMigration < ActiveRecord::Migration[6.0]
          def up
            # up migration
          end

          # <----- missing down method
        end

        class SomeMigration < ActiveRecord::Migration[6.0]
          # <----- missing up method

          def down
            # down migration
          end
        end

        # good
        class SomeMigration < ActiveRecord::Migration[6.0]
          def change
            # reversible migration
          end
        end

        # good
        class SomeMigration < ActiveRecord::Migration[6.0]
          def up
            # up migration
          end

          def down
            # down migration
          end
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `db/migrate/*.rb`
        | Array
        |===

        == Rails/SafeNavigation

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.43
        | -
        |===

        This cop converts usages of `try!` to `&.`. It can also be configured
        to convert `try`. It will convert code to use safe navigation.

        === Examples

        ==== ConvertTry: false (default)

        [source,ruby]
        ----
        # bad
        foo.try!(:bar)
        foo.try!(:bar, baz)
        foo.try!(:bar) { |e| e.baz }

        foo.try!(:[], 0)

        # good
        foo.try(:bar)
        foo.try(:bar, baz)
        foo.try(:bar) { |e| e.baz }

        foo&.bar
        foo&.bar(baz)
        foo&.bar { |e| e.baz }
        ----

        ==== ConvertTry: true

        [source,ruby]
        ----
        # bad
        foo.try!(:bar)
        foo.try!(:bar, baz)
        foo.try!(:bar) { |e| e.baz }
        foo.try(:bar)
        foo.try(:bar, baz)
        foo.try(:bar) { |e| e.baz }

        # good
        foo&.bar
        foo&.bar(baz)
        foo&.bar { |e| e.baz }
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | ConvertTry
        | `false`
        | Boolean
        |===

        == Rails/SafeNavigationWithBlank

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes (Unsafe)
        | 2.4
        | -
        |===

        This cop checks to make sure safe navigation isn't used with `blank?` in
        a conditional.

        While the safe navigation operator is generally a good idea, when
        checking `foo&.blank?` in a conditional, `foo` being `nil` will actually
        do the opposite of what the author intends.

        === Examples

        [source,ruby]
        ----
        # bad
        do_something if foo&.blank?
        do_something unless foo&.blank?

        # good
        do_something if foo.blank?
        do_something unless foo.blank?
        ----

        == Rails/SaveBang

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Disabled
        | Yes
        | Yes (Unsafe)
        | 0.42
        | 0.59
        |===

        This cop identifies possible cases where Active Record save! or related
        should be used instead of save because the model might have failed to
        save and an exception is better than unhandled failure.

        This will allow:

        * update or save calls, assigned to a variable,
          or used as a condition in an if/unless/case statement.
        * create calls, assigned to a variable that then has a
          call to `persisted?`, or whose return value is checked by
          `persisted?` immediately
        * calls if the result is explicitly returned from methods and blocks,
          or provided as arguments.
        * calls whose signature doesn't look like an ActiveRecord
          persistence method.

        By default it will also allow implicit returns from methods and blocks.
        that behavior can be turned off with `AllowImplicitReturn: false`.

        You can permit receivers that are giving false positives with
        `AllowedReceivers: []`

        === Examples

        [source,ruby]
        ----
        # bad
        user.save
        user.update(name: 'Joe')
        user.find_or_create_by(name: 'Joe')
        user.destroy

        # good
        unless user.save
          # ...
        end
        user.save!
        user.update!(name: 'Joe')
        user.find_or_create_by!(name: 'Joe')
        user.destroy!

        user = User.find_or_create_by(name: 'Joe')
        unless user.persisted?
          # ...
        end

        def save_user
          return user.save
        end
        ----

        ==== AllowImplicitReturn: true (default)

        [source,ruby]
        ----
        # good
        users.each { |u| u.save }

        def save_user
          user.save
        end
        ----

        ==== AllowImplicitReturn: false

        [source,ruby]
        ----
        # bad
        users.each { |u| u.save }
        def save_user
          user.save
        end

        # good
        users.each { |u| u.save! }

        def save_user
          user.save!
        end

        def save_user
          return user.save
        end
        ----

        ==== AllowedReceivers: ['merchant.customers', 'Service::Mailer']

        [source,ruby]
        ----
        # bad
        merchant.create
        customers.builder.save
        Mailer.create

        module Service::Mailer
          self.create
        end

        # good
        merchant.customers.create
        MerchantService.merchant.customers.destroy
        Service::Mailer.update(message: 'Message')
        ::Service::Mailer.update
        Services::Service::Mailer.update(message: 'Message')
        Service::Mailer::update
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | AllowImplicitReturn
        | `true`
        | Boolean

        | AllowedReceivers
        | `[]`
        | Array
        |===

        === References

        * https://rails.rubystyle.guide#save-bang

        == Rails/ScopeArgs

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | No
        | 0.19
        | -
        |===

        This cop checks for scope calls where it was passed
        a method (usually a scope) instead of a lambda/proc.

        === Examples

        [source,ruby]
        ----
        # bad
        scope :something, where(something: true)

        # good
        scope :something, -> { where(something: true) }
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `app/models/**/*.rb`
        | Array
        |===

        == Rails/ShortI18n

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | Yes
        | 2.7
        | -
        |===

        This cop enforces that short forms of `I18n` methods are used:
        `t` instead of `translate` and `l` instead of `localize`.

        This cop has two different enforcement modes. When the EnforcedStyle
        is conservative (the default) then only `I18n.translate` and `I18n.localize`
        calls are added as offenses.

        When the EnforcedStyle is aggressive then all `translate` and `localize` calls
        without a receiver are added as offenses.

        === Examples

        [source,ruby]
        ----
        # bad
        I18n.translate :key
        I18n.localize Time.now

        # good
        I18n.t :key
        I18n.l Time.now
        ----

        ==== EnforcedStyle: conservative (default)

        [source,ruby]
        ----
        # good
        translate :key
        localize Time.now
        t :key
        l Time.now
        ----

        ==== EnforcedStyle: aggressive

        [source,ruby]
        ----
        # bad
        translate :key
        localize Time.now

        # good
        t :key
        l Time.now
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | EnforcedStyle
        | `conservative`
        | `conservative`, `aggressive`
        |===

        === References

        * https://rails.rubystyle.guide/#short-i18n

        == Rails/SkipsModelValidations

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | No
        | 0.47
        | 2.7
        |===

        This cop checks for the use of methods which skip
        validations which are listed in
        https://guides.rubyonrails.org/active_record_validations.html#skipping-validations

        Methods may be ignored from this rule by configuring a `AllowedMethods`.

        === Examples

        [source,ruby]
        ----
        # bad
        Article.first.decrement!(:view_count)
        DiscussionBoard.decrement_counter(:post_count, 5)
        Article.first.increment!(:view_count)
        DiscussionBoard.increment_counter(:post_count, 5)
        person.toggle :active
        product.touch
        Billing.update_all("category = 'authorized', author = 'David'")
        user.update_attribute(:website, 'example.com')
        user.update_columns(last_request_at: Time.current)
        Post.update_counters 5, comment_count: -1, action_count: 1

        # good
        user.update(website: 'example.com')
        FileUtils.touch('file')
        ----

        ==== AllowedMethods: ["touch"]

        [source,ruby]
        ----
        # bad
        DiscussionBoard.decrement_counter(:post_count, 5)
        DiscussionBoard.increment_counter(:post_count, 5)
        person.toggle :active

        # good
        user.touch
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | ForbiddenMethods
        | `decrement!`, `decrement_counter`, `increment!`, `increment_counter`, `insert`, `insert!`, `insert_all`, `insert_all!`, `toggle!`, `touch`, `touch_all`, `update_all`, `update_attribute`, `update_column`, `update_columns`, `update_counters`, `upsert`, `upsert_all`
        | Array

        | AllowedMethods
        | `[]`
        | Array
        |===

        === References

        * https://guides.rubyonrails.org/active_record_validations.html#skipping-validations

        == Rails/SquishedSQLHeredocs

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | Yes (Unsafe)
        | 2.8
        | 2.9
        |===

        Checks SQL heredocs to use `.squish`.
        Some SQL syntax (e.g. PostgreSQL comments and functions) requires newlines
        to be preserved in order to work, thus auto-correction for this cop is not safe.

        === Examples

        [source,ruby]
        ----
        # bad
        <<-SQL
          SELECT * FROM posts;
        SQL

        <<-SQL
          SELECT * FROM posts
            WHERE id = 1
        SQL

        execute(<<~SQL, "Post Load")
          SELECT * FROM posts
            WHERE post_id = 1
        SQL

        # good
        <<-SQL.squish
          SELECT * FROM posts;
        SQL

        <<~SQL.squish
          SELECT * FROM table
            WHERE id = 1
        SQL

        execute(<<~SQL.squish, "Post Load")
          SELECT * FROM posts
            WHERE post_id = 1
        SQL
        ----

        === References

        * https://rails.rubystyle.guide/#squished-heredocs

        == Rails/TimeZone

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | No
        | Yes (Unsafe)
        | 0.30
        | 2.10
        |===

        This cop checks for the use of Time methods without zone.

        Built on top of Ruby on Rails style guide (https://rails.rubystyle.guide#time)
        and the article http://danilenko.org/2012/7/6/rails_timezones/

        Two styles are supported for this cop. When EnforcedStyle is 'strict'
        then only use of Time.zone is allowed.

        When EnforcedStyle is 'flexible' then it's also allowed
        to use Time.in_time_zone.

        === Examples

        ==== EnforcedStyle: strict

        [source,ruby]
        ----
        # `strict` means that `Time` should be used with `zone`.

        # bad
        Time.now
        Time.parse('2015-03-02T19:05:37')

        # bad
        Time.current
        Time.at(timestamp).in_time_zone

        # good
        Time.zone.now
        Time.zone.parse('2015-03-02T19:05:37')
        Time.zone.parse('2015-03-02T19:05:37Z') # Respect ISO 8601 format with timezone specifier.
        ----

        ==== EnforcedStyle: flexible (default)

        [source,ruby]
        ----
        # `flexible` allows usage of `in_time_zone` instead of `zone`.

        # bad
        Time.now
        Time.parse('2015-03-02T19:05:37')

        # good
        Time.zone.now
        Time.zone.parse('2015-03-02T19:05:37')

        # good
        Time.current
        Time.at(timestamp).in_time_zone
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | EnforcedStyle
        | `flexible`
        | `strict`, `flexible`

        | Exclude
        | `**/*.gemspec`
        | Array
        |===

        === References

        * https://rails.rubystyle.guide#time
        * http://danilenko.org/2012/7/6/rails_timezones

        == Rails/TimeZoneAssignment

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | No
        | 2.10
        | -
        |===

        This cop checks for the use of `Time.zone=` method.

        The `zone` attribute persists for the rest of the Ruby runtime, potentially causing
        unexpected behaviour at a later time.
        Using `Time.use_zone` ensures the code passed in block is the only place Time.zone is affected.
        It eliminates the possibility of a `zone` sticking around longer than intended.

        === Examples

        [source,ruby]
        ----
        # bad
        Time.zone = 'EST'

        # good
        Time.use_zone('EST') do
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `spec/**/*.rb`, `test/**/*.rb`
        | Array
        |===

        === References

        * https://thoughtbot.com/blog/its-about-time-zones

        == Rails/UniqBeforePluck

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes (Unsafe)
        | 0.40
        | 2.8
        |===

        Prefer the use of distinct, before pluck instead of after.

        The use of distinct before pluck is preferred because it executes within
        the database.

        This cop has two different enforcement modes. When the EnforcedStyle
        is conservative (the default) then only calls to pluck on a constant
        (i.e. a model class) before distinct are added as offenses.

        When the EnforcedStyle is aggressive then all calls to pluck before
        distinct are added as offenses. This may lead to false positives
        as the cop cannot distinguish between calls to pluck on an
        ActiveRecord::Relation vs a call to pluck on an
        ActiveRecord::Associations::CollectionProxy.

        This cop is unsafe because the behavior may change depending on the
        database collation.
        Autocorrect is disabled by default for this cop since it may generate
        false positives.

        === Examples

        ==== EnforcedStyle: conservative (default)

        [source,ruby]
        ----
        # bad
        Model.pluck(:id).uniq

        # good
        Model.distinct.pluck(:id)
        ----

        ==== EnforcedStyle: aggressive

        [source,ruby]
        ----
        # bad
        # this will return a Relation that pluck is called on
        Model.where(cond: true).pluck(:id).uniq

        # bad
        # an association on an instance will return a CollectionProxy
        instance.assoc.pluck(:id).uniq

        # bad
        Model.pluck(:id).uniq

        # good
        Model.distinct.pluck(:id)
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | EnforcedStyle
        | `conservative`
        | `conservative`, `aggressive`

        | AutoCorrect
        | `false`
        | Boolean
        |===

        == Rails/UniqueValidationWithoutIndex

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | No
        | 2.5
        | -
        |===

        When you define a uniqueness validation in Active Record model,
        you also should add a unique index for the column. There are two reasons
        First, duplicated records may occur even if Active Record's validation
        is defined.
        Second, it will cause slow queries. The validation executes a `SELECT`
        statement with the target column when inserting/updating a record.
        If the column does not have an index and the table is large,
        the query will be heavy.

        Note that the cop does nothing if db/schema.rb does not exist.

        === Examples

        [source,ruby]
        ----
        # bad - if the schema does not have a unique index
        validates :account, uniqueness: true

        # good - if the schema has a unique index
        validates :account, uniqueness: true

        # good - even if the schema does not have a unique index
        validates :account, length: { minimum: MIN_LENGTH }
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `app/models/**/*.rb`
        | Array
        |===

        == Rails/UnknownEnv

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | No
        | 0.51
        | -
        |===

        This cop checks that environments called with `Rails.env` predicates
        exist.
        By default the cop allows three environments which Rails ships with:
        `development`, `test`, and `production`.
        More can be added to the `Environments` config parameter.

        === Examples

        [source,ruby]
        ----
        # bad
        Rails.env.proudction?
        Rails.env == 'proudction'

        # good
        Rails.env.production?
        Rails.env == 'production'
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Environments
        | `development`, `test`, `production`
        | Array
        |===

        == Rails/Validation

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 0.9
        | 0.41
        |===

        This cop checks for the use of old-style attribute validation macros.

        === Examples

        [source,ruby]
        ----
        # bad
        validates_acceptance_of :foo
        validates_confirmation_of :foo
        validates_exclusion_of :foo
        validates_format_of :foo
        validates_inclusion_of :foo
        validates_length_of :foo
        validates_numericality_of :foo
        validates_presence_of :foo
        validates_absence_of :foo
        validates_size_of :foo
        validates_uniqueness_of :foo

        # good
        validates :foo, acceptance: true
        validates :foo, confirmation: true
        validates :foo, exclusion: true
        validates :foo, format: true
        validates :foo, inclusion: true
        validates :foo, length: true
        validates :foo, numericality: true
        validates :foo, presence: true
        validates :foo, absence: true
        validates :foo, size: true
        validates :foo, uniqueness: true
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `app/models/**/*.rb`
        | Array
        |===

        == Rails/WhereEquals

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | Yes (Unsafe)
        | 2.9
        | 2.10
        |===

        This cop identifies places where manually constructed SQL
        in `where` can be replaced with `where(attribute: value)`.

        === Examples

        [source,ruby]
        ----
        # bad
        User.where('name = ?', 'Gabe')
        User.where('name = :name', name: 'Gabe')
        User.where('name IS NULL')
        User.where('name IN (?)', ['john', 'jane'])
        User.where('name IN (:names)', names: ['john', 'jane'])
        User.where('users.name = :name', name: 'Gabe')

        # good
        User.where(name: 'Gabe')
        User.where(name: nil)
        User.where(name: ['john', 'jane'])
        User.where(users: { name: 'Gabe' })
        ----

        === References

        * https://rails.rubystyle.guide/#hash-conditions

        == Rails/WhereExists

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | Yes (Unsafe)
        | 2.7
        | 2.10
        |===

        This cop enforces consistent style when using `exists?`.

        Two styles are supported for this cop. When EnforcedStyle is 'exists'
        then the cop enforces `exists?(...)` over `where(...).exists?`.

        When EnforcedStyle is 'where' then the cop enforces
        `where(...).exists?` over `exists?(...)`.

        This cop is unsafe for auto-correction because the behavior may change on the following case:

        [source,ruby]
        ----
        Author.includes(:articles).where(articles: {id: id}).exists?
        #=> Perform `eager_load` behavior (`LEFT JOIN` query) and get result.

        Author.includes(:articles).exists?(articles: {id: id})
        #=> Perform `preload` behavior and `ActiveRecord::StatementInvalid` error occurs.
        ----

        === Examples

        ==== EnforcedStyle: exists (default)

        [source,ruby]
        ----
        # bad
        User.where(name: 'john').exists?
        User.where(['name = ?', 'john']).exists?
        User.where('name = ?', 'john').exists?
        user.posts.where(published: true).exists?

        # good
        User.exists?(name: 'john')
        User.where('length(name) > 10').exists?
        user.posts.exists?(published: true)
        ----

        ==== EnforcedStyle: where

        [source,ruby]
        ----
        # bad
        User.exists?(name: 'john')
        User.exists?(['name = ?', 'john'])
        User.exists?('name = ?', 'john')
        user.posts.exists?(published: true)

        # good
        User.where(name: 'john').exists?
        User.where(['name = ?', 'john']).exists?
        User.where('name = ?', 'john').exists?
        user.posts.where(published: true).exists?
        User.where('length(name) > 10').exists?
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | EnforcedStyle
        | `exists`
        | `exists`, `where`
        |===

        == Rails/WhereNot

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Pending
        | Yes
        | Yes
        | 2.8
        | -
        |===

        This cop identifies places where manually constructed SQL
        in `where` can be replaced with `where.not(...)`.

        === Examples

        [source,ruby]
        ----
        # bad
        User.where('name != ?', 'Gabe')
        User.where('name != :name', name: 'Gabe')
        User.where('name <> ?', 'Gabe')
        User.where('name <> :name', name: 'Gabe')
        User.where('name IS NOT NULL')
        User.where('name NOT IN (?)', ['john', 'jane'])
        User.where('name NOT IN (:names)', names: ['john', 'jane'])
        User.where('users.name != :name', name: 'Gabe')

        # good
        User.where.not(name: 'Gabe')
        User.where.not(name: nil)
        User.where.not(name: ['john', 'jane'])
        User.where.not(users: { name: 'Gabe' })
        ----

        === References

        * https://rails.rubystyle.guide/#hash-conditions
  recorded_at: Wed, 02 Jun 2021 08:24:34 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-rails/v2.10.1/config/default.yml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '6295'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"8d413a2d831d5cd053e132fed50e356597062d7f190fd7d4d92fc997e98b329b"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 98F2:7B04:B84AF:14E642:60B74043
      Accept-Ranges:
      - bytes
      Date:
      - Wed, 02 Jun 2021 08:24:35 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-syd10120-SYD
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1622622275.020450,VS0,VE302
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 8593b47866a43eae64d1d4be991bee548c2dfc01
      Expires:
      - Wed, 02 Jun 2021 08:29:35 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        # Common configuration.

        inherit_mode:
          merge:
            - Exclude

        AllCops:
          Exclude:
            - bin/*
            - db/schema.rb
          # What version of Rails is the inspected code using?  If a value is specified
          # for TargetRailsVersion then it is used.  Acceptable values are specificed
          # as a float (i.e. 5.1); the patch version of Rails should not be included.
          # If TargetRailsVersion is not set, RuboCop will parse the Gemfile.lock or
          # gems.locked file to find the version of Rails that has been bound to the
          # application.  If neither of those files exist, RuboCop will use Rails 5.0
          # as the default.
          TargetRailsVersion: ~

        Lint/NumberConversion:
          # Add Rails' duration methods to the ignore list for `Lint/NumberConversion`
          # so that calling `to_i` on one of these does not register an offense.
          # See: https://github.com/rubocop/rubocop/issues/8950
          IgnoredMethods:
            - ago
            - from_now
            - second
            - seconds
            - minute
            - minutes
            - hour
            - hours
            - day
            - days
            - week
            - weeks
            - fortnight
            - fortnights
            - in_milliseconds

        Rails/ActionFilter:
          Description: 'Enforces consistent use of action filter methods.'
          Enabled: true
          VersionAdded: '0.19'
          EnforcedStyle: action
          SupportedStyles:
            - action
            - filter
          Include:
            - app/controllers/**/*.rb

        Rails/ActiveRecordAliases:
          Description: >-
                          Avoid Active Record aliases:
                          Use `update` instead of `update_attributes`.
                          Use `update!` instead of `update_attributes!`.
          Enabled: true
          VersionAdded: '0.53'
          SafeAutoCorrect: false

        Rails/ActiveRecordCallbacksOrder:
          Description: 'Order callback declarations in the order in which they will be executed.'
          StyleGuide: 'https://rails.rubystyle.guide/#callbacks-order'
          Enabled: 'pending'
          VersionAdded: '2.7'
          Include:
            - app/models/**/*.rb

        Rails/ActiveRecordOverride:
          Description: >-
                          Check for overriding Active Record methods instead of using
                          callbacks.
          Enabled: true
          VersionAdded: '0.67'
          Include:
            - app/models/**/*.rb

        Rails/ActiveSupportAliases:
          Description: >-
                          Avoid ActiveSupport aliases of standard ruby methods:
                          `String#starts_with?`, `String#ends_with?`,
                          `Array#append`, `Array#prepend`.
          Enabled: true
          VersionAdded: '0.48'

        Rails/AfterCommitOverride:
          Description: >-
                          This cop enforces that there is only one call to `after_commit`
                          (and its aliases - `after_create_commit`, `after_update_commit`,
                          and `after_destroy_commit`) with the same callback name per model.
          Enabled: 'pending'
          VersionAdded: '2.8'

        Rails/ApplicationController:
          Description: 'Check that controllers subclass ApplicationController.'
          Enabled: true
          SafeAutoCorrect: false
          VersionAdded: '2.4'
          VersionChanged: '2.5'

        Rails/ApplicationJob:
          Description: 'Check that jobs subclass ApplicationJob.'
          Enabled: true
          SafeAutoCorrect: false
          VersionAdded: '0.49'
          VersionChanged: '2.5'

        Rails/ApplicationMailer:
          Description: 'Check that mailers subclass ApplicationMailer.'
          Enabled: true
          SafeAutoCorrect: false
          VersionAdded: '2.4'
          VersionChanged: '2.5'

        Rails/ApplicationRecord:
          Description: 'Check that models subclass ApplicationRecord.'
          Enabled: true
          SafeAutoCorrect: false
          VersionAdded: '0.49'
          VersionChanged: '2.5'

        Rails/ArelStar:
          Description: 'Enforces `Arel.star` instead of `"*"` for expanded columns.'
          Enabled: true
          SafeAutoCorrect: false
          VersionAdded: '2.9'

        Rails/AssertNot:
          Description: 'Use `assert_not` instead of `assert !`.'
          Enabled: true
          VersionAdded: '0.56'
          Include:
            - '**/test/**/*'

        Rails/AttributeDefaultBlockValue:
          Description: 'Pass method call in block for attribute option `default`.'
          Enabled: pending
          VersionAdded: '2.9'
          Include:
            - 'models/**/*'

        Rails/BelongsTo:
          Description: >-
                          Use `optional: true` instead of `required: false` for
                          `belongs_to` relations.
          Enabled: true
          VersionAdded: '0.62'

        Rails/Blank:
          Description: 'Enforces use of `blank?`.'
          Enabled: true
          SafeAutoCorrect: false
          VersionAdded: '0.48'
          VersionChanged: '2.10'
          # Convert usages of `nil? || empty?` to `blank?`
          NilOrEmpty: true
          # Convert usages of `!present?` to `blank?`
          NotPresent: true
          # Convert usages of `unless present?` to `if blank?`
          UnlessPresent: true

        Rails/BulkChangeTable:
          Description: 'Check whether alter queries are combinable.'
          Enabled: true
          VersionAdded: '0.57'
          Database: null
          SupportedDatabases:
            - mysql
            - postgresql
          Include:
            - db/migrate/*.rb

        Rails/ContentTag:
          Description: 'Use `tag` instead of `content_tag`.'
          Reference:
            - 'https://github.com/rails/rails/issues/25195'
            - 'https://api.rubyonrails.org/classes/ActionView/Helpers/TagHelper.html#method-i-content_tag'
          Enabled: true
          VersionAdded: '2.6'

        Rails/CreateTableWithTimestamps:
          Description: >-
                          Checks the migration for which timestamps are not included
                          when creating a new table.
          Enabled: true
          VersionAdded: '0.52'
          Include:
            - db/migrate/*.rb

        Rails/Date:
          Description: >-
                          Checks the correct usage of date aware methods,
                          such as Date.today, Date.current etc.
          Enabled: true
          VersionAdded: '0.30'
          VersionChanged: '0.33'
          # The value `strict` disallows usage of `Date.today`, `Date.current`,
          # `Date#to_time` etc.
          # The value `flexible` allows usage of `Date.current`, `Date.yesterday`, etc
          # (but not `Date.today`) which are overridden by ActiveSupport to handle current
          # time zone.
          EnforcedStyle: flexible
          SupportedStyles:
            - strict
            - flexible

        Rails/DefaultScope:
          Description: 'Avoid use of `default_scope`.'
          StyleGuide: 'https://rails.rubystyle.guide#avoid-default-scope'
          Enabled: false
          VersionAdded: '2.7'

        Rails/Delegate:
          Description: 'Prefer delegate method for delegations.'
          Enabled: true
          VersionAdded: '0.21'
          VersionChanged: '0.50'
          # When set to true, using the target object as a prefix of the
          # method name without using the `delegate` method will be a
          # violation. When set to false, this case is legal.
          EnforceForPrefixed: true

        Rails/DelegateAllowBlank:
          Description: 'Do not use allow_blank as an option to delegate.'
          Enabled: true
          VersionAdded: '0.44'

        Rails/DynamicFindBy:
          Description: 'Use `find_by` instead of dynamic `find_by_*`.'
          StyleGuide: 'https://rails.rubystyle.guide#find_by'
          Enabled: true
          Safe: false
          VersionAdded: '0.44'
          VersionChanged: '2.10'
          # The `Whitelist` has been deprecated, Please use `AllowedMethods` instead.
          Whitelist:
            - find_by_sql
          AllowedMethods:
            - find_by_sql
          AllowedReceivers:
            - Gem::Specification

        Rails/EnumHash:
          Description: 'Prefer hash syntax over array syntax when defining enums.'
          StyleGuide: 'https://rails.rubystyle.guide#enums'
          Enabled: true
          VersionAdded: '2.3'
          Include:
            - app/models/**/*.rb

        Rails/EnumUniqueness:
          Description: 'Avoid duplicate integers in hash-syntax `enum` declaration.'
          Enabled: true
          VersionAdded: '0.46'
          Include:
            - app/models/**/*.rb

        Rails/EnvironmentComparison:
          Description: "Favor `Rails.env.production?` over `Rails.env == 'production'`."
          Enabled: true
          VersionAdded: '0.52'

        Rails/EnvironmentVariableAccess:
          Description: 'Do not access `ENV` directly after initialization.'
          Enabled: pending
          VersionAdded: '2.10'
          Include:
            - app/**/*.rb
            - lib/**/*.rb
          Exclude:
            - lib/**/*.rake
          AllowReads: false
          AllowWrites: false

        Rails/Exit:
          Description: >-
                          Favor `fail`, `break`, `return`, etc. over `exit` in
                          application or library code outside of Rake files to avoid
                          exits during unit testing or running in production.
          Enabled: true
          VersionAdded: '0.41'
          Include:
            - app/**/*.rb
            - config/**/*.rb
            - lib/**/*.rb
          Exclude:
            - lib/**/*.rake

        Rails/FilePath:
          Description: 'Use `Rails.root.join` for file path joining.'
          Enabled: true
          VersionAdded: '0.47'
          VersionChanged: '2.4'
          EnforcedStyle: slashes
          SupportedStyles:
            - slashes
            - arguments

        Rails/FindBy:
          Description: 'Prefer find_by over where.first.'
          StyleGuide: 'https://rails.rubystyle.guide#find_by'
          Enabled: true
          VersionAdded: '0.30'
          Include:
            - app/models/**/*.rb

        Rails/FindById:
          Description: >-
                        Favor the use of `find` over `where.take!`, `find_by!`, and `find_by_id!` when you
                        need to retrieve a single record by primary key when you expect it to be found.
          StyleGuide: 'https://rails.rubystyle.guide/#find'
          Enabled: 'pending'
          VersionAdded: '2.7'

        Rails/FindEach:
          Description: 'Prefer all.find_each over all.find.'
          StyleGuide: 'https://rails.rubystyle.guide#find-each'
          Enabled: true
          VersionAdded: '0.30'
          VersionChanged: '2.9'
          Include:
            - app/models/**/*.rb
          IgnoredMethods:
            # Methods that don't work well with `find_each`.
            - order
            - limit
            - select
            - lock

        Rails/HasAndBelongsToMany:
          Description: 'Prefer has_many :through to has_and_belongs_to_many.'
          StyleGuide: 'https://rails.rubystyle.guide#has-many-through'
          Enabled: true
          VersionAdded: '0.12'
          Include:
            - app/models/**/*.rb

        Rails/HasManyOrHasOneDependent:
          Description: 'Define the dependent option to the has_many and has_one associations.'
          StyleGuide: 'https://rails.rubystyle.guide#has_many-has_one-dependent-option'
          Enabled: true
          VersionAdded: '0.50'
          Include:
            - app/models/**/*.rb

        Rails/HelperInstanceVariable:
          Description: 'Do not use instance variables in helpers.'
          Enabled: true
          VersionAdded: '2.0'
          Include:
            - app/helpers/**/*.rb

        Rails/HttpPositionalArguments:
          Description: 'Use keyword arguments instead of positional arguments in http method calls.'
          Enabled: true
          VersionAdded: '0.44'
          Include:
            - 'spec/**/*'
            - 'test/**/*'

        Rails/HttpStatus:
          Description: 'Enforces use of symbolic or numeric value to define HTTP status.'
          Enabled: true
          VersionAdded: '0.54'
          EnforcedStyle: symbolic
          SupportedStyles:
            - numeric
            - symbolic

        Rails/IgnoredSkipActionFilterOption:
          Description: 'Checks that `if` and `only` (or `except`) are not used together as options of `skip_*` action filter.'
          Reference: 'https://api.rubyonrails.org/classes/AbstractController/Callbacks/ClassMethods.html#method-i-_normalize_callback_options'
          Enabled: true
          VersionAdded: '0.63'
          Include:
            - app/controllers/**/*.rb

        Rails/IndexBy:
          Description: 'Prefer `index_by` over `each_with_object`, `to_h`, or `map`.'
          Enabled: true
          VersionAdded: '2.5'
          VersionChanged: '2.8'

        Rails/IndexWith:
          Description: 'Prefer `index_with` over `each_with_object`, `to_h`, or `map`.'
          Enabled: true
          VersionAdded: '2.5'
          VersionChanged: '2.8'

        Rails/Inquiry:
          Description: "Prefer Ruby's comparison operators over Active Support's `Array#inquiry` and `String#inquiry`."
          StyleGuide: 'https://rails.rubystyle.guide/#inquiry'
          Enabled: 'pending'
          VersionAdded: '2.7'

        Rails/InverseOf:
          Description: 'Checks for associations where the inverse cannot be determined automatically.'
          Enabled: true
          VersionAdded: '0.52'
          Include:
            - app/models/**/*.rb

        Rails/LexicallyScopedActionFilter:
          Description: "Checks that methods specified in the filter's `only` or `except` options are explicitly defined in the controller."
          StyleGuide: 'https://rails.rubystyle.guide#lexically-scoped-action-filter'
          Enabled: true
          Safe: false
          VersionAdded: '0.52'
          Include:
            - app/controllers/**/*.rb

        Rails/LinkToBlank:
          Description: 'Checks that `link_to` with a `target: "_blank"` have a `rel: "noopener"` option passed to them.'
          Reference:
            - https://mathiasbynens.github.io/rel-noopener/
            - https://html.spec.whatwg.org/multipage/links.html#link-type-noopener
            - https://html.spec.whatwg.org/multipage/links.html#link-type-noreferrer
          Enabled: true
          VersionAdded: '0.62'

        Rails/MailerName:
          Description: 'Mailer should end with `Mailer` suffix.'
          StyleGuide: 'https://rails.rubystyle.guide/#mailer-name'
          Enabled: 'pending'
          SafeAutoCorrect: false
          VersionAdded: '2.7'
          Include:
            - app/mailers/**/*.rb

        Rails/MatchRoute:
          Description: >-
                          Don't use `match` to define any routes unless there is a need to map multiple request types
                          among [:get, :post, :patch, :put, :delete] to a single action using the `:via` option.
          StyleGuide: 'https://rails.rubystyle.guide/#no-match-routes'
          Enabled: 'pending'
          VersionAdded: '2.7'
          Include:
            - config/routes.rb
            - config/routes/**/*.rb

        Rails/NegateInclude:
          Description: 'Prefer `collection.exclude?(obj)` over `!collection.include?(obj)`.'
          StyleGuide: 'https://rails.rubystyle.guide#exclude'
          Enabled: 'pending'
          Safe: false
          VersionAdded: '2.7'
          VersionChanged: '2.9'

        Rails/NotNullColumn:
          Description: 'Do not add a NOT NULL column without a default value.'
          Enabled: true
          VersionAdded: '0.43'
          Include:
            - db/migrate/*.rb

        Rails/OrderById:
          Description: >-
                          Do not use the `id` column for ordering.
                          Use a timestamp column to order chronologically.
          StyleGuide: 'https://rails.rubystyle.guide/#order-by-id'
          Enabled: false
          VersionAdded: '2.8'

        Rails/Output:
          Description: 'Checks for calls to puts, print, etc.'
          Enabled: true
          VersionAdded: '0.15'
          VersionChanged: '0.19'
          Include:
            - app/**/*.rb
            - config/**/*.rb
            - db/**/*.rb
            - lib/**/*.rb

        Rails/OutputSafety:
          Description: 'The use of `html_safe` or `raw` may be a security risk.'
          Enabled: true
          VersionAdded: '0.41'

        Rails/Pick:
          Description: 'Prefer `pick` over `pluck(...).first`.'
          StyleGuide: 'https://rails.rubystyle.guide#pick'
          Enabled: true
          Safe: false
          VersionAdded: '2.6'

        Rails/Pluck:
          Description: 'Prefer `pluck` over `map { ... }`.'
          StyleGuide: 'https://rails.rubystyle.guide#pluck'
          Enabled: 'pending'
          VersionAdded: '2.7'

        Rails/PluckId:
          Description: 'Use `ids` instead of `pluck(:id)` or `pluck(primary_key)`.'
          StyleGuide: 'https://rails.rubystyle.guide/#ids'
          Enabled: false
          Safe: false
          VersionAdded: '2.7'

        Rails/PluckInWhere:
          Description: 'Use `select` instead of `pluck` in `where` query methods.'
          Enabled: 'pending'
          Safe: false
          VersionAdded: '2.7'
          VersionChanged: '2.8'
          EnforcedStyle: conservative
          SupportedStyles:
            - conservative
            - aggressive

        Rails/PluralizationGrammar:
          Description: 'Checks for incorrect grammar when using methods like `3.day.ago`.'
          Enabled: true
          VersionAdded: '0.35'

        Rails/Presence:
          Description: 'Checks code that can be written more easily using `Object#presence` defined by Active Support.'
          Enabled: true
          VersionAdded: '0.52'

        Rails/Present:
          Description: 'Enforces use of `present?`.'
          Enabled: true
          VersionAdded: '0.48'
          VersionChanged: '0.67'
          # Convert usages of `!nil? && !empty?` to `present?`
          NotNilAndNotEmpty: true
          # Convert usages of `!blank?` to `present?`
          NotBlank: true
          # Convert usages of `unless blank?` to `if present?`
          UnlessBlank: true

        Rails/RakeEnvironment:
          Description: 'Include `:environment` as a dependency for all Rake tasks.'
          Enabled: true
          Safe: false
          VersionAdded: '2.4'
          VersionChanged: '2.6'
          Include:
            - '**/Rakefile'
            - '**/*.rake'
          Exclude:
            - 'lib/capistrano/tasks/**/*.rake'

        Rails/ReadWriteAttribute:
          Description: >-
                         Checks for read_attribute(:attr) and
                         write_attribute(:attr, val).
          StyleGuide: 'https://rails.rubystyle.guide#read-attribute'
          Enabled: true
          VersionAdded: '0.20'
          VersionChanged: '0.29'
          Include:
            - app/models/**/*.rb

        Rails/RedundantAllowNil:
          Description: >-
                         Finds redundant use of `allow_nil` when `allow_blank` is set to
                         certain values in model validations.
          Enabled: true
          VersionAdded: '0.67'
          Include:
            - app/models/**/*.rb

        Rails/RedundantForeignKey:
          Description: 'Checks for associations where the `:foreign_key` option is redundant.'
          Enabled: true
          VersionAdded: '2.6'

        Rails/RedundantReceiverInWithOptions:
          Description: 'Checks for redundant receiver in `with_options`.'
          Enabled: true
          VersionAdded: '0.52'

        Rails/ReflectionClassName:
          Description: 'Use a string for `class_name` option value in the definition of a reflection.'
          Enabled: true
          Safe: false
          VersionAdded: '0.64'
          VersionChanged: '2.10'

        Rails/RefuteMethods:
          Description: 'Use `assert_not` methods instead of `refute` methods.'
          Enabled: true
          VersionAdded: '0.56'
          EnforcedStyle: assert_not
          SupportedStyles:
            - assert_not
            - refute
          Include:
            - '**/test/**/*'

        Rails/RelativeDateConstant:
          Description: 'Do not assign relative date to constants.'
          Enabled: true
          VersionAdded: '0.48'
          VersionChanged: '0.59'
          AutoCorrect: false

        Rails/RenderInline:
          Description: 'Prefer using a template over inline rendering.'
          StyleGuide: 'https://rails.rubystyle.guide/#inline-rendering'
          Enabled: 'pending'
          VersionAdded: '2.7'

        Rails/RenderPlainText:
          Description: 'Prefer `render plain:` over `render text:`.'
          StyleGuide: 'https://rails.rubystyle.guide/#plain-text-rendering'
          Enabled: 'pending'
          VersionAdded: '2.7'
          # Convert only when `content_type` is explicitly set to `text/plain`.
          ContentTypeCompatibility: true

        Rails/RequestReferer:
          Description: 'Use consistent syntax for request.referer.'
          Enabled: true
          VersionAdded: '0.41'
          EnforcedStyle: referer
          SupportedStyles:
            - referer
            - referrer

        Rails/RequireDependency:
          Description: 'Do not use `require_dependency` when running in Zeitwerk mode. `require_dependency` is for autoloading in classic mode.'
          Reference: 'https://guides.rubyonrails.org/autoloading_and_reloading_constants.html'
          Enabled: false
          VersionAdded: '2.10'

        Rails/ReversibleMigration:
          Description: 'Checks whether the change method of the migration file is reversible.'
          StyleGuide: 'https://rails.rubystyle.guide#reversible-migration'
          Reference: 'https://api.rubyonrails.org/classes/ActiveRecord/Migration/CommandRecorder.html'
          Enabled: true
          VersionAdded: '0.47'
          Include:
            - db/migrate/*.rb

        Rails/ReversibleMigrationMethodDefinition:
          Description: 'Checks whether the migration implements either a `change` method or both an `up` and a `down` method.'
          Enabled: false
          VersionAdded: '2.10'
          Include:
            - db/migrate/*.rb

        Rails/SafeNavigation:
          Description: "Use Ruby's safe navigation operator (`&.`) instead of `try!`."
          Enabled: true
          VersionAdded: '0.43'
          # This will convert usages of `try` to use safe navigation as well as `try!`.
          # `try` and `try!` work slightly differently. `try!` and safe navigation will
          # both raise a `NoMethodError` if the receiver of the method call does not
          # implement the intended method. `try` will not raise an exception for this.
          ConvertTry: false

        Rails/SafeNavigationWithBlank:
          Description: 'Avoid `foo&.blank?` in conditionals.'
          Enabled: true
          VersionAdded: '2.4'
          # While the safe navigation operator is generally a good idea, when
          # checking `foo&.blank?` in a conditional, `foo` being `nil` will actually
          # do the opposite of what the author intends.
          #
          # foo&.blank? #=> nil
          # foo.blank? #=> true
          SafeAutoCorrect: false

        Rails/SaveBang:
          Description: 'Identifies possible cases where Active Record save! or related should be used.'
          StyleGuide: 'https://rails.rubystyle.guide#save-bang'
          Enabled: false
          VersionAdded: '0.42'
          VersionChanged: '0.59'
          AllowImplicitReturn: true
          AllowedReceivers: []
          SafeAutoCorrect: false

        Rails/ScopeArgs:
          Description: 'Checks the arguments of ActiveRecord scopes.'
          Enabled: true
          VersionAdded: '0.19'
          Include:
            - app/models/**/*.rb

        Rails/ShortI18n:
          Description: 'Use the short form of the I18n methods: `t` instead of `translate` and `l` instead of `localize`.'
          StyleGuide: 'https://rails.rubystyle.guide/#short-i18n'
          Enabled: 'pending'
          VersionAdded: '2.7'
          EnforcedStyle: conservative
          SupportedStyles:
            - conservative
            - aggressive

        Rails/SkipsModelValidations:
          Description: >-
                         Use methods that skips model validations with caution.
                         See reference for more information.
          Reference: 'https://guides.rubyonrails.org/active_record_validations.html#skipping-validations'
          Enabled: true
          VersionAdded: '0.47'
          VersionChanged: '2.7'
          ForbiddenMethods:
            - decrement!
            - decrement_counter
            - increment!
            - increment_counter
            - insert
            - insert!
            - insert_all
            - insert_all!
            - toggle!
            - touch
            - touch_all
            - update_all
            - update_attribute
            - update_column
            - update_columns
            - update_counters
            - upsert
            - upsert_all
          AllowedMethods: []

        Rails/SquishedSQLHeredocs:
          Description: 'Checks SQL heredocs to use `.squish`.'
          StyleGuide: 'https://rails.rubystyle.guide/#squished-heredocs'
          Enabled: 'pending'
          VersionAdded: '2.8'
          VersionChanged: '2.9'
          # Some SQL syntax (e.g. PostgreSQL comments and functions) requires newlines
          # to be preserved in order to work, thus auto-correction is not safe.
          SafeAutoCorrect: false

        Rails/TimeZone:
          Description: 'Checks the correct usage of time zone aware methods.'
          StyleGuide: 'https://rails.rubystyle.guide#time'
          Reference: 'http://danilenko.org/2012/7/6/rails_timezones'
          Enabled: true
          Safe: false
          VersionAdded: '0.30'
          VersionChanged: '2.10'
          # The value `strict` means that `Time` should be used with `zone`.
          # The value `flexible` allows usage of `in_time_zone` instead of `zone`.
          EnforcedStyle: flexible
          SupportedStyles:
            - strict
            - flexible
          Exclude:
            - '**/*.gemspec'

        Rails/TimeZoneAssignment:
          Description: 'Prefer the usage of `Time.use_zone` instead of manually updating `Time.zone` value.'
          Reference: 'https://thoughtbot.com/blog/its-about-time-zones'
          Enabled: 'pending'
          VersionAdded: '2.10'
          Include:
            - spec/**/*.rb
            - test/**/*.rb

        Rails/UniqBeforePluck:
          Description: 'Prefer the use of uniq or distinct before pluck.'
          Enabled: true
          VersionAdded: '0.40'
          VersionChanged: '2.8'
          EnforcedStyle: conservative
          SupportedStyles:
            - conservative
            - aggressive
          SafeAutoCorrect: false
          AutoCorrect: false

        Rails/UniqueValidationWithoutIndex:
          Description: 'Uniqueness validation should be with a unique index.'
          Enabled: true
          VersionAdded: '2.5'
          Include:
            - app/models/**/*.rb

        Rails/UnknownEnv:
          Description: 'Use correct environment name.'
          Enabled: true
          VersionAdded: '0.51'
          Environments:
            - development
            - test
            - production

        Rails/Validation:
          Description: 'Use validates :attribute, hash of validations.'
          Enabled: true
          VersionAdded: '0.9'
          VersionChanged: '0.41'
          Include:
            - app/models/**/*.rb

        Rails/WhereEquals:
          Description: 'Pass conditions to `where` as a hash instead of manually constructing SQL.'
          StyleGuide: 'https://rails.rubystyle.guide/#hash-conditions'
          Enabled: 'pending'
          SafeAutoCorrect: false
          VersionAdded: '2.9'
          VersionChanged: '2.10'

        Rails/WhereExists:
          Description: 'Prefer `exists?(...)` over `where(...).exists?`.'
          Enabled: 'pending'
          SafeAutoCorrect: false
          EnforcedStyle: exists
          SupportedStyles:
            - exists
            - where
          VersionAdded: '2.7'
          VersionChanged: '2.10'

        Rails/WhereNot:
          Description: 'Use `where.not(...)` instead of manually constructing negated SQL in `where`.'
          StyleGuide: 'https://rails.rubystyle.guide/#hash-conditions'
          Enabled: 'pending'
          VersionAdded: '2.8'

        # Accept `redirect_to(...) and return` and similar cases.
        Style/AndOr:
          EnforcedStyle: conditionals
  recorded_at: Wed, 02 Jun 2021 08:24:35 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-rake/v0.5.1/docs/modules/ROOT/pages/cops.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '14'
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      Content-Type:
      - text/plain; charset=utf-8
      X-Github-Request-Id:
      - 7EC0:2377:1E1CFB:25D3FF:60B74043
      Accept-Ranges:
      - bytes
      Date:
      - Wed, 02 Jun 2021 08:24:36 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-syd10135-SYD
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1622622276.517832,VS0,VE1007
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 0adc4a09ff03e301f4b3465d392f58d0563f333a
      Expires:
      - Wed, 02 Jun 2021 08:29:36 GMT
      Source-Age:
      - '0'
    body:
      encoding: UTF-8
      string: '404: Not Found'
  recorded_at: Wed, 02 Jun 2021 08:24:36 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-rake/v0.5.1/config/default.yml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '278'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"4b8a901e70598d90259e6b4465c4dbb0145ef52a57bb20f10bd1975a7b7b92c8"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 0AE2:2377:1E1D26:25D422:60B74044
      Accept-Ranges:
      - bytes
      Date:
      - Wed, 02 Jun 2021 08:24:37 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-syd10147-SYD
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1622622277.698273,VS0,VE485
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 6cb64cfb2b56143f0713cabbdbdf0ac4ab924242
      Expires:
      - Wed, 02 Jun 2021 08:29:37 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        Rake:
          Enabled: true
          Include:
            - 'Rakefile'
            - '**/*.rake'

        Rake/ClassDefinitionInTask:
          Description: 'Do not define a class or module in rake task, because it will be defined to the top level.'
          Enabled: true
          VersionAdded: '0.3.0'

        Rake/Desc:
          Description: 'Describe the task with `desc` method.'
          Enabled: true
          VersionAdded: '0.1.0'

        Rake/DuplicateNamespace:
          Description: 'Do not define namespace with the same name'
          Enabled: true
          VersionAdded: '0.5.0'

        Rake/DuplicateTask:
          Description: 'Do not define tasks with the same name'
          Enabled: true
          VersionAdded: '0.4.0'

        Rake/MethodDefinitionInTask:
          Description: 'Do not define a method in rake task, because it will be defined to the top level.'
          Enabled: true
          VersionAdded: '0.2.0'
  recorded_at: Wed, 02 Jun 2021 08:24:37 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-rspec/v2.3.0/docs/modules/ROOT/pages/cops.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '1350'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"ed2c0796b7e1d81c43d12003f5e56aed511f63fcbc360efe07638ca4fbaf3c35"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 538C:2324:3EFE9A:4F61EE:60B74045
      Accept-Ranges:
      - bytes
      Date:
      - Wed, 02 Jun 2021 08:24:37 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-syd10176-SYD
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1622622277.351713,VS0,VE515
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 6d16d6b19c6557996ab55e66bc40b9eee37c670a
      Expires:
      - Wed, 02 Jun 2021 08:29:37 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        // START_COP_LIST

        === Department xref:cops_rspec.adoc[RSpec]

        * xref:cops_rspec.adoc#rspecalignleftletbrace[RSpec/AlignLeftLetBrace]
        * xref:cops_rspec.adoc#rspecalignrightletbrace[RSpec/AlignRightLetBrace]
        * xref:cops_rspec.adoc#rspecanyinstance[RSpec/AnyInstance]
        * xref:cops_rspec.adoc#rspecaroundblock[RSpec/AroundBlock]
        * xref:cops_rspec.adoc#rspecbe[RSpec/Be]
        * xref:cops_rspec.adoc#rspecbeeql[RSpec/BeEql]
        * xref:cops_rspec.adoc#rspecbeforeafterall[RSpec/BeforeAfterAll]
        * xref:cops_rspec.adoc#rspeccontextmethod[RSpec/ContextMethod]
        * xref:cops_rspec.adoc#rspeccontextwording[RSpec/ContextWording]
        * xref:cops_rspec.adoc#rspecdescribeclass[RSpec/DescribeClass]
        * xref:cops_rspec.adoc#rspecdescribemethod[RSpec/DescribeMethod]
        * xref:cops_rspec.adoc#rspecdescribesymbol[RSpec/DescribeSymbol]
        * xref:cops_rspec.adoc#rspecdescribedclass[RSpec/DescribedClass]
        * xref:cops_rspec.adoc#rspecdescribedclassmodulewrapping[RSpec/DescribedClassModuleWrapping]
        * xref:cops_rspec.adoc#rspecdialect[RSpec/Dialect]
        * xref:cops_rspec.adoc#rspecemptyexamplegroup[RSpec/EmptyExampleGroup]
        * xref:cops_rspec.adoc#rspecemptyhook[RSpec/EmptyHook]
        * xref:cops_rspec.adoc#rspecemptylineafterexample[RSpec/EmptyLineAfterExample]
        * xref:cops_rspec.adoc#rspecemptylineafterexamplegroup[RSpec/EmptyLineAfterExampleGroup]
        * xref:cops_rspec.adoc#rspecemptylineafterfinallet[RSpec/EmptyLineAfterFinalLet]
        * xref:cops_rspec.adoc#rspecemptylineafterhook[RSpec/EmptyLineAfterHook]
        * xref:cops_rspec.adoc#rspecemptylineaftersubject[RSpec/EmptyLineAfterSubject]
        * xref:cops_rspec.adoc#rspecexamplelength[RSpec/ExampleLength]
        * xref:cops_rspec.adoc#rspecexamplewithoutdescription[RSpec/ExampleWithoutDescription]
        * xref:cops_rspec.adoc#rspecexamplewording[RSpec/ExampleWording]
        * xref:cops_rspec.adoc#rspecexpectactual[RSpec/ExpectActual]
        * xref:cops_rspec.adoc#rspecexpectchange[RSpec/ExpectChange]
        * xref:cops_rspec.adoc#rspecexpectinhook[RSpec/ExpectInHook]
        * xref:cops_rspec.adoc#rspecexpectoutput[RSpec/ExpectOutput]
        * xref:cops_rspec.adoc#rspecfilepath[RSpec/FilePath]
        * xref:cops_rspec.adoc#rspecfocus[RSpec/Focus]
        * xref:cops_rspec.adoc#rspechookargument[RSpec/HookArgument]
        * xref:cops_rspec.adoc#rspechooksbeforeexamples[RSpec/HooksBeforeExamples]
        * xref:cops_rspec.adoc#rspecimplicitblockexpectation[RSpec/ImplicitBlockExpectation]
        * xref:cops_rspec.adoc#rspecimplicitexpect[RSpec/ImplicitExpect]
        * xref:cops_rspec.adoc#rspecimplicitsubject[RSpec/ImplicitSubject]
        * xref:cops_rspec.adoc#rspecinstancespy[RSpec/InstanceSpy]
        * xref:cops_rspec.adoc#rspecinstancevariable[RSpec/InstanceVariable]
        * xref:cops_rspec.adoc#rspecitbehaveslike[RSpec/ItBehavesLike]
        * xref:cops_rspec.adoc#rspeciteratedexpectation[RSpec/IteratedExpectation]
        * xref:cops_rspec.adoc#rspecleadingsubject[RSpec/LeadingSubject]
        * xref:cops_rspec.adoc#rspecleakyconstantdeclaration[RSpec/LeakyConstantDeclaration]
        * xref:cops_rspec.adoc#rspecletbeforeexamples[RSpec/LetBeforeExamples]
        * xref:cops_rspec.adoc#rspecletsetup[RSpec/LetSetup]
        * xref:cops_rspec.adoc#rspecmessagechain[RSpec/MessageChain]
        * xref:cops_rspec.adoc#rspecmessageexpectation[RSpec/MessageExpectation]
        * xref:cops_rspec.adoc#rspecmessagespies[RSpec/MessageSpies]
        * xref:cops_rspec.adoc#rspecmissingexamplegroupargument[RSpec/MissingExampleGroupArgument]
        * xref:cops_rspec.adoc#rspecmultipledescribes[RSpec/MultipleDescribes]
        * xref:cops_rspec.adoc#rspecmultipleexpectations[RSpec/MultipleExpectations]
        * xref:cops_rspec.adoc#rspecmultiplememoizedhelpers[RSpec/MultipleMemoizedHelpers]
        * xref:cops_rspec.adoc#rspecmultiplesubjects[RSpec/MultipleSubjects]
        * xref:cops_rspec.adoc#rspecnamedsubject[RSpec/NamedSubject]
        * xref:cops_rspec.adoc#rspecnestedgroups[RSpec/NestedGroups]
        * xref:cops_rspec.adoc#rspecnottonot[RSpec/NotToNot]
        * xref:cops_rspec.adoc#rspecoverwritingsetup[RSpec/OverwritingSetup]
        * xref:cops_rspec.adoc#rspecpending[RSpec/Pending]
        * xref:cops_rspec.adoc#rspecpredicatematcher[RSpec/PredicateMatcher]
        * xref:cops_rspec.adoc#rspecreceivecounts[RSpec/ReceiveCounts]
        * xref:cops_rspec.adoc#rspecreceivenever[RSpec/ReceiveNever]
        * xref:cops_rspec.adoc#rspecrepeateddescription[RSpec/RepeatedDescription]
        * xref:cops_rspec.adoc#rspecrepeatedexample[RSpec/RepeatedExample]
        * xref:cops_rspec.adoc#rspecrepeatedexamplegroupbody[RSpec/RepeatedExampleGroupBody]
        * xref:cops_rspec.adoc#rspecrepeatedexamplegroupdescription[RSpec/RepeatedExampleGroupDescription]
        * xref:cops_rspec.adoc#rspecrepeatedincludeexample[RSpec/RepeatedIncludeExample]
        * xref:cops_rspec.adoc#rspecreturnfromstub[RSpec/ReturnFromStub]
        * xref:cops_rspec.adoc#rspecscatteredlet[RSpec/ScatteredLet]
        * xref:cops_rspec.adoc#rspecscatteredsetup[RSpec/ScatteredSetup]
        * xref:cops_rspec.adoc#rspecsharedcontext[RSpec/SharedContext]
        * xref:cops_rspec.adoc#rspecsharedexamples[RSpec/SharedExamples]
        * xref:cops_rspec.adoc#rspecsingleargumentmessagechain[RSpec/SingleArgumentMessageChain]
        * xref:cops_rspec.adoc#rspecstubbedmock[RSpec/StubbedMock]
        * xref:cops_rspec.adoc#rspecsubjectstub[RSpec/SubjectStub]
        * xref:cops_rspec.adoc#rspecunspecifiedexception[RSpec/UnspecifiedException]
        * xref:cops_rspec.adoc#rspecvariabledefinition[RSpec/VariableDefinition]
        * xref:cops_rspec.adoc#rspecvariablename[RSpec/VariableName]
        * xref:cops_rspec.adoc#rspecverifieddoubles[RSpec/VerifiedDoubles]
        * xref:cops_rspec.adoc#rspecvoidexpect[RSpec/VoidExpect]
        * xref:cops_rspec.adoc#rspecyield[RSpec/Yield]

        === Department xref:cops_rspec/capybara.adoc[RSpec/Capybara]

        * xref:cops_rspec/capybara.adoc#rspeccapybara/currentpathexpectation[RSpec/Capybara/CurrentPathExpectation]
        * xref:cops_rspec/capybara.adoc#rspeccapybara/featuremethods[RSpec/Capybara/FeatureMethods]
        * xref:cops_rspec/capybara.adoc#rspeccapybara/visibilitymatcher[RSpec/Capybara/VisibilityMatcher]

        === Department xref:cops_rspec/factorybot.adoc[RSpec/FactoryBot]

        * xref:cops_rspec/factorybot.adoc#rspecfactorybot/attributedefinedstatically[RSpec/FactoryBot/AttributeDefinedStatically]
        * xref:cops_rspec/factorybot.adoc#rspecfactorybot/createlist[RSpec/FactoryBot/CreateList]
        * xref:cops_rspec/factorybot.adoc#rspecfactorybot/factoryclassname[RSpec/FactoryBot/FactoryClassName]

        === Department xref:cops_rspec/rails.adoc[RSpec/Rails]

        * xref:cops_rspec/rails.adoc#rspecrails/httpstatus[RSpec/Rails/HttpStatus]

        // END_COP_LIST
  recorded_at: Wed, 02 Jun 2021 08:24:37 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-rspec/v2.3.0/docs/modules/ROOT/pages/cops_rspec.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '11840'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"fc9a5b152e084610ae0b92fdda3435ae79df256a29ac113258298e69f6116284"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 6296:57D4:4A1D3B:5F2577:60B74046
      Accept-Ranges:
      - bytes
      Date:
      - Wed, 02 Jun 2021 08:24:38 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-syd10129-SYD
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1622622278.035025,VS0,VE693
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 07375d38cbb6f20bec74803eb6423211e3f21cfc
      Expires:
      - Wed, 02 Jun 2021 08:29:38 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: "= RSpec\n\n== RSpec/AlignLeftLetBrace\n\n|===\n| Enabled by default
        | Safe | Supports autocorrection | VersionAdded | VersionChanged\n\n| Disabled\n|
        Yes\n| Yes\n| 1.16\n| -\n|===\n\nChecks that left braces for adjacent single
        line lets are aligned.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\nlet(:foobar)
        { blahblah }\nlet(:baz) { bar }\nlet(:a) { b }\n\n# good\nlet(:foobar) { blahblah
        }\nlet(:baz)    { bar }\nlet(:a)      { b }\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/AlignLeftLetBrace\n\n==
        RSpec/AlignRightLetBrace\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Disabled\n| Yes\n| Yes\n| 1.16\n| -\n|===\n\nChecks
        that right braces for adjacent single line lets are aligned.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nlet(:foobar) { blahblah }\nlet(:baz)    { bar }\nlet(:a)      { b }\n\n#
        good\nlet(:foobar) { blahblah }\nlet(:baz)    { bar      }\nlet(:a)      {
        b        }\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/AlignRightLetBrace\n\n==
        RSpec/AnyInstance\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n| 1.4\n| -\n|===\n\nCheck
        that instances are not being stubbed globally.\n\nPrefer instance doubles
        over stubbing any instance of a class\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\ndescribe MyClass do\n  before { allow_any_instance_of(MyClass).to receive(:foo)
        }\nend\n\n# good\ndescribe MyClass do\n  let(:my_instance) { instance_double(MyClass)
        }\n\n  before do\n    allow(MyClass).to receive(:new).and_return(my_instance)\n
        \   allow(my_instance).to receive(:foo)\n  end\nend\n----\n\n=== References\n\n*
        https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/AnyInstance\n\n==
        RSpec/AroundBlock\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n| 1.11\n| -\n|===\n\nChecks
        that around blocks actually run the test.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\naround do\n  some_method\nend\n\naround do |test|\n  some_method\nend\n\n#
        good\naround do |test|\n  some_method\n  test.call\nend\n\naround do |test|\n
        \ some_method\n  test.run\nend\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/AroundBlock\n\n==
        RSpec/Be\n\n|===\n| Enabled by default | Safe | Supports autocorrection |
        VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n| 1.25\n| -\n|===\n\nCheck
        for expectations where `be` is used without argument.\n\nThe `be` matcher
        is too generic, as it pass on everything that is not\nnil or false. If that
        is the exact intend, use `be_truthy`. In all other\ncases it's better to specify
        what exactly is the expected value.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nexpect(foo).to be\n\n# good\nexpect(foo).to be_truthy\nexpect(foo).to
        be 1.0\nexpect(foo).to be(true)\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Be\n\n==
        RSpec/BeEql\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| Yes\n| 1.7\n| -\n|===\n\nCheck
        for expectations where `be(...)` can replace `eql(...)`.\n\nThe `be` matcher
        compares by identity while the `eql` matcher\ncompares using `eql?`. Integers,
        floats, booleans, symbols, and nil\ncan be compared by identity and therefore
        the `be` matcher is\npreferable as it is a more strict test.\n\nThis cop only
        looks for instances of `expect(...).to eql(...)`. We\ndo not check `to_not`
        or `not_to` since `!eql?` is more strict\nthan `!equal?`. We also do not try
        to flag `eq` because if\n`a == b`, and `b` is comparable by identity, `a`
        is still not\nnecessarily the same type as `b` since the `#==` operator can\ncoerce
        objects for comparison.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\nexpect(foo).to
        eql(1)\nexpect(foo).to eql(1.0)\nexpect(foo).to eql(true)\nexpect(foo).to
        eql(false)\nexpect(foo).to eql(:bar)\nexpect(foo).to eql(nil)\n\n# good\nexpect(foo).to
        be(1)\nexpect(foo).to be(1.0)\nexpect(foo).to be(true)\nexpect(foo).to be(false)\nexpect(foo).to
        be(:bar)\nexpect(foo).to be(nil)\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/BeEql\n\n==
        RSpec/BeforeAfterAll\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n| 1.12\n| -\n|===\n\nCheck
        that before/after(:all) isn't being used.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\n#\n# Faster but risk of state leaking between examples\n#\ndescribe MyClass
        do\n  before(:all) { Widget.create }\n  after(:all) { Widget.delete_all }\nend\n\n#
        good\n#\n# Slower but examples are properly isolated\n#\ndescribe MyClass
        do\n  before(:each) { Widget.create }\n  after(:each) { Widget.delete_all
        }\nend\n----\n\n=== Configurable attributes\n\n|===\n| Name | Default value
        | Configurable values\n\n| Exclude\n| `spec/spec_helper.rb`, `spec/rails_helper.rb`,
        `spec/support/**/*.rb`\n| Array\n|===\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/BeforeAfterAll\n\n==
        RSpec/ContextMethod\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| Yes\n| 1.36\n| -\n|===\n\n`context`
        should not be used for specifying methods.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\ncontext '#foo_bar' do\n  # ...\nend\n\ncontext '.foo_bar' do\n  # ...\nend\n\n#
        good\ndescribe '#foo_bar' do\n  # ...\nend\n\ndescribe '.foo_bar' do\n  #
        ...\nend\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ContextMethod\n\n==
        RSpec/ContextWording\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n| 1.20\n| 1.20.1\n|===\n\nChecks
        that `context` docstring starts with an allowed prefix.\n\nThe default list
        of prefixes is minimal. Users are encouraged to tailor\nthe configuration
        to meet project needs. Other acceptable prefixes may\ninclude `if`, `unless`,
        `for`, `before`, `after`, or `during`.\nThey may consist of multiple words
        if desired.\n\n=== Examples\n\n==== `Prefixes` configuration\n\n[source,ruby]\n----\n#
        .rubocop.yml\n# RSpec/ContextWording:\n#   Prefixes:\n#     - when\n#     -
        with\n#     - without\n#     - if\n#     - unless\n#     - for\n----\n\n[source,ruby]\n----\n#
        bad\ncontext 'the display name not present' do\n  # ...\nend\n\n# good\ncontext
        'when the display name is not present' do\n  # ...\nend\n----\n\n=== Configurable
        attributes\n\n|===\n| Name | Default value | Configurable values\n\n| Prefixes\n|
        `when`, `with`, `without`\n| Array\n|===\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ContextWording\n\n==
        RSpec/DescribeClass\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n| 1.0\n| 1.44\n|===\n\nCheck
        that the first argument to the top-level describe is a constant.\n\nIt can
        be configured to ignore strings when certain metadata is passed.\n\nIgnores
        Rails and Aruba `type` metadata by default.\n\n=== Examples\n\n==== `IgnoredMetadata`
        configuration\n\n[source,ruby]\n----\n# .rubocop.yml\n# RSpec/DescribeClass:\n#
        \  IgnoredMetadata:\n#     type:\n#       - request\n#       - controller\n----\n\n[source,ruby]\n----\n#
        bad\ndescribe 'Do something' do\nend\n\n# good\ndescribe TestedClass do\n
        \ subject { described_class }\nend\n\ndescribe 'TestedClass::VERSION' do\n
        \ subject { Object.const_get(self.class.description) }\nend\n\ndescribe \"A
        feature example\", type: :feature do\nend\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| IgnoredMetadata\n| `{\"type\"=>[\"channel\",
        \"controller\", \"helper\", \"job\", \"mailer\", \"model\", \"request\", \"routing\",
        \"view\", \"feature\", \"system\", \"mailbox\", \"aruba\"]}`\n| \n|===\n\n===
        References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/DescribeClass\n\n==
        RSpec/DescribeMethod\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n| 1.0\n| -\n|===\n\nChecks
        that the second argument to `describe` specifies a method.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\ndescribe MyClass, 'do something' do\nend\n\n# good\ndescribe MyClass,
        '#my_instance_method' do\nend\n\ndescribe MyClass, '.my_class_method' do\nend\n----\n\n===
        References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/DescribeMethod\n\n==
        RSpec/DescribeSymbol\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n| 1.15\n| -\n|===\n\nAvoid
        describing symbols.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\ndescribe
        :my_method do\n  # ...\nend\n\n# good\ndescribe '#my_method' do\n  # ...\nend\n----\n\n===
        References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/DescribeSymbol\n\n==
        RSpec/DescribedClass\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| Yes (Unsafe)\n| 1.0\n|
        1.11\n|===\n\nChecks that tests use `described_class`.\n\nIf the first argument
        of describe is a class, the class is exposed to\neach example via described_class.\n\nThis
        cop can be configured using the `EnforcedStyle` and `SkipBlocks`\noptions.\n\nThere's
        a known caveat with rspec-rails's `controller` helper that\nruns its block
        in a different context, and `described_class` is not\navailable to it. `SkipBlocks`
        option excludes detection in all\nnon-RSpec related blocks.\n\nTo narrow down
        this setting to only a specific directory, it is\npossible to use an overriding
        configuration file local to that\ndirectory.\n\n=== Examples\n\n==== `EnforcedStyle:
        described_class`\n\n[source,ruby]\n----\n# bad\ndescribe MyClass do\n  subject
        { MyClass.do_something }\nend\n\n# good\ndescribe MyClass do\n  subject {
        described_class.do_something }\nend\n----\n\n==== `EnforcedStyle: explicit`\n\n[source,ruby]\n----\n#
        bad\ndescribe MyClass do\n  subject { described_class.do_something }\nend\n\n#
        good\ndescribe MyClass do\n  subject { MyClass.do_something }\nend\n----\n\n====
        `SkipBlocks: true`\n\n[source,ruby]\n----\n# spec/controllers/.rubocop.yml\n#
        RSpec/DescribedClass:\n#   SkipBlocks: true\n\n# acceptable\ndescribe MyConcern
        do\n  controller(ApplicationController) do\n    include MyConcern\n  end\nend\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        SkipBlocks\n| `false`\n| Boolean\n\n| EnforcedStyle\n| `described_class`\n|
        `described_class`, `explicit`\n|===\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/DescribedClass\n\n==
        RSpec/DescribedClassModuleWrapping\n\n|===\n| Enabled by default | Safe |
        Supports autocorrection | VersionAdded | VersionChanged\n\n| Disabled\n| Yes\n|
        No\n| 1.37\n| -\n|===\n\nAvoid opening modules and defining specs within them.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\nmodule MyModule\n  RSpec.describe
        MyClass do\n    # ...\n  end\nend\n\n# good\nRSpec.describe MyModule::MyClass
        do\n  # ...\nend\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/DescribedClassModuleWrapping\n\n==
        RSpec/Dialect\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Disabled\n| Yes\n| Yes\n| 1.33\n| -\n|===\n\nThis
        cop enforces custom RSpec dialects.\n\nA dialect can be based on the following
        RSpec methods:\n\n- describe, context, feature, example_group\n- xdescribe,
        xcontext, xfeature\n- fdescribe, fcontext, ffeature\n- shared_examples, shared_examples_for,
        shared_context\n- it, specify, example, scenario, its\n- fit, fspecify, fexample,
        fscenario, focus\n- xit, xspecify, xexample, xscenario, skip\n- pending\n-
        prepend_before, before, append_before,\n- around\n- prepend_after, after,
        append_after\n- let, let!\n- subject, subject!\n- expect, is_expected, expect_any_instance_of\n\nBy
        default all of the RSpec methods and aliases are allowed. By setting\na config
        like:\n\n  RSpec/Dialect:\n    PreferredMethods:\n      context: describe\n\nYou
        can expect the following behavior:\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\ncontext 'display name presence' do\n  # ...\nend\n\n# good\ndescribe
        'display name presence' do\n  # ...\nend\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| PreferredMethods\n| `{}`\n|
        \n|===\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Dialect\n\n==
        RSpec/EmptyExampleGroup\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n| 1.7\n| 2.0\n|===\n\nChecks
        if an example group does not include any tests.\n\n=== Examples\n\n==== usage\n\n[source,ruby]\n----\n#
        bad\ndescribe Bacon do\n  let(:bacon)      { Bacon.new(chunkiness) }\n  let(:chunkiness)
        { false                 }\n\n  context 'extra chunky' do   # flagged by rubocop\n
        \   let(:chunkiness) { true }\n  end\n\n  it 'is chunky' do\n    expect(bacon.chunky?).to
        be_truthy\n  end\nend\n\n# good\ndescribe Bacon do\n  let(:bacon)      { Bacon.new(chunkiness)
        }\n  let(:chunkiness) { false                 }\n\n  it 'is chunky' do\n    expect(bacon.chunky?).to
        be_truthy\n  end\nend\n\n# good\ndescribe Bacon do\n  pending 'will add tests
        later'\nend\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/EmptyExampleGroup\n\n==
        RSpec/EmptyHook\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| Yes\n| 1.39\n| -\n|===\n\nChecks
        for empty before and after hooks.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nbefore {}\nafter do; end\nbefore(:all) do\nend\nafter(:all) { }\n\n#
        good\nbefore { create_users }\nafter do\n  cleanup_users\nend\nbefore(:all)
        do\n  create_feed\nend\nafter(:all) { cleanup_feed }\n----\n\n=== References\n\n*
        https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/EmptyHook\n\n==
        RSpec/EmptyLineAfterExample\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| Yes\n|
        1.36\n| -\n|===\n\nChecks if there is an empty line after example blocks.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\nRSpec.describe Foo do\n  it 'does
        this' do\n  end\n  it 'does that' do\n  end\nend\n\n# good\nRSpec.describe
        Foo do\n  it 'does this' do\n  end\n\n  it 'does that' do\n  end\nend\n\n#
        fair - it's ok to have non-separated one-liners\nRSpec.describe Foo do\n  it
        { one }\n  it { two }\nend\n----\n\n==== with AllowConsecutiveOneLiners configuration\n\n[source,ruby]\n----\n#
        rubocop.yml\n# RSpec/EmptyLineAfterExample:\n#   AllowConsecutiveOneLiners:
        false\n\n# bad\nRSpec.describe Foo do\n  it { one }\n  it { two }\nend\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        AllowConsecutiveOneLiners\n| `true`\n| Boolean\n|===\n\n=== References\n\n*
        https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/EmptyLineAfterExample\n\n==
        RSpec/EmptyLineAfterExampleGroup\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| Yes\n|
        1.27\n| -\n|===\n\nChecks if there is an empty line after example group blocks.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\nRSpec.describe Foo do\n  describe
        '#bar' do\n  end\n  describe '#baz' do\n  end\nend\n\n# good\nRSpec.describe
        Foo do\n  describe '#bar' do\n  end\n\n  describe '#baz' do\n  end\nend\n----\n\n===
        References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/EmptyLineAfterExampleGroup\n\n==
        RSpec/EmptyLineAfterFinalLet\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| Yes\n|
        1.14\n| -\n|===\n\nChecks if there is an empty line after the last let block.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\nlet(:foo) { bar }\nlet(:something)
        { other }\nit { does_something }\n\n# good\nlet(:foo) { bar }\nlet(:something)
        { other }\n\nit { does_something }\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/EmptyLineAfterFinalLet\n\n==
        RSpec/EmptyLineAfterHook\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| Yes\n| 1.27\n| -\n|===\n\nChecks
        if there is an empty line after hook blocks.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nbefore { do_something }\nit { does_something }\n\n# bad\nafter { do_something
        }\nit { does_something }\n\n# bad\naround { |test| test.run }\nit { does_something
        }\n\n# good\nbefore { do_something }\n\nit { does_something }\n\n# good\nafter
        { do_something }\n\nit { does_something }\n\n# good\naround { |test| test.run
        }\n\nit { does_something }\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/EmptyLineAfterHook\n\n==
        RSpec/EmptyLineAfterSubject\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| Yes\n|
        1.14\n| -\n|===\n\nChecks if there is an empty line after subject block.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\nsubject(:obj) { described_class }\nlet(:foo)
        { bar }\n\n# good\nsubject(:obj) { described_class }\n\nlet(:foo) { bar }\n----\n\n===
        References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/EmptyLineAfterSubject\n\n==
        RSpec/ExampleLength\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n| 1.5\n| 2.3\n|===\n\nChecks
        for long examples.\n\nA long example is usually more difficult to understand.
        Consider\nextracting out some behaviour, e.g. with a `let` block, or a helper\nmethod.\n\nYou
        can set literals you want to fold with `CountAsOne`.\nAvailable are: 'array',
        'hash', and 'heredoc'. Each literal\nwill be counted as one line regardless
        of its actual size.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\nit do\n
        \ service = described_class.new\n  more_setup\n  more_setup\n  result = service.call\n
        \ expect(result).to be(true)\nend\n\n# good\nit do\n  service = described_class.new\n
        \ result = service.call\n  expect(result).to be(true)\nend\n----\n\n==== CountAsOne:
        ['array', 'heredoc']\n\n[source,ruby]\n----\nit do\n  array = [         #
        +1\n    1,\n    2\n  ]\n\n  hash = {          # +3\n    key: 'value'\n  }\n\n
        \ msg = <<~HEREDOC  # +1\n    Heredoc\n    content.\n  HEREDOC\nend                 #
        5 points\n----\n\n=== Configurable attributes\n\n|===\n| Name | Default value
        | Configurable values\n\n| Max\n| `5`\n| Integer\n\n| CountAsOne\n| `[]`\n|
        Array\n|===\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ExampleLength\n\n==
        RSpec/ExampleWithoutDescription\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n|
        1.22\n| -\n|===\n\nChecks for examples without a description.\n\nRSpec allows
        for auto-generated example descriptions when there is no\ndescription provided
        or the description is an empty one.\n\nThis cop removes empty descriptions.\nIt
        also defines whether auto-generated description is allowed, based\non the
        configured style.\n\nThis cop can be configured using the `EnforcedStyle`
        option\n\n=== Examples\n\n==== `EnforcedStyle: always_allow`\n\n[source,ruby]\n----\n#
        bad\nit('') { is_expected.to be_good }\nit '' do\n  result = service.call\n
        \ expect(result).to be(true)\nend\n\n# good\nit { is_expected.to be_good }\nit
        do\n  result = service.call\n  expect(result).to be(true)\nend\n----\n\n====
        `EnforcedStyle: single_line_only`\n\n[source,ruby]\n----\n# bad\nit('') {
        is_expected.to be_good }\nit do\n  result = service.call\n  expect(result).to
        be(true)\nend\n\n# good\nit { is_expected.to be_good }\n----\n\n==== `EnforcedStyle:
        disallow`\n\n[source,ruby]\n----\n# bad\nit { is_expected.to be_good }\nit
        do\n  result = service.call\n  expect(result).to be(true)\nend\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        EnforcedStyle\n| `always_allow`\n| `always_allow`, `single_line_only`, `disallow`\n|===\n\n===
        References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ExampleWithoutDescription\n\n==
        RSpec/ExampleWording\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| Yes\n| 1.0\n| 1.2\n|===\n\nChecks
        for common mistakes in example descriptions.\n\nThis cop will correct docstrings
        that begin with 'should' and 'it'.\n\nThe autocorrect is experimental - use
        with care! It can be configured\nwith CustomTransform (e.g. have => has) and
        IgnoredWords (e.g. only).\n\n=== Examples\n\n[source,ruby]\n----\n# bad\nit
        'should find nothing' do\nend\n\n# good\nit 'finds nothing' do\nend\n----\n\n[source,ruby]\n----\n#
        bad\nit 'it does things' do\nend\n\n# good\nit 'does things' do\nend\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        CustomTransform\n| `{\"be\"=>\"is\", \"BE\"=>\"IS\", \"have\"=>\"has\", \"HAVE\"=>\"HAS\"}`\n|
        \n\n| IgnoredWords\n| `[]`\n| Array\n|===\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ExampleWording\n\n==
        RSpec/ExpectActual\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| Yes\n| 1.7\n| -\n|===\n\nChecks
        for `expect(...)` calls containing literal values.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nexpect(5).to eq(price)\nexpect(/foo/).to eq(pattern)\nexpect(\"John\").to
        eq(name)\n\n# good\nexpect(price).to eq(5)\nexpect(pattern).to eq(/foo/)\nexpect(name).to
        eq(\"John\")\n----\n\n=== Configurable attributes\n\n|===\n| Name | Default
        value | Configurable values\n\n| Exclude\n| `spec/routing/**/*`\n| Array\n|===\n\n===
        References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ExpectActual\n\n==
        RSpec/ExpectChange\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| Yes\n| 1.22\n| -\n|===\n\nChecks
        for consistent style of change matcher.\n\nEnforces either passing object
        and attribute as arguments to the matcher\nor passing a block that reads the
        attribute value.\n\nThis cop can be configured using the `EnforcedStyle` option.\n\n===
        Examples\n\n==== `EnforcedStyle: block`\n\n[source,ruby]\n----\n# bad\nexpect
        { run }.to change(Foo, :bar)\n\n# good\nexpect { run }.to change { Foo.bar
        }\n----\n\n==== `EnforcedStyle: method_call`\n\n[source,ruby]\n----\n# bad\nexpect
        { run }.to change { Foo.bar }\nexpect { run }.to change { foo.baz }\n\n# good\nexpect
        { run }.to change(Foo, :bar)\nexpect { run }.to change(foo, :baz)\n# also
        good when there are arguments or chained method calls\nexpect { run }.to change
        { Foo.bar(:count) }\nexpect { run }.to change { user.reload.name }\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        EnforcedStyle\n| `method_call`\n| `method_call`, `block`\n|===\n\n=== References\n\n*
        https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ExpectChange\n\n==
        RSpec/ExpectInHook\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n| 1.16\n| -\n|===\n\nDo
        not use `expect` in hooks such as `before`.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nbefore do\n  expect(something).to eq 'foo'\nend\n\n# bad\nafter do\n
        \ expect_any_instance_of(Something).to receive(:foo)\nend\n\n# good\nit do\n
        \ expect(something).to eq 'foo'\nend\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ExpectInHook\n\n==
        RSpec/ExpectOutput\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n| 1.10\n| -\n|===\n\nChecks
        for opportunities to use `expect { ... }.to output`.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\n$stdout = StringIO.new\nmy_app.print_report\n$stdout = STDOUT\nexpect($stdout.string).to
        eq('Hello World')\n\n# good\nexpect { my_app.print_report }.to output('Hello
        World').to_stdout\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ExpectOutput\n\n==
        RSpec/FilePath\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n| 1.2\n| 1.40\n|===\n\nChecks
        that spec file paths are consistent and well-formed.\n\nBy default, this checks
        that spec file paths are consistent with the\ntest subject and and enforces
        that it reflects the described\nclass/module and its optionally called out
        method.\n\nWith the configuration option `IgnoreMethods` the called out method
        will\nbe ignored when determining the enforced path.\n\nWith the configuration
        option `CustomTransform` modules or classes can\nbe specified that should
        not as usual be transformed from CamelCase to\nsnake_case (e.g. 'RuboCop'
        => 'rubocop' ).\n\nWith the configuration option `SpecSuffixOnly` test files
        will only\nbe checked to ensure they end in '_spec.rb'. This option disables\nchecking
        for consistency in the test subject or test methods.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nwhatever_spec.rb         # describe MyClass\n\n# bad\nmy_class_spec.rb
        \        # describe MyClass, '#method'\n\n# good\nmy_class_spec.rb         #
        describe MyClass\n\n# good\nmy_class_method_spec.rb  # describe MyClass, '#method'\n\n#
        good\nmy_class/method_spec.rb  # describe MyClass, '#method'\n----\n\n====
        when configuration is `IgnoreMethods: true`\n\n[source,ruby]\n----\n# bad\nwhatever_spec.rb
        \        # describe MyClass\n\n# good\nmy_class_spec.rb         # describe
        MyClass\n\n# good\nmy_class_spec.rb         # describe MyClass, '#method'\n----\n\n====
        when configuration is `SpecSuffixOnly: true`\n\n[source,ruby]\n----\n# good\nwhatever_spec.rb
        \        # describe MyClass\n\n# good\nmy_class_spec.rb         # describe
        MyClass\n\n# good\nmy_class_spec.rb         # describe MyClass, '#method'\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        Include\n| `+**/*_spec*rb*+`, `+**/spec/**/*+`\n| Array\n\n| CustomTransform\n|
        `{\"RuboCop\"=>\"rubocop\", \"RSpec\"=>\"rspec\"}`\n| \n\n| IgnoreMethods\n|
        `false`\n| Boolean\n\n| SpecSuffixOnly\n| `false`\n| Boolean\n|===\n\n===
        References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/FilePath\n\n==
        RSpec/Focus\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| Yes\n| 1.5\n| 2.1\n|===\n\nChecks
        if examples are focused.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\ndescribe
        MyClass, focus: true do\nend\n\ndescribe MyClass, :focus do\nend\n\nfdescribe
        MyClass do\nend\n\n# good\ndescribe MyClass do\nend\n----\n\n=== References\n\n*
        https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Focus\n\n==
        RSpec/HookArgument\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| Yes\n| 1.7\n| -\n|===\n\nChecks
        the arguments passed to `before`, `around`, and `after`.\n\nThis cop checks
        for consistent style when specifying RSpec\nhooks which run for each example.
        There are three supported\nstyles: \"implicit\", \"each\", and \"example.\"
        All styles have\nthe same behavior.\n\n=== Examples\n\n==== when configuration
        is `EnforcedStyle: implicit`\n\n[source,ruby]\n----\n# bad\nbefore(:each)
        do\n  # ...\nend\n\n# bad\nbefore(:example) do\n  # ...\nend\n\n# good\nbefore
        do\n  # ...\nend\n----\n\n==== when configuration is `EnforcedStyle: each`\n\n[source,ruby]\n----\n#
        bad\nbefore(:example) do\n  # ...\nend\n\n# good\nbefore do\n  # ...\nend\n\n#
        good\nbefore(:each) do\n  # ...\nend\n----\n\n==== when configuration is `EnforcedStyle:
        example`\n\n[source,ruby]\n----\n# bad\nbefore(:each) do\n  # ...\nend\n\n#
        bad\nbefore do\n  # ...\nend\n\n# good\nbefore(:example) do\n  # ...\nend\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        EnforcedStyle\n| `implicit`\n| `implicit`, `each`, `example`\n|===\n\n===
        References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/HookArgument\n\n==
        RSpec/HooksBeforeExamples\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| Yes\n|
        1.29\n| -\n|===\n\nChecks for before/around/after hooks that come after an
        example.\n\n=== Examples\n\n[source,ruby]\n----\n# Bad\n\nit 'checks what
        foo does' do\n  expect(foo).to be\nend\n\nbefore { prepare }\nafter { clean_up
        }\n\n# Good\nbefore { prepare }\nafter { clean_up }\n\nit 'checks what foo
        does' do\n  expect(foo).to be\nend\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/HooksBeforeExamples\n\n==
        RSpec/ImplicitBlockExpectation\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n|
        1.35\n| -\n|===\n\nCheck that implicit block expectation syntax is not used.\n\nPrefer
        using explicit block expectations.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nsubject { -> { do_something } }\nit { is_expected.to change(something).to(new_value)
        }\n\n# good\nit 'changes something to a new value' do\n  expect { do_something
        }.to change(something).to(new_value)\nend\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ImplicitBlockExpectation\n\n==
        RSpec/ImplicitExpect\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| Yes\n| 1.8\n| -\n|===\n\nCheck
        that a consistent implicit expectation style is used.\n\nThis cop can be configured
        using the `EnforcedStyle` option\nand supports the `--auto-gen-config` flag.\n\n===
        Examples\n\n==== `EnforcedStyle: is_expected`\n\n[source,ruby]\n----\n# bad\nit
        { should be_truthy }\n\n# good\nit { is_expected.to be_truthy }\n----\n\n====
        `EnforcedStyle: should`\n\n[source,ruby]\n----\n# bad\nit { is_expected.to
        be_truthy }\n\n# good\nit { should be_truthy }\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| EnforcedStyle\n| `is_expected`\n|
        `is_expected`, `should`\n|===\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ImplicitExpect\n\n==
        RSpec/ImplicitSubject\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| Yes\n| 1.29\n| 1.30\n|===\n\nChecks
        for usage of implicit subject (`is_expected` / `should`).\n\nThis cop can
        be configured using the `EnforcedStyle` option\n\n=== Examples\n\n==== `EnforcedStyle:
        single_line_only`\n\n[source,ruby]\n----\n# bad\nit do\n  is_expected.to be_truthy\nend\n\n#
        good\nit { is_expected.to be_truthy }\nit do\n  expect(subject).to be_truthy\nend\n----\n\n====
        `EnforcedStyle: disallow`\n\n[source,ruby]\n----\n# bad\nit { is_expected.to
        be_truthy }\n\n# good\nit { expect(subject).to be_truthy }\n----\n\n=== Configurable
        attributes\n\n|===\n| Name | Default value | Configurable values\n\n| EnforcedStyle\n|
        `single_line_only`\n| `single_line_only`, `single_statement_only`, `disallow`\n|===\n\n===
        References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ImplicitSubject\n\n==
        RSpec/InstanceSpy\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| Yes\n| 1.12\n| -\n|===\n\nChecks
        for `instance_double` used with `have_received`.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nit do\n  foo = instance_double(Foo).as_null_object\n  expect(foo).to
        have_received(:bar)\nend\n\n# good\nit do\n  foo = instance_spy(Foo)\n  expect(foo).to
        have_received(:bar)\nend\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/InstanceSpy\n\n==
        RSpec/InstanceVariable\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n| 1.0\n| 1.7\n|===\n\nChecks
        for instance variable usage in specs.\n\nThis cop can be configured with the
        option `AssignmentOnly` which\nwill configure the cop to only register offenses
        on instance\nvariable usage if the instance variable is also assigned within\nthe
        spec\n\n=== Examples\n\n[source,ruby]\n----\n# bad\ndescribe MyClass do\n
        \ before { @foo = [] }\n  it { expect(@foo).to be_empty }\nend\n\n# good\ndescribe
        MyClass do\n  let(:foo) { [] }\n  it { expect(foo).to be_empty }\nend\n----\n\n====
        with AssignmentOnly configuration\n\n[source,ruby]\n----\n# rubocop.yml\n#
        RSpec/InstanceVariable:\n#   AssignmentOnly: false\n\n# bad\ndescribe MyClass
        do\n  before { @foo = [] }\n  it { expect(@foo).to be_empty }\nend\n\n# allowed\ndescribe
        MyClass do\n  it { expect(@foo).to be_empty }\nend\n\n# good\ndescribe MyClass
        do\n  let(:foo) { [] }\n  it { expect(foo).to be_empty }\nend\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        AssignmentOnly\n| `false`\n| Boolean\n|===\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/InstanceVariable\n\n==
        RSpec/ItBehavesLike\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| Yes\n| 1.13\n| -\n|===\n\nChecks
        that only one `it_behaves_like` style is used.\n\n=== Examples\n\n==== when
        configuration is `EnforcedStyle: it_behaves_like`\n\n[source,ruby]\n----\n#
        bad\nit_should_behave_like 'a foo'\n\n# good\nit_behaves_like 'a foo'\n----\n\n====
        when configuration is `EnforcedStyle: it_should_behave_like`\n\n[source,ruby]\n----\n#
        bad\nit_behaves_like 'a foo'\n\n# good\nit_should_behave_like 'a foo'\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        EnforcedStyle\n| `it_behaves_like`\n| `it_behaves_like`, `it_should_behave_like`\n|===\n\n===
        References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ItBehavesLike\n\n==
        RSpec/IteratedExpectation\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n|
        1.14\n| -\n|===\n\nCheck that `all` matcher is used instead of iterating over
        an array.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\nit 'validates users'
        do\n  [user1, user2, user3].each { |user| expect(user).to be_valid }\nend\n\n#
        good\nit 'validates users' do\n  expect([user1, user2, user3]).to all(be_valid)\nend\n----\n\n===
        References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/IteratedExpectation\n\n==
        RSpec/LeadingSubject\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| Yes\n| 1.7\n| 1.14\n|===\n\nEnforce
        that subject is the first definition in the test.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\n  let(:params) { blah }\n  subject { described_class.new(params) }\n\n
        \ before { do_something }\n  subject { described_class.new(params) }\n\n  it
        { expect_something }\n  subject { described_class.new(params) }\n  it { expect_something_else
        }\n\n# good\n  subject { described_class.new(params) }\n  let(:params) { blah
        }\n\n# good\n  subject { described_class.new(params) }\n  before { do_something
        }\n\n# good\n  subject { described_class.new(params) }\n  it { expect_something
        }\n  it { expect_something_else }\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/LeadingSubject\n\n==
        RSpec/LeakyConstantDeclaration\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n|
        1.35\n| -\n|===\n\nChecks that no class, module, or constant is declared.\n\nConstants,
        including classes and modules, when declared in a block\nscope, are defined
        in global namespace, and leak between examples.\n\nIf several examples may
        define a `DummyClass`, instead of being a\nblank slate class as it will be
        in the first example, subsequent\nexamples will be reopening it and modifying
        its behaviour in\nunpredictable ways.\nEven worse when a class that exists
        in the codebase is reopened.\n\nAnonymous classes are fine, since they don't
        result in global\nnamespace name clashes.\n\n=== Examples\n\n==== Constants
        leak between examples\n\n[source,ruby]\n----\n# bad\ndescribe SomeClass do\n
        \ OtherClass = Struct.new\n  CONSTANT_HERE = 'I leak into global namespace'\nend\n\n#
        good\ndescribe SomeClass do\n  before do\n    stub_const('OtherClass', Struct.new)\n
        \   stub_const('CONSTANT_HERE', 'I only exist during this example')\n  end\nend\n----\n\n[source,ruby]\n----\n#
        bad\ndescribe SomeClass do\n  class FooClass < described_class\n    def double_that\n
        \     some_base_method * 2\n    end\n  end\n\n  it { expect(FooClass.new.double_that).to
        eq(4) }\nend\n\n# good - anonymous class, no constant needs to be defined\ndescribe
        SomeClass do\n  let(:foo_class) do\n    Class.new(described_class) do\n      def
        double_that\n        some_base_method * 2\n      end\n    end\n  end\n\n  it
        { expect(foo_class.new.double_that).to eq(4) }\nend\n\n# good - constant is
        stubbed\ndescribe SomeClass do\n  before do\n    foo_class = Class.new(described_class)
        do\n                  def do_something\n                  end\n                end\n
        \   stub_const('FooClass', foo_class)\n  end\n\n  it { expect(FooClass.new.double_that).to
        eq(4) }\nend\n----\n\n[source,ruby]\n----\n# bad\ndescribe SomeClass do\n
        \ module SomeModule\n    class SomeClass\n      def do_something\n      end\n
        \   end\n  end\nend\n\n# good\ndescribe SomeClass do\n  before do\n    foo_class
        = Class.new(described_class) do\n                  def do_something\n                  end\n
        \               end\n    stub_const('SomeModule::SomeClass', foo_class)\n
        \ end\nend\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/LeakyConstantDeclaration\n\n==
        RSpec/LetBeforeExamples\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| Yes\n| 1.16\n| 1.22\n|===\n\nChecks
        for `let` definitions that come after an example.\n\n=== Examples\n\n[source,ruby]\n----\n#
        Bad\nlet(:foo) { bar }\n\nit 'checks what foo does' do\n  expect(foo).to be\nend\n\nlet(:some)
        { other }\n\nit 'checks what some does' do\n  expect(some).to be\nend\n\n#
        Good\nlet(:foo) { bar }\nlet(:some) { other }\n\nit 'checks what foo does'
        do\n  expect(foo).to be\nend\n\nit 'checks what some does' do\n  expect(some).to
        be\nend\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/LetBeforeExamples\n\n==
        RSpec/LetSetup\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n| 1.7\n| -\n|===\n\nChecks
        unreferenced `let!` calls being used for test setup.\n\n=== Examples\n\n[source,ruby]\n----\n#
        Bad\nlet!(:my_widget) { create(:widget) }\n\nit 'counts widgets' do\n  expect(Widget.count).to
        eq(1)\nend\n\n# Good\nit 'counts widgets' do\n  create(:widget)\n  expect(Widget.count).to
        eq(1)\nend\n\n# Good\nbefore { create(:widget) }\n\nit 'counts widgets' do\n
        \ expect(Widget.count).to eq(1)\nend\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/LetSetup\n\n==
        RSpec/MessageChain\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n| 1.7\n| -\n|===\n\nCheck
        that chains of messages are not being stubbed.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nallow(foo).to receive_message_chain(:bar, :baz).and_return(42)\n\n# better\nthing
        = Thing.new(baz: 42)\nallow(foo).to receive(:bar).and_return(thing)\n----\n\n===
        References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/MessageChain\n\n==
        RSpec/MessageExpectation\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Disabled\n| Yes\n| No\n| 1.7\n| 1.8\n|===\n\nChecks
        for consistent message expectation style.\n\nThis cop can be configured in
        your configuration using the\n`EnforcedStyle` option and supports `--auto-gen-config`.\n\n===
        Examples\n\n==== `EnforcedStyle: allow`\n\n[source,ruby]\n----\n# bad\nexpect(foo).to
        receive(:bar)\n\n# good\nallow(foo).to receive(:bar)\n----\n\n==== `EnforcedStyle:
        expect`\n\n[source,ruby]\n----\n# bad\nallow(foo).to receive(:bar)\n\n# good\nexpect(foo).to
        receive(:bar)\n----\n\n=== Configurable attributes\n\n|===\n| Name | Default
        value | Configurable values\n\n| EnforcedStyle\n| `allow`\n| `allow`, `expect`\n|===\n\n===
        References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/MessageExpectation\n\n==
        RSpec/MessageSpies\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n| 1.9\n| -\n|===\n\nChecks
        that message expectations are set using spies.\n\nThis cop can be configured
        in your configuration using the\n`EnforcedStyle` option and supports `--auto-gen-config`.\n\n===
        Examples\n\n==== `EnforcedStyle: have_received`\n\n[source,ruby]\n----\n#
        bad\nexpect(foo).to receive(:bar)\n\n# good\nexpect(foo).to have_received(:bar)\n----\n\n====
        `EnforcedStyle: receive`\n\n[source,ruby]\n----\n# bad\nexpect(foo).to have_received(:bar)\n\n#
        good\nexpect(foo).to receive(:bar)\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| EnforcedStyle\n| `have_received`\n|
        `have_received`, `receive`\n|===\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/MessageSpies\n\n==
        RSpec/MissingExampleGroupArgument\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n|
        1.28\n| -\n|===\n\nChecks that the first argument to an example group is not
        empty.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\ndescribe do\nend\n\nRSpec.describe
        do\nend\n\n# good\ndescribe TestedClass do\nend\n\ndescribe \"A feature example\"
        do\nend\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/MissingExampleGroupArgument\n\n==
        RSpec/MultipleDescribes\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n| 1.0\n| -\n|===\n\nChecks
        for multiple top-level example groups.\n\nMultiple descriptions for the same
        class or module should either\nbe nested or separated into different test
        files.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\ndescribe MyClass, '.do_something'
        do\nend\ndescribe MyClass, '.do_something_else' do\nend\n\n# good\ndescribe
        MyClass do\n  describe '.do_something' do\n  end\n  describe '.do_something_else'
        do\n  end\nend\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/MultipleDescribes\n\n==
        RSpec/MultipleExpectations\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n|
        1.7\n| 1.21\n|===\n\nChecks if examples contain too many `expect` calls.\n\nThis
        cop is configurable using the `Max` option\nand works with `--auto-gen-config`.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\ndescribe UserCreator do\n  it 'builds
        a user' do\n    expect(user.name).to eq(\"John\")\n    expect(user.age).to
        eq(22)\n  end\nend\n\n# good\ndescribe UserCreator do\n  it 'sets the users
        name' do\n    expect(user.name).to eq(\"John\")\n  end\n\n  it 'sets the users
        age' do\n    expect(user.age).to eq(22)\n  end\nend\n----\n\n==== configuration\n\n[source,ruby]\n----\n#
        .rubocop.yml\n# RSpec/MultipleExpectations:\n#   Max: 2\n\n# not flagged by
        rubocop\ndescribe UserCreator do\n  it 'builds a user' do\n    expect(user.name).to
        eq(\"John\")\n    expect(user.age).to eq(22)\n  end\nend\n----\n\n=== Configurable
        attributes\n\n|===\n| Name | Default value | Configurable values\n\n| Max\n|
        `1`\n| Integer\n|===\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/MultipleExpectations\n\n==
        RSpec/MultipleMemoizedHelpers\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n|
        1.43\n| -\n|===\n\nChecks if example groups contain too many `let` and `subject`
        calls.\n\nThis cop is configurable using the `Max` option and the `AllowSubject`\nwhich
        will configure the cop to only register offenses on calls to\n`let` and not
        calls to `subject`.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\ndescribe
        MyClass do\n  let(:foo) { [] }\n  let(:bar) { [] }\n  let!(:baz) { [] }\n
        \ let(:qux) { [] }\n  let(:quux) { [] }\n  let(:quuz) { {} }\nend\n\ndescribe
        MyClass do\n  let(:foo) { [] }\n  let(:bar) { [] }\n  let!(:baz) { [] }\n\n
        \ context 'when stuff' do\n    let(:qux) { [] }\n    let(:quux) { [] }\n    let(:quuz)
        { {} }\n  end\nend\n\n# good\ndescribe MyClass do\n  let(:bar) { [] }\n  let!(:baz)
        { [] }\n  let(:qux) { [] }\n  let(:quux) { [] }\n  let(:quuz) { {} }\nend\n\ndescribe
        MyClass do\n  context 'when stuff' do\n    let(:foo) { [] }\n    let(:bar)
        { [] }\n    let!(:booger) { [] }\n  end\n\n  context 'when other stuff' do\n
        \   let(:qux) { [] }\n    let(:quux) { [] }\n    let(:quuz) { {} }\n  end\nend\n----\n\n====
        when disabling AllowSubject configuration\n\n[source,ruby]\n----\n# rubocop.yml\n#
        RSpec/MultipleMemoizedHelpers:\n#   AllowSubject: false\n\n# bad - `subject`
        counts towards memoized helpers\ndescribe MyClass do\n  subject { {} }\n  let(:foo)
        { [] }\n  let(:bar) { [] }\n  let!(:baz) { [] }\n  let(:qux) { [] }\n  let(:quux)
        { [] }\nend\n----\n\n==== with Max configuration\n\n[source,ruby]\n----\n#
        rubocop.yml\n# RSpec/MultipleMemoizedHelpers:\n#   Max: 1\n\n# bad\ndescribe
        MyClass do\n  let(:foo) { [] }\n  let(:bar) { [] }\nend\n----\n\n=== Configurable
        attributes\n\n|===\n| Name | Default value | Configurable values\n\n| AllowSubject\n|
        `true`\n| Boolean\n\n| Max\n| `5`\n| Integer\n|===\n\n=== References\n\n*
        https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/MultipleMemoizedHelpers\n\n==
        RSpec/MultipleSubjects\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| Yes\n| 1.16\n| -\n|===\n\nChecks
        if an example group defines `subject` multiple times.\n\nThe autocorrect behavior
        for this cop depends on the type of\nduplication:\n\n  - If multiple named
        subjects are defined then this probably indicates\n    that the overwritten
        subjects (all subjects except the last\n    definition) are effectively being
        used to define helpers. In this\n    case they are replaced with `let`.\n\n
        \ - If multiple unnamed subjects are defined though then this can *only*\n
        \   be dead code and we remove the overwritten subject definitions.\n\n  -
        If subjects are defined with `subject!` then we don't autocorrect.\n    This
        is enough of an edge case that people can just move this to\n    a `before`
        hook on their own\n\n=== Examples\n\n[source,ruby]\n----\n# bad\ndescribe
        Foo do\n  subject(:user) { User.new }\n  subject(:post) { Post.new }\nend\n\n#
        good\ndescribe Foo do\n  let(:user) { User.new }\n  subject(:post) { Post.new
        }\nend\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/MultipleSubjects\n\n==
        RSpec/NamedSubject\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n| 1.5.3\n| -\n|===\n\nChecks
        for explicitly referenced test subjects.\n\nRSpec lets you declare an \"implicit
        subject\" using `subject { ... }`\nwhich allows for tests like `it { is_expected.to
        be_valid }`.\nIf you need to reference your test subject you should explicitly\nname
        it using `subject(:your_subject_name) { ... }`. Your test subjects\nshould
        be the most important object in your tests so they deserve\na descriptive
        name.\n\nThis cop can be configured in your configuration using the\n`IgnoreSharedExamples`
        which will not report offenses for implicit\nsubjects in shared example groups.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\nRSpec.describe User do\n  subject
        { described_class.new }\n\n  it 'is valid' do\n    expect(subject.valid?).to
        be(true)\n  end\nend\n\n# good\nRSpec.describe Foo do\n  subject(:user) {
        described_class.new }\n\n  it 'is valid' do\n    expect(user.valid?).to be(true)\n
        \ end\nend\n\n# also good\nRSpec.describe Foo do\n  subject(:user) { described_class.new
        }\n\n  it { is_expected.to be_valid }\nend\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| IgnoreSharedExamples\n| `true`\n|
        Boolean\n|===\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/NamedSubject\n\n==
        RSpec/NestedGroups\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n| 1.7\n| 1.10\n|===\n\nChecks
        for nested example groups.\n\nThis cop is configurable using the `Max` option\nand
        supports `--auto-gen-config\n\n=== Examples\n\n[source,ruby]\n----\n# bad\ncontext
        'when using some feature' do\n  let(:some)    { :various }\n  let(:feature)
        { :setup   }\n\n  context 'when user is signed in' do  # flagged by rubocop\n
        \   let(:user) do\n      UserCreate.call(user_attributes)\n    end\n\n    let(:user_attributes)
        do\n      {\n        name: 'John',\n        age:  22,\n        role: role\n
        \     }\n    end\n\n    context 'when user is an admin' do # flagged by rubocop\n
        \     let(:role) { 'admin' }\n\n      it 'blah blah'\n      it 'yada yada'\n
        \   end\n  end\nend\n\n# better\ncontext 'using some feature as an admin'
        do\n  let(:some)    { :various }\n  let(:feature) { :setup   }\n\n  let(:user)
        do\n    UserCreate.call(\n      name: 'John',\n      age:  22,\n      role:
        'admin'\n    )\n  end\n\n  it 'blah blah'\n  it 'yada yada'\nend\n----\n\n====
        configuration\n\n[source,ruby]\n----\n# .rubocop.yml\n# RSpec/NestedGroups:\n#
        \  Max: 2\n\ncontext 'when using some feature' do\n  let(:some)    { :various
        }\n  let(:feature) { :setup   }\n\n  context 'when user is signed in' do\n
        \   let(:user) do\n      UserCreate.call(user_attributes)\n    end\n\n    let(:user_attributes)
        do\n      {\n        name: 'John',\n        age:  22,\n        role: role\n
        \     }\n    end\n\n    context 'when user is an admin' do # flagged by rubocop\n
        \     let(:role) { 'admin' }\n\n      it 'blah blah'\n      it 'yada yada'\n
        \   end\n  end\nend\n----\n\n=== Configurable attributes\n\n|===\n| Name |
        Default value | Configurable values\n\n| Max\n| `3`\n| Integer\n|===\n\n===
        References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/NestedGroups\n\n==
        RSpec/NotToNot\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| Yes\n| 1.4\n| -\n|===\n\nChecks
        for consistent method usage for negating expectations.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nit '...' do\n  expect(false).to_not be_true\nend\n\n# good\nit '...'
        do\n  expect(false).not_to be_true\nend\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| EnforcedStyle\n| `not_to`\n|
        `not_to`, `to_not`\n|===\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/NotToNot\n\n==
        RSpec/OverwritingSetup\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n| 1.14\n| -\n|===\n\nChecks
        if there is a let/subject that overwrites an existing one.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nlet(:foo) { bar }\nlet(:foo) { baz }\n\nsubject(:foo) { bar }\nlet(:foo)
        { baz }\n\nlet(:foo) { bar }\nlet!(:foo) { baz }\n\n# good\nsubject(:test)
        { something }\nlet(:foo) { bar }\nlet(:baz) { baz }\nlet!(:other) { other
        }\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/OverwritingSetup\n\n==
        RSpec/Pending\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Disabled\n| Yes\n| No\n| 1.25\n| -\n|===\n\nChecks
        for any pending or skipped examples.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\ndescribe MyClass do\n  it \"should be true\"\nend\n\ndescribe MyClass
        do\n  it \"should be true\", skip: true do\n    expect(1).to eq(2)\n  end\nend\n\ndescribe
        MyClass do\n  it \"should be true\" do\n    pending\n  end\nend\n\ndescribe
        MyClass do\n  xit \"should be true\" do\n  end\nend\n\n# good\ndescribe MyClass
        do\nend\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Pending\n\n==
        RSpec/PredicateMatcher\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| Yes (Unsafe)\n| 1.16\n|
        -\n|===\n\nPrefer using predicate matcher over using predicate method directly.\n\nRSpec
        defines magic matchers for predicate methods.\nThis cop recommends to use
        the predicate matcher instead of using\npredicate method directly.\n\n===
        Examples\n\n==== Strict: true, EnforcedStyle: inflected (default)\n\n[source,ruby]\n----\n#
        bad\nexpect(foo.something?).to be_truthy\n\n# good\nexpect(foo).to be_something\n\n#
        also good - It checks \"true\" strictly.\nexpect(foo.something?).to be(true)\n----\n\n====
        Strict: false, EnforcedStyle: inflected\n\n[source,ruby]\n----\n# bad\nexpect(foo.something?).to
        be_truthy\nexpect(foo.something?).to be(true)\n\n# good\nexpect(foo).to be_something\n----\n\n====
        Strict: true, EnforcedStyle: explicit\n\n[source,ruby]\n----\n# bad\nexpect(foo).to
        be_something\n\n# good - the above code is rewritten to it by this cop\nexpect(foo.something?).to
        be(true)\n----\n\n==== Strict: false, EnforcedStyle: explicit\n\n[source,ruby]\n----\n#
        bad\nexpect(foo).to be_something\n\n# good - the above code is rewritten to
        it by this cop\nexpect(foo.something?).to be_truthy\n----\n\n=== Configurable
        attributes\n\n|===\n| Name | Default value | Configurable values\n\n| Strict\n|
        `true`\n| Boolean\n\n| EnforcedStyle\n| `inflected`\n| `inflected`, `explicit`\n\n|
        AllowedExplicitMatchers\n| `[]`\n| Array\n|===\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/PredicateMatcher\n\n==
        RSpec/ReceiveCounts\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| Yes\n| 1.26\n| -\n|===\n\nCheck
        for `once` and `twice` receive counts matchers usage.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nexpect(foo).to receive(:bar).exactly(1).times\nexpect(foo).to receive(:bar).exactly(2).times\nexpect(foo).to
        receive(:bar).at_least(1).times\nexpect(foo).to receive(:bar).at_least(2).times\nexpect(foo).to
        receive(:bar).at_most(1).times\nexpect(foo).to receive(:bar).at_most(2).times\n\n#
        good\nexpect(foo).to receive(:bar).once\nexpect(foo).to receive(:bar).twice\nexpect(foo).to
        receive(:bar).at_least(:once)\nexpect(foo).to receive(:bar).at_least(:twice)\nexpect(foo).to
        receive(:bar).at_most(:once)\nexpect(foo).to receive(:bar).at_most(:twice).times\n----\n\n===
        References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ReceiveCounts\n\n==
        RSpec/ReceiveNever\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| Yes\n| 1.28\n| -\n|===\n\nPrefer
        `not_to receive(...)` over `receive(...).never`.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nexpect(foo).to receive(:bar).never\n\n# good\nexpect(foo).not_to receive(:bar)\n----\n\n===
        References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ReceiveNever\n\n==
        RSpec/RepeatedDescription\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n|
        1.9\n| -\n|===\n\nCheck for repeated description strings in example groups.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\nRSpec.describe User do\n  it 'is valid'
        do\n    # ...\n  end\n\n  it 'is valid' do\n    # ...\n  end\nend\n\n# good\nRSpec.describe
        User do\n  it 'is valid when first and last name are present' do\n    # ...\n
        \ end\n\n  it 'is valid when last name only is present' do\n    # ...\n  end\nend\n\n#
        good\nRSpec.describe User do\n  it 'is valid' do\n    # ...\n  end\n\n  it
        'is valid', :flag do\n    # ...\n  end\nend\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/RepeatedDescription\n\n==
        RSpec/RepeatedExample\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n| 1.10\n| -\n|===\n\nCheck
        for repeated examples within example groups.\n\n=== Examples\n\n[source,ruby]\n----\nit
        'is valid' do\n  expect(user).to be_valid\nend\n\nit 'validates the user'
        do\n  expect(user).to be_valid\nend\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/RepeatedExample\n\n==
        RSpec/RepeatedExampleGroupBody\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n|
        1.38\n| -\n|===\n\nCheck for repeated describe and context block body.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\ndescribe 'cool feature x' do\n  it
        { cool_predicate }\nend\n\ndescribe 'cool feature y' do\n  it { cool_predicate
        }\nend\n\n# good\ndescribe 'cool feature' do\n  it { cool_predicate }\nend\n\ndescribe
        'another cool feature' do\n  it { another_predicate }\nend\n\n# good\ncontext
        'when case x', :tag do\n  it { cool_predicate }\nend\n\ncontext 'when case
        y' do\n  it { cool_predicate }\nend\n\n# good\ncontext Array do\n  it { is_expected.to
        respond_to :each }\nend\n\ncontext Hash do\n  it { is_expected.to respond_to
        :each }\nend\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/RepeatedExampleGroupBody\n\n==
        RSpec/RepeatedExampleGroupDescription\n\n|===\n| Enabled by default | Safe
        | Supports autocorrection | VersionAdded | VersionChanged\n\n| Enabled\n|
        Yes\n| No\n| 1.38\n| -\n|===\n\nCheck for repeated example group descriptions.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\ndescribe 'cool feature' do\n  # example
        group\nend\n\ndescribe 'cool feature' do\n  # example group\nend\n\n# bad\ncontext
        'when case x' do\n  # example group\nend\n\ndescribe 'when case x' do\n  #
        example group\nend\n\n# good\ndescribe 'cool feature' do\n  # example group\nend\n\ndescribe
        'another cool feature' do\n  # example group\nend\n\n# good\ncontext 'when
        case x' do\n  # example group\nend\n\ncontext 'when another case' do\n  #
        example group\nend\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/RepeatedExampleGroupDescription\n\n==
        RSpec/RepeatedIncludeExample\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n|
        1.44\n| -\n|===\n\nCheck for repeated include of shared examples.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\ndescribe 'foo' do\n  include_examples 'cool stuff'\n  include_examples
        'cool stuff'\nend\n\n# bad\ndescribe 'foo' do\n  it_behaves_like 'a cool',
        'thing'\n  it_behaves_like 'a cool', 'thing'\nend\n\n# bad\ncontext 'foo'
        do\n  it_should_behave_like 'a duck'\n  it_should_behave_like 'a duck'\nend\n\n#
        good\ndescribe 'foo' do\n  include_examples 'cool stuff'\nend\n\ndescribe
        'bar' do\n  include_examples 'cool stuff'\nend\n\n# good\ndescribe 'foo' do\n
        \ it_behaves_like 'a cool', 'thing'\n  it_behaves_like 'a cool', 'person'\nend\n\n#
        good\ncontext 'foo' do\n  it_should_behave_like 'a duck'\n  it_should_behave_like
        'a goose'\nend\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/RepeatedIncludeExample\n\n==
        RSpec/ReturnFromStub\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| Yes\n| 1.16\n| 1.22\n|===\n\nChecks
        for consistent style of stub's return setting.\n\nEnforces either `and_return`
        or block-style return in the cases\nwhere the returned value is constant.
        Ignores dynamic returned values\nare the result would be different\n\nThis
        cop can be configured using the `EnforcedStyle` option\n\n=== Examples\n\n====
        `EnforcedStyle: block`\n\n[source,ruby]\n----\n# bad\nallow(Foo).to receive(:bar).and_return(\"baz\")\nexpect(Foo).to
        receive(:bar).and_return(\"baz\")\n\n# good\nallow(Foo).to receive(:bar) {
        \"baz\" }\nexpect(Foo).to receive(:bar) { \"baz\" }\n# also good as the returned
        value is dynamic\nallow(Foo).to receive(:bar).and_return(bar.baz)\n----\n\n====
        `EnforcedStyle: and_return`\n\n[source,ruby]\n----\n# bad\nallow(Foo).to receive(:bar)
        { \"baz\" }\nexpect(Foo).to receive(:bar) { \"baz\" }\n\n# good\nallow(Foo).to
        receive(:bar).and_return(\"baz\")\nexpect(Foo).to receive(:bar).and_return(\"baz\")\n#
        also good as the returned value is dynamic\nallow(Foo).to receive(:bar) {
        bar.baz }\n----\n\n=== Configurable attributes\n\n|===\n| Name | Default value
        | Configurable values\n\n| EnforcedStyle\n| `and_return`\n| `and_return`,
        `block`\n|===\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ReturnFromStub\n\n==
        RSpec/ScatteredLet\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| Yes\n| 1.14\n| 1.39\n|===\n\nChecks
        for let scattered across the example group.\n\nGroup lets together\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\ndescribe Foo do\n  let(:foo) { 1 }\n
        \ subject { Foo }\n  let(:bar) { 2 }\n  before { prepare }\n  let!(:baz) {
        3 }\nend\n\n# good\ndescribe Foo do\n  subject { Foo }\n  before { prepare
        }\n  let(:foo) { 1 }\n  let(:bar) { 2 }\n  let!(:baz) { 3 }\nend\n----\n\n===
        References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ScatteredLet\n\n==
        RSpec/ScatteredSetup\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n| 1.10\n| -\n|===\n\nChecks
        for setup scattered across multiple hooks in an example group.\n\nUnify `before`,
        `after`, and `around` hooks when possible.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\ndescribe Foo do\n  before { setup1 }\n  before { setup2 }\nend\n\n# good\ndescribe
        Foo do\n  before do\n    setup1\n    setup2\n  end\nend\n----\n\n=== References\n\n*
        https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ScatteredSetup\n\n==
        RSpec/SharedContext\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| Yes\n| 1.13\n| -\n|===\n\nChecks
        for proper shared_context and shared_examples usage.\n\nIf there are no examples
        defined, use shared_context.\nIf there is no setup defined, use shared_examples.\n\n===
        Examples\n\n[source,ruby]\n----\n# bad\nRSpec.shared_context 'only examples
        here' do\n  it 'does x' do\n  end\n\n  it 'does y' do\n  end\nend\n\n# good\nRSpec.shared_examples
        'only examples here' do\n  it 'does x' do\n  end\n\n  it 'does y' do\n  end\nend\n----\n\n[source,ruby]\n----\n#
        bad\nRSpec.shared_examples 'only setup here' do\n  subject(:foo) { :bar }\n\n
        \ let(:baz) { :bazz }\n\n  before do\n    something\n  end\nend\n\n# good\nRSpec.shared_context
        'only setup here' do\n  subject(:foo) { :bar }\n\n  let(:baz) { :bazz }\n\n
        \ before do\n    something\n  end\nend\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/SharedContext\n\n==
        RSpec/SharedExamples\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| Yes\n| 1.25\n| -\n|===\n\nEnforces
        use of string to titleize shared examples.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nit_behaves_like :foo_bar_baz\nit_should_behave_like :foo_bar_baz\nshared_examples
        :foo_bar_baz\nshared_examples_for :foo_bar_baz\ninclude_examples :foo_bar_baz\n\n#
        good\nit_behaves_like 'foo bar baz'\nit_should_behave_like 'foo bar baz'\nshared_examples
        'foo bar baz'\nshared_examples_for 'foo bar baz'\ninclude_examples 'foo bar
        baz'\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/SharedExamples\n\n==
        RSpec/SingleArgumentMessageChain\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| Yes\n|
        1.9\n| 1.10\n|===\n\nChecks that chains of messages contain more than one
        element.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\nallow(foo).to receive_message_chain(:bar).and_return(42)\n\n#
        good\nallow(foo).to receive(:bar).and_return(42)\n\n# also good\nallow(foo).to
        receive(:bar, :baz)\nallow(foo).to receive(\"bar.baz\")\n----\n\n=== References\n\n*
        https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/SingleArgumentMessageChain\n\n==
        RSpec/StubbedMock\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n| 1.44\n| -\n|===\n\nChecks
        that message expectations do not have a configured response.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nexpect(foo).to receive(:bar).with(42).and_return(\"hello world\")\n\n#
        good (without spies)\nallow(foo).to receive(:bar).with(42).and_return(\"hello
        world\")\nexpect(foo).to receive(:bar).with(42)\n----\n\n=== References\n\n*
        https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/StubbedMock\n\n==
        RSpec/SubjectStub\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n| 1.7\n| -\n|===\n\nChecks
        for stubbed test subjects.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\ndescribe
        Article do\n  subject(:article) { Article.new }\n\n  it 'indicates that the
        author is unknown' do\n    allow(article).to receive(:author).and_return(nil)\n
        \   expect(article.description).to include('by an unknown author')\n  end\nend\n\n#
        good\ndescribe Article do\n  subject(:article) { Article.new(author: nil)
        }\n\n  it 'indicates that the author is unknown' do\n    expect(article.description).to
        include('by an unknown author')\n  end\nend\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/SubjectStub\n\n==
        RSpec/UnspecifiedException\n\n|===\n| Enabled by default | Safe | Supports
        autocorrection | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n|
        1.30\n| -\n|===\n\nChecks for a specified error in checking raised errors.\n\nEnforces
        one of an Exception type, a string, or a regular\nexpression to match against
        the exception message as a parameter\nto `raise_error`\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nexpect {\n  raise StandardError.new('error')\n}.to raise_error\n\n# good\nexpect
        {\n  raise StandardError.new('error')\n}.to raise_error(StandardError)\n\nexpect
        {\n  raise StandardError.new('error')\n}.to raise_error('error')\n\nexpect
        {\n  raise StandardError.new('error')\n}.to raise_error(/err/)\n\nexpect {
        do_something }.not_to raise_error\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/UnspecifiedException\n\n==
        RSpec/VariableDefinition\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n| 1.40\n| -\n|===\n\nChecks
        that memoized helpers names are symbols or strings.\n\n=== Examples\n\n====
        EnforcedStyle: symbols (default)\n\n[source,ruby]\n----\n# bad\nsubject('user')
        { create_user }\nlet('user_name') { 'Adam' }\n\n# good\nsubject(:user) { create_user
        }\nlet(:user_name) { 'Adam' }\n----\n\n==== EnforcedStyle: strings\n\n[source,ruby]\n----\n#
        bad\nsubject(:user) { create_user }\nlet(:user_name) { 'Adam' }\n\n# good\nsubject('user')
        { create_user }\nlet('user_name') { 'Adam' }\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| EnforcedStyle\n| `symbols`\n|
        `symbols`, `strings`\n|===\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/VariableDefinition\n\n==
        RSpec/VariableName\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n| 1.40\n| 1.43\n|===\n\nChecks
        that memoized helper names use the configured style.\n\nVariables can be excluded
        from checking using the `IgnoredPatterns`\noption.\n\n=== Examples\n\n====
        EnforcedStyle: snake_case (default)\n\n[source,ruby]\n----\n# bad\nsubject(:userName1)
        { 'Adam' }\nlet(:userName2) { 'Adam' }\n\n# good\nsubject(:user_name_1) {
        'Adam' }\nlet(:user_name_2) { 'Adam' }\n----\n\n==== EnforcedStyle: camelCase\n\n[source,ruby]\n----\n#
        bad\nsubject(:user_name_1) { 'Adam' }\nlet(:user_name_2) { 'Adam' }\n\n# good\nsubject(:userName1)
        { 'Adam' }\nlet(:userName2) { 'Adam' }\n----\n\n==== IgnoredPatterns configuration\n\n[source,ruby]\n----\n#
        rubocop.yml\n# RSpec/VariableName:\n#   EnforcedStyle: snake_case\n#   IgnoredPatterns:\n#
        \    - ^userFood\n----\n\n[source,ruby]\n----\n# okay because it matches the
        `^userFood` regex in `IgnoredPatterns`\nsubject(:userFood_1) { 'spaghetti'
        }\nlet(:userFood_2) { 'fettuccine' }\n----\n\n=== Configurable attributes\n\n|===\n|
        Name | Default value | Configurable values\n\n| EnforcedStyle\n| `snake_case`\n|
        `snake_case`, `camelCase`\n\n| IgnoredPatterns\n| `[]`\n| Array\n|===\n\n===
        References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/VariableName\n\n==
        RSpec/VerifiedDoubles\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n| 1.2.1\n| 1.5\n|===\n\nPrefer
        using verifying doubles over normal doubles.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nlet(:foo) do\n  double(method_name: 'returned value')\nend\n\n# bad\nlet(:foo)
        do\n  double(\"ClassName\", method_name: 'returned value')\nend\n\n# good\nlet(:foo)
        do\n  instance_double(\"ClassName\", method_name: 'returned value')\nend\n----\n\n===
        Configurable attributes\n\n|===\n| Name | Default value | Configurable values\n\n|
        IgnoreNameless\n| `true`\n| Boolean\n\n| IgnoreSymbolicNames\n| `false`\n|
        Boolean\n|===\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/VerifiedDoubles\n\n==
        RSpec/VoidExpect\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| No\n| 1.16\n| -\n|===\n\nThis
        cop checks void `expect()`.\n\n=== Examples\n\n[source,ruby]\n----\n# bad\nexpect(something)\n\n#
        good\nexpect(something).to be(1)\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/VoidExpect\n\n==
        RSpec/Yield\n\n|===\n| Enabled by default | Safe | Supports autocorrection
        | VersionAdded | VersionChanged\n\n| Enabled\n| Yes\n| Yes\n| 1.32\n| -\n|===\n\nThis
        cop checks for calling a block within a stub.\n\n=== Examples\n\n[source,ruby]\n----\n#
        bad\nallow(foo).to receive(:bar) { |&block| block.call(1) }\n\n# good\nexpect(foo).to
        be(:bar).and_yield(1)\n----\n\n=== References\n\n* https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Yield\n"
  recorded_at: Wed, 02 Jun 2021 08:24:38 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-rspec/v2.3.0/docs/modules/ROOT/pages/cops_rspec/capybara.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '1289'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"f35dd19a2bef059679409603d8bbcb612ccd8bb62b213314ed59a651c70f265d"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 4CC2:2324:3EFEEB:4F624A:60B74047
      Accept-Ranges:
      - bytes
      Date:
      - Wed, 02 Jun 2021 08:24:39 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-mel11275-MEL
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1622622279.015061,VS0,VE300
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 180fea62208d9cce0ca72bacce0f8bb692f937f2
      Expires:
      - Wed, 02 Jun 2021 08:29:39 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        = RSpec/Capybara

        == RSpec/Capybara/CurrentPathExpectation

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 1.18
        | 2.0
        |===

        Checks that no expectations are set on Capybara's `current_path`.

        The `have_current_path` matcher (https://www.rubydoc.info/github/
        teamcapybara/capybara/master/Capybara/RSpecMatchers#have_current_path-
        instance_method) should be used on `page` to set expectations on
        Capybara's current path, since it uses Capybara's waiting
        functionality (https://github.com/teamcapybara/capybara/blob/master/
        README.md#asynchronous-javascript-ajax-and-friends) which ensures that
        preceding actions (like `click_link`) have completed.

        === Examples

        [source,ruby]
        ----
        # bad
        expect(current_path).to eq('/callback')
        expect(page.current_path).to match(/widgets/)

        # good
        expect(page).to have_current_path("/callback")
        expect(page).to have_current_path(/widgets/)
        ----

        === References

        * https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Capybara/CurrentPathExpectation

        == RSpec/Capybara/FeatureMethods

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 1.17
        | 2.0
        |===

        Checks for consistent method usage in feature specs.

        By default, the cop disables all Capybara-specific methods that have
        the same native RSpec method (e.g. are just aliases). Some teams
        however may prefer using some of the Capybara methods (like `feature`)
        to make it obvious that the test uses Capybara, while still disable
        the rest of the methods, like `given` (alias for `let`), `background`
        (alias for `before`), etc. You can configure which of the methods to
        be enabled by using the EnabledMethods configuration option.

        === Examples

        [source,ruby]
        ----
        # bad
        feature 'User logs in' do
          given(:user) { User.new }

          background do
            visit new_session_path
          end

          scenario 'with OAuth' do
            # ...
          end
        end

        # good
        describe 'User logs in' do
          let(:user) { User.new }

          before do
            visit new_session_path
          end

          it 'with OAuth' do
            # ...
          end
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | EnabledMethods
        | `[]`
        | Array
        |===

        === References

        * https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Capybara/FeatureMethods

        == RSpec/Capybara/VisibilityMatcher

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | No
        | 1.39
        | 2.0
        |===

        Checks for boolean visibility in capybara finders.

        Capybara lets you find elements that match a certain visibility using
        the `:visible` option. `:visible` accepts both boolean and symbols as
        values, however using booleans can have unwanted effects. `visible:
        false` does not find just invisible elements, but both visible and
        invisible elements. For expressiveness and clarity, use one of the
        symbol values, `:all`, `:hidden` or `:visible`.
        (https://www.rubydoc.info/gems/capybara/Capybara%2FNode%2FFinders:all)

        === Examples

        [source,ruby]
        ----
        # bad
        expect(page).to have_selector('.foo', visible: false)
        expect(page).to have_css('.foo', visible: true)
        expect(page).to have_link('my link', visible: false)

        # good
        expect(page).to have_selector('.foo', visible: :visible)
        expect(page).to have_css('.foo', visible: :all)
        expect(page).to have_link('my link', visible: :hidden)
        ----

        === References

        * https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Capybara/VisibilityMatcher
  recorded_at: Wed, 02 Jun 2021 08:24:39 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-rspec/v2.3.0/docs/modules/ROOT/pages/cops_rspec/factorybot.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '830'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"92e8a4902c9b8aea887aae59e038371dcf4f013e0524dca6468fc4debc77ea6b"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - B954:2324:3EFF05:4F6261:60B74047
      Accept-Ranges:
      - bytes
      Date:
      - Wed, 02 Jun 2021 08:24:39 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-mel11259-MEL
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1622622280.528038,VS0,VE362
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 17070b47e83e2ceff7c3fce2b9f21af912c54020
      Expires:
      - Wed, 02 Jun 2021 08:29:39 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        = RSpec/FactoryBot

        == RSpec/FactoryBot/AttributeDefinedStatically

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 1.28
        | 2.0
        |===

        Always declare attribute values as blocks.

        === Examples

        [source,ruby]
        ----
        # bad
        kind [:active, :rejected].sample

        # good
        kind { [:active, :rejected].sample }

        # bad
        closed_at 1.day.from_now

        # good
        closed_at { 1.day.from_now }

        # bad
        count 1

        # good
        count { 1 }
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `spec/factories.rb`, `spec/factories/**/*.rb`, `features/support/factories/**/*.rb`
        | Array
        |===

        === References

        * https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/FactoryBot/AttributeDefinedStatically

        == RSpec/FactoryBot/CreateList

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 1.25
        | 2.0
        |===

        Checks for create_list usage.

        This cop can be configured using the `EnforcedStyle` option

        === Examples

        ==== `EnforcedStyle: create_list`

        [source,ruby]
        ----
        # bad
        3.times { create :user }

        # good
        create_list :user, 3

        # good
        3.times { |n| create :user, created_at: n.months.ago }
        ----

        ==== `EnforcedStyle: n_times`

        [source,ruby]
        ----
        # bad
        create_list :user, 3

        # good
        3.times { create :user }
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `+**/*_spec.rb+`, `+**/spec/**/*+`, `spec/factories.rb`, `spec/factories/**/*.rb`, `features/support/factories/**/*.rb`
        | Array

        | EnforcedStyle
        | `create_list`
        | `create_list`, `n_times`
        |===

        === References

        * https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/FactoryBot/CreateList

        == RSpec/FactoryBot/FactoryClassName

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 1.37
        | 2.0
        |===

        Use string value when setting the class attribute explicitly.

        This cop would promote faster tests by lazy-loading of
        application files. Also, this could help you suppress potential bugs
        in combination with external libraries by avoiding a preload of
        application files from the factory files.

        === Examples

        [source,ruby]
        ----
        # bad
        factory :foo, class: Foo do
        end

        # good
        factory :foo, class: 'Foo' do
        end
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | Include
        | `spec/factories.rb`, `spec/factories/**/*.rb`, `features/support/factories/**/*.rb`
        | Array
        |===

        === References

        * https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/FactoryBot/FactoryClassName
  recorded_at: Wed, 02 Jun 2021 08:24:39 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-rspec/v2.3.0/docs/modules/ROOT/pages/cops_rspec/rails.adoc
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '441'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"4f383c9c833e3eb854b72f8aa610fa255010873dcb91d1507690a68f4655729b"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - D8F8:2323:124B9A:22A4A3:60B74048
      Accept-Ranges:
      - bytes
      Date:
      - Wed, 02 Jun 2021 08:24:40 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-syd10130-SYD
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1622622280.082685,VS0,VE286
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - ad4215096c5c3cd7ce362c0f3d6b42dcd3f76788
      Expires:
      - Wed, 02 Jun 2021 08:29:40 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        = RSpec/Rails

        == RSpec/Rails/HttpStatus

        |===
        | Enabled by default | Safe | Supports autocorrection | VersionAdded | VersionChanged

        | Enabled
        | Yes
        | Yes
        | 1.23
        | 2.0
        |===

        Enforces use of symbolic or numeric value to describe HTTP status.

        === Examples

        ==== `EnforcedStyle: symbolic` (default)

        [source,ruby]
        ----
        # bad
        it { is_expected.to have_http_status 200 }
        it { is_expected.to have_http_status 404 }

        # good
        it { is_expected.to have_http_status :ok }
        it { is_expected.to have_http_status :not_found }
        it { is_expected.to have_http_status :success }
        it { is_expected.to have_http_status :error }
        ----

        ==== `EnforcedStyle: numeric`

        [source,ruby]
        ----
        # bad
        it { is_expected.to have_http_status :ok }
        it { is_expected.to have_http_status :not_found }

        # good
        it { is_expected.to have_http_status 200 }
        it { is_expected.to have_http_status 404 }
        it { is_expected.to have_http_status :success }
        it { is_expected.to have_http_status :error }
        ----

        === Configurable attributes

        |===
        | Name | Default value | Configurable values

        | EnforcedStyle
        | `symbolic`
        | `numeric`, `symbolic`
        |===

        === References

        * https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Rails/HttpStatus
  recorded_at: Wed, 02 Jun 2021 08:24:40 GMT
- request:
    method: get
    uri: https://raw.githubusercontent.com/rubocop/rubocop-rspec/v2.3.0/config/default.yml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '4238'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"711ef13c69644d92924fe08a5330cd9d217e8db8df7fa7324c856f2aa4a9cd54"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - 742A:7B05:25D022:2F376D:60B74048
      Accept-Ranges:
      - bytes
      Date:
      - Wed, 02 Jun 2021 08:24:40 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-syd10124-SYD
      X-Cache:
      - MISS
      X-Cache-Hits:
      - '0'
      X-Timer:
      - S1622622281.542328,VS0,VE284
      Vary:
      - Authorization,Accept-Encoding
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - cc9ffc321f9958a68a702b085b1024276f857c76
      Expires:
      - Wed, 02 Jun 2021 08:29:40 GMT
      Source-Age:
      - '0'
    body:
      encoding: ASCII-8BIT
      string: |
        ---
        RSpec:
          Enabled: true
          Include:
            - "**/*_spec.rb"
            - "**/spec/**/*"
          Language:
            ExampleGroups:
              Regular:
                - describe
                - context
                - feature
                - example_group
              Skipped:
                - xdescribe
                - xcontext
                - xfeature
              Focused:
                - fdescribe
                - fcontext
                - ffeature
            Examples:
              Regular:
                - it
                - specify
                - example
                - scenario
                - its
              Focused:
                - fit
                - fspecify
                - fexample
                - fscenario
                - focus
              Skipped:
                - xit
                - xspecify
                - xexample
                - xscenario
                - skip
              Pending:
                - pending
            Expectations:
              - expect
              - is_expected
              - expect_any_instance_of
            Helpers:
              - let
              - let!
            Hooks:
              - prepend_before
              - before
              - append_before
              - around
              - prepend_after
              - after
              - append_after
            HookScopes:
              - each
              - example
              - context
              - all
              - suite
            Includes:
              Examples:
                - it_behaves_like
                - it_should_behave_like
                - include_examples
              Context:
                - include_context
            Runners:
              - to
              - to_not
              - not_to
            SharedGroups:
              Examples:
                - shared_examples
                - shared_examples_for
              Context:
                - shared_context
            Subjects:
              - subject
              - subject!

        RSpec/AlignLeftLetBrace:
          Description: Checks that left braces for adjacent single line lets are aligned.
          Enabled: false
          VersionAdded: '1.16'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/AlignLeftLetBrace

        RSpec/AlignRightLetBrace:
          Description: Checks that right braces for adjacent single line lets are aligned.
          Enabled: false
          VersionAdded: '1.16'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/AlignRightLetBrace

        RSpec/AnyInstance:
          Description: Check that instances are not being stubbed globally.
          Enabled: true
          VersionAdded: '1.4'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/AnyInstance

        RSpec/AroundBlock:
          Description: Checks that around blocks actually run the test.
          Enabled: true
          VersionAdded: '1.11'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/AroundBlock

        RSpec/Be:
          Description: Check for expectations where `be` is used without argument.
          Enabled: true
          VersionAdded: '1.25'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Be

        RSpec/BeEql:
          Description: Check for expectations where `be(...)` can replace `eql(...)`.
          Enabled: true
          VersionAdded: '1.7'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/BeEql

        RSpec/BeforeAfterAll:
          Description: Check that before/after(:all) isn't being used.
          Enabled: true
          Exclude:
            - spec/spec_helper.rb
            - spec/rails_helper.rb
            - spec/support/**/*.rb
          VersionAdded: '1.12'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/BeforeAfterAll

        RSpec/ContextMethod:
          Description: "`context` should not be used for specifying methods."
          Enabled: true
          VersionAdded: '1.36'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ContextMethod

        RSpec/ContextWording:
          Description: Checks that `context` docstring starts with an allowed prefix.
          Enabled: true
          Prefixes:
            - when
            - with
            - without
          VersionAdded: '1.20'
          VersionChanged: 1.20.1
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ContextWording

        RSpec/DescribeClass:
          Description: Check that the first argument to the top-level describe is a constant.
          Enabled: true
          IgnoredMetadata:
            type:
              - channel
              - controller
              - helper
              - job
              - mailer
              - model
              - request
              - routing
              - view
              - feature
              - system
              - mailbox
              - aruba
          VersionAdded: '1.0'
          VersionChanged: '1.44'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/DescribeClass

        RSpec/DescribeMethod:
          Description: Checks that the second argument to `describe` specifies a method.
          Enabled: true
          VersionAdded: '1.0'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/DescribeMethod

        RSpec/DescribeSymbol:
          Description: Avoid describing symbols.
          Enabled: true
          VersionAdded: '1.15'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/DescribeSymbol

        RSpec/DescribedClass:
          Description: Checks that tests use `described_class`.
          Enabled: true
          SkipBlocks: false
          EnforcedStyle: described_class
          SupportedStyles:
            - described_class
            - explicit
          SafeAutoCorrect: false
          VersionAdded: '1.0'
          VersionChanged: '1.11'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/DescribedClass

        RSpec/DescribedClassModuleWrapping:
          Description: Avoid opening modules and defining specs within them.
          Enabled: false
          VersionAdded: '1.37'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/DescribedClassModuleWrapping

        RSpec/Dialect:
          Description: This cop enforces custom RSpec dialects.
          Enabled: false
          PreferredMethods: {}
          VersionAdded: '1.33'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Dialect

        RSpec/EmptyExampleGroup:
          Description: Checks if an example group does not include any tests.
          Enabled: true
          VersionAdded: '1.7'
          VersionChanged: '2.0'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/EmptyExampleGroup

        RSpec/EmptyHook:
          Description: Checks for empty before and after hooks.
          Enabled: true
          VersionAdded: '1.39'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/EmptyHook

        RSpec/EmptyLineAfterExample:
          Description: Checks if there is an empty line after example blocks.
          Enabled: true
          AllowConsecutiveOneLiners: true
          VersionAdded: '1.36'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/EmptyLineAfterExample

        RSpec/EmptyLineAfterExampleGroup:
          Description: Checks if there is an empty line after example group blocks.
          Enabled: true
          VersionAdded: '1.27'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/EmptyLineAfterExampleGroup

        RSpec/EmptyLineAfterFinalLet:
          Description: Checks if there is an empty line after the last let block.
          Enabled: true
          VersionAdded: '1.14'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/EmptyLineAfterFinalLet

        RSpec/EmptyLineAfterHook:
          Description: Checks if there is an empty line after hook blocks.
          Enabled: true
          VersionAdded: '1.27'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/EmptyLineAfterHook

        RSpec/EmptyLineAfterSubject:
          Description: Checks if there is an empty line after subject block.
          Enabled: true
          VersionAdded: '1.14'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/EmptyLineAfterSubject

        RSpec/ExampleLength:
          Description: Checks for long examples.
          Enabled: true
          Max: 5
          CountAsOne: []
          VersionAdded: '1.5'
          VersionChanged: '2.3'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ExampleLength

        RSpec/ExampleWithoutDescription:
          Description: Checks for examples without a description.
          Enabled: true
          EnforcedStyle: always_allow
          SupportedStyles:
            - always_allow
            - single_line_only
            - disallow
          VersionAdded: '1.22'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ExampleWithoutDescription

        RSpec/ExampleWording:
          Description: Checks for common mistakes in example descriptions.
          Enabled: true
          CustomTransform:
            be: is
            BE: IS
            have: has
            HAVE: HAS
          IgnoredWords: []
          VersionAdded: '1.0'
          VersionChanged: '1.2'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ExampleWording

        RSpec/ExpectActual:
          Description: Checks for `expect(...)` calls containing literal values.
          Enabled: true
          Exclude:
            - spec/routing/**/*
          VersionAdded: '1.7'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ExpectActual

        RSpec/ExpectChange:
          Description: Checks for consistent style of change matcher.
          Enabled: true
          EnforcedStyle: method_call
          SupportedStyles:
            - method_call
            - block
          VersionAdded: '1.22'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ExpectChange

        RSpec/ExpectInHook:
          Description: Do not use `expect` in hooks such as `before`.
          Enabled: true
          VersionAdded: '1.16'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ExpectInHook

        RSpec/ExpectOutput:
          Description: Checks for opportunities to use `expect { ... }.to output`.
          Enabled: true
          VersionAdded: '1.10'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ExpectOutput

        RSpec/FilePath:
          Description: Checks that spec file paths are consistent and well-formed.
          Enabled: true
          Include:
            - "**/*_spec*rb*"
            - "**/spec/**/*"
          CustomTransform:
            RuboCop: rubocop
            RSpec: rspec
          IgnoreMethods: false
          SpecSuffixOnly: false
          VersionAdded: '1.2'
          VersionChanged: '1.40'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/FilePath

        RSpec/Focus:
          Description: Checks if examples are focused.
          Enabled: true
          VersionAdded: '1.5'
          VersionChanged: '2.1'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Focus

        RSpec/HookArgument:
          Description: Checks the arguments passed to `before`, `around`, and `after`.
          Enabled: true
          EnforcedStyle: implicit
          SupportedStyles:
            - implicit
            - each
            - example
          VersionAdded: '1.7'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/HookArgument

        RSpec/HooksBeforeExamples:
          Description: Checks for before/around/after hooks that come after an example.
          Enabled: true
          VersionAdded: '1.29'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/HooksBeforeExamples

        RSpec/ImplicitBlockExpectation:
          Description: Check that implicit block expectation syntax is not used.
          Enabled: true
          VersionAdded: '1.35'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ImplicitBlockExpectation

        RSpec/ImplicitExpect:
          Description: Check that a consistent implicit expectation style is used.
          Enabled: true
          EnforcedStyle: is_expected
          SupportedStyles:
            - is_expected
            - should
          VersionAdded: '1.8'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ImplicitExpect

        RSpec/ImplicitSubject:
          Description: Checks for usage of implicit subject (`is_expected` / `should`).
          Enabled: true
          EnforcedStyle: single_line_only
          SupportedStyles:
            - single_line_only
            - single_statement_only
            - disallow
          VersionAdded: '1.29'
          VersionChanged: '1.30'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ImplicitSubject

        RSpec/InstanceSpy:
          Description: Checks for `instance_double` used with `have_received`.
          Enabled: true
          VersionAdded: '1.12'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/InstanceSpy

        RSpec/InstanceVariable:
          Description: Checks for instance variable usage in specs.
          Enabled: true
          AssignmentOnly: false
          VersionAdded: '1.0'
          VersionChanged: '1.7'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/InstanceVariable

        RSpec/ItBehavesLike:
          Description: Checks that only one `it_behaves_like` style is used.
          Enabled: true
          EnforcedStyle: it_behaves_like
          SupportedStyles:
            - it_behaves_like
            - it_should_behave_like
          VersionAdded: '1.13'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ItBehavesLike

        RSpec/IteratedExpectation:
          Description: Check that `all` matcher is used instead of iterating over an array.
          Enabled: true
          VersionAdded: '1.14'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/IteratedExpectation

        RSpec/LeadingSubject:
          Description: Enforce that subject is the first definition in the test.
          Enabled: true
          VersionAdded: '1.7'
          VersionChanged: '1.14'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/LeadingSubject

        RSpec/LeakyConstantDeclaration:
          Description: Checks that no class, module, or constant is declared.
          Enabled: true
          VersionAdded: '1.35'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/LeakyConstantDeclaration

        RSpec/LetBeforeExamples:
          Description: Checks for `let` definitions that come after an example.
          Enabled: true
          VersionAdded: '1.16'
          VersionChanged: '1.22'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/LetBeforeExamples

        RSpec/LetSetup:
          Description: Checks unreferenced `let!` calls being used for test setup.
          Enabled: true
          VersionAdded: '1.7'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/LetSetup

        RSpec/MessageChain:
          Description: Check that chains of messages are not being stubbed.
          Enabled: true
          VersionAdded: '1.7'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/MessageChain

        RSpec/MessageExpectation:
          Description: Checks for consistent message expectation style.
          Enabled: false
          EnforcedStyle: allow
          SupportedStyles:
            - allow
            - expect
          VersionAdded: '1.7'
          VersionChanged: '1.8'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/MessageExpectation

        RSpec/MessageSpies:
          Description: Checks that message expectations are set using spies.
          Enabled: true
          EnforcedStyle: have_received
          SupportedStyles:
            - have_received
            - receive
          VersionAdded: '1.9'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/MessageSpies

        RSpec/MissingExampleGroupArgument:
          Description: Checks that the first argument to an example group is not empty.
          Enabled: true
          VersionAdded: '1.28'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/MissingExampleGroupArgument

        RSpec/MultipleDescribes:
          Description: Checks for multiple top-level example groups.
          Enabled: true
          VersionAdded: '1.0'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/MultipleDescribes

        RSpec/MultipleExpectations:
          Description: Checks if examples contain too many `expect` calls.
          Enabled: true
          Max: 1
          VersionAdded: '1.7'
          VersionChanged: '1.21'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/MultipleExpectations

        RSpec/MultipleMemoizedHelpers:
          Description: Checks if example groups contain too many `let` and `subject` calls.
          Enabled: true
          AllowSubject: true
          Max: 5
          VersionAdded: '1.43'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/MultipleMemoizedHelpers

        RSpec/MultipleSubjects:
          Description: Checks if an example group defines `subject` multiple times.
          Enabled: true
          VersionAdded: '1.16'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/MultipleSubjects

        RSpec/NamedSubject:
          Description: Checks for explicitly referenced test subjects.
          Enabled: true
          IgnoreSharedExamples: true
          VersionAdded: 1.5.3
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/NamedSubject

        RSpec/NestedGroups:
          Description: Checks for nested example groups.
          Enabled: true
          Max: 3
          VersionAdded: '1.7'
          VersionChanged: '1.10'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/NestedGroups

        RSpec/NotToNot:
          Description: Checks for consistent method usage for negating expectations.
          Enabled: true
          EnforcedStyle: not_to
          SupportedStyles:
            - not_to
            - to_not
          VersionAdded: '1.4'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/NotToNot

        RSpec/OverwritingSetup:
          Description: Checks if there is a let/subject that overwrites an existing one.
          Enabled: true
          VersionAdded: '1.14'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/OverwritingSetup

        RSpec/Pending:
          Description: Checks for any pending or skipped examples.
          Enabled: false
          VersionAdded: '1.25'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Pending

        RSpec/PredicateMatcher:
          Description: Prefer using predicate matcher over using predicate method directly.
          Enabled: true
          Strict: true
          EnforcedStyle: inflected
          AllowedExplicitMatchers: []
          SupportedStyles:
            - inflected
            - explicit
          SafeAutoCorrect: false
          VersionAdded: '1.16'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/PredicateMatcher

        RSpec/ReceiveCounts:
          Description: Check for `once` and `twice` receive counts matchers usage.
          Enabled: true
          VersionAdded: '1.26'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ReceiveCounts

        RSpec/ReceiveNever:
          Description: Prefer `not_to receive(...)` over `receive(...).never`.
          Enabled: true
          VersionAdded: '1.28'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ReceiveNever

        RSpec/RepeatedDescription:
          Description: Check for repeated description strings in example groups.
          Enabled: true
          VersionAdded: '1.9'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/RepeatedDescription

        RSpec/RepeatedExample:
          Description: Check for repeated examples within example groups.
          Enabled: true
          VersionAdded: '1.10'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/RepeatedExample

        RSpec/RepeatedExampleGroupBody:
          Description: Check for repeated describe and context block body.
          Enabled: true
          VersionAdded: '1.38'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/RepeatedExampleGroupBody

        RSpec/RepeatedExampleGroupDescription:
          Description: Check for repeated example group descriptions.
          Enabled: true
          VersionAdded: '1.38'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/RepeatedExampleGroupDescription

        RSpec/RepeatedIncludeExample:
          Description: Check for repeated include of shared examples.
          Enabled: true
          VersionAdded: '1.44'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/RepeatedIncludeExample

        RSpec/ReturnFromStub:
          Description: Checks for consistent style of stub's return setting.
          Enabled: true
          EnforcedStyle: and_return
          SupportedStyles:
            - and_return
            - block
          VersionAdded: '1.16'
          VersionChanged: '1.22'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ReturnFromStub

        RSpec/ScatteredLet:
          Description: Checks for let scattered across the example group.
          Enabled: true
          VersionAdded: '1.14'
          VersionChanged: '1.39'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ScatteredLet

        RSpec/ScatteredSetup:
          Description: Checks for setup scattered across multiple hooks in an example group.
          Enabled: true
          VersionAdded: '1.10'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/ScatteredSetup

        RSpec/SharedContext:
          Description: Checks for proper shared_context and shared_examples usage.
          Enabled: true
          VersionAdded: '1.13'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/SharedContext

        RSpec/SharedExamples:
          Description: Enforces use of string to titleize shared examples.
          Enabled: true
          VersionAdded: '1.25'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/SharedExamples

        RSpec/SingleArgumentMessageChain:
          Description: Checks that chains of messages contain more than one element.
          Enabled: true
          VersionAdded: '1.9'
          VersionChanged: '1.10'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/SingleArgumentMessageChain

        RSpec/StubbedMock:
          Description: Checks that message expectations do not have a configured response.
          Enabled: true
          VersionAdded: '1.44'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/StubbedMock

        RSpec/SubjectStub:
          Description: Checks for stubbed test subjects.
          Enabled: true
          VersionAdded: '1.7'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/SubjectStub

        RSpec/UnspecifiedException:
          Description: Checks for a specified error in checking raised errors.
          Enabled: true
          VersionAdded: '1.30'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/UnspecifiedException

        RSpec/VariableDefinition:
          Description: Checks that memoized helpers names are symbols or strings.
          Enabled: true
          EnforcedStyle: symbols
          SupportedStyles:
            - symbols
            - strings
          VersionAdded: '1.40'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/VariableDefinition

        RSpec/VariableName:
          Description: Checks that memoized helper names use the configured style.
          Enabled: true
          EnforcedStyle: snake_case
          SupportedStyles:
            - snake_case
            - camelCase
          IgnoredPatterns: []
          VersionAdded: '1.40'
          VersionChanged: '1.43'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/VariableName

        RSpec/VerifiedDoubles:
          Description: Prefer using verifying doubles over normal doubles.
          Enabled: true
          IgnoreNameless: true
          IgnoreSymbolicNames: false
          VersionAdded: 1.2.1
          VersionChanged: '1.5'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/VerifiedDoubles

        RSpec/VoidExpect:
          Description: This cop checks void `expect()`.
          Enabled: true
          VersionAdded: '1.16'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/VoidExpect

        RSpec/Yield:
          Description: This cop checks for calling a block within a stub.
          Enabled: true
          VersionAdded: '1.32'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Yield

        RSpec/Capybara/CurrentPathExpectation:
          Description: Checks that no expectations are set on Capybara's `current_path`.
          Enabled: true
          VersionAdded: '1.18'
          VersionChanged: '2.0'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Capybara/CurrentPathExpectation

        RSpec/Capybara/FeatureMethods:
          Description: Checks for consistent method usage in feature specs.
          Enabled: true
          EnabledMethods: []
          VersionAdded: '1.17'
          VersionChanged: '2.0'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Capybara/FeatureMethods

        RSpec/Capybara/VisibilityMatcher:
          Description: Checks for boolean visibility in capybara finders.
          Enabled: true
          VersionAdded: '1.39'
          VersionChanged: '2.0'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Capybara/VisibilityMatcher

        RSpec/FactoryBot/AttributeDefinedStatically:
          Description: Always declare attribute values as blocks.
          Enabled: true
          Include:
            - spec/factories.rb
            - spec/factories/**/*.rb
            - features/support/factories/**/*.rb
          VersionAdded: '1.28'
          VersionChanged: '2.0'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/FactoryBot/AttributeDefinedStatically

        RSpec/FactoryBot/CreateList:
          Description: Checks for create_list usage.
          Enabled: true
          Include:
            - "**/*_spec.rb"
            - "**/spec/**/*"
            - spec/factories.rb
            - spec/factories/**/*.rb
            - features/support/factories/**/*.rb
          EnforcedStyle: create_list
          SupportedStyles:
            - create_list
            - n_times
          VersionAdded: '1.25'
          VersionChanged: '2.0'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/FactoryBot/CreateList

        RSpec/FactoryBot/FactoryClassName:
          Description: Use string value when setting the class attribute explicitly.
          Enabled: true
          Include:
            - spec/factories.rb
            - spec/factories/**/*.rb
            - features/support/factories/**/*.rb
          VersionAdded: '1.37'
          VersionChanged: '2.0'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/FactoryBot/FactoryClassName

        RSpec/Rails/HttpStatus:
          Description: Enforces use of symbolic or numeric value to describe HTTP status.
          Enabled: true
          EnforcedStyle: symbolic
          SupportedStyles:
            - numeric
            - symbolic
          VersionAdded: '1.23'
          VersionChanged: '2.0'
          StyleGuide: https://www.rubydoc.info/gems/rubocop-rspec/RuboCop/Cop/RSpec/Rails/HttpStatus
  recorded_at: Wed, 02 Jun 2021 08:24:40 GMT
recorded_with: VCR 6.0.0
