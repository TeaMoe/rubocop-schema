{
  "$schema": "http://json-schema.org/draft-07/schema",
  "title": "RuboCop configuration schema",
  "description": "Schema for RuboCop configuration files (e.g. .rubocop.yml), intended for helping IDEs provide autocompletion and validation.",
  "type": "object",
  "additionalProperties": false,
  "definitions": {
    "inherit_mode": {
      "type": "object",
      "minProperties": 1,
      "propertyNames": {
        "enum": [
          "merge",
          "override"
        ]
      },
      "additionalProperties": {
        "type": "array",
        "minItems": 1,
        "items": {
          "type": "string"
        }
      }
    },
    "listOfFiles": {
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "severity": {
      "type": "string",
      "enum": [
        "info",
        "refactor",
        "convention",
        "warning",
        "error",
        "fatal"
      ]
    }
  },
  "properties": {
    "inherit_from": {
      "type": "string"
    },
    "inherit_gem": {
      "type": "object",
      "additionalProperties": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ]
      }
    },
    "inherit_mode": {
      "$ref": "#/definitions/inherit_mode"
    },
    "AllCops": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "NewCops": {
          "type": "boolean"
        },
        "EnabledByDefault": {
          "type": "boolean"
        },
        "DisabledByDefault": {
          "type": "boolean"
        },
        "SuggestExtensions": {
          "type": "boolean"
        },
        "TargetRubyVersion": {
          "type": "number"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      }
    },
    "Migration/DepartmentName": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_migration.html#migrationdepartmentname",
      "description": "Check that cop names in rubocop:disable comments are given with department name."
    },
    "Bundler/DuplicatedGem": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "description": "Default: **/*.gemfile, **/Gemfile, **/gems.rb",
          "type": "array"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_bundler.html#bundlerduplicatedgem",
      "description": "A Gem’s requirements should be listed only once in a Gemfile."
    },
    "Bundler/GemComment": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "description": "Default: **/*.gemfile, **/Gemfile, **/gems.rb",
          "type": "array"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "IgnoredGems": {
          "description": "Default: []",
          "type": "array"
        },
        "OnlyFor": {
          "description": "Default: []",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_bundler.html#bundlergemcomment",
      "description": "Each gem in the Gemfile should have a comment explaining its purpose in the project, or the reason for its version or source.\n\nThe optional \"OnlyFor\" configuration array can be used to only register offenses when the gems use certain options or have version specifiers.\n\nWhen \"version_specifiers\" is included, a comment will be enforced if the gem has any version specifier.\n\nWhen \"restrictive_version_specifiers\" is included, a comment will be enforced if the gem has a version specifier that holds back the version of the gem.\n\nFor any other value in the array, a comment will be enforced for a gem if an option by the same name is present. A useful use case is to enforce a comment when using options that change the source of a gem:\n\nFor a full list of options supported by bundler, see https://bundler.io/man/gemfile.5.html ."
    },
    "Bundler/InsecureProtocolSource": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "description": "Default: **/*.gemfile, **/Gemfile, **/gems.rb",
          "type": "array"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_bundler.html#bundlerinsecureprotocolsource",
      "description": "The symbol argument :gemcutter, :rubygems, and :rubyforge are deprecated. So please change your source to URL string that 'https://rubygems.org' if possible, or 'http://rubygems.org' if not.\n\nThis autocorrect will replace these symbols with 'https://rubygems.org'. Because it is secure, HTTPS request is strongly recommended. And in most use cases HTTPS will be fine.\n\nHowever, it don’t replace all sources of http:// with https://. For example, when specifying an internal gem server using HTTP on the intranet, a use case where HTTPS cannot be specified was considered. Consider using HTTP only if you cannot use HTTPS."
    },
    "Bundler/OrderedGems": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "description": "Default: **/*.gemfile, **/Gemfile, **/gems.rb",
          "type": "array"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "TreatCommentsAsGroupSeparators": {
          "description": "Default: true",
          "type": "boolean"
        },
        "ConsiderPunctuation": {
          "description": "Default: false",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_bundler.html#bundlerorderedgems",
      "description": "Gems should be alphabetically sorted within groups."
    },
    "Gemspec/DateAssignment": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "description": "Default: **/*.gemspec",
          "type": "array"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_gemspec.html#gemspecdateassignment",
      "description": "This cop checks that date = is not used in gemspec file. It is set automatically when the gem is packaged."
    },
    "Gemspec/DuplicatedAssignment": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "description": "Default: **/*.gemspec",
          "type": "array"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_gemspec.html#gemspecduplicatedassignment",
      "description": "An attribute assignment method calls should be listed only once in a gemspec.\n\nAssigning to an attribute with the same name using spec.foo = will be an unintended usage. On the other hand, duplication of methods such as spec.requirements, spec.add_runtime_dependency, and others are permitted because it is the intended use of appending values."
    },
    "Gemspec/OrderedDependencies": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "description": "Default: **/*.gemspec",
          "type": "array"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "TreatCommentsAsGroupSeparators": {
          "description": "Default: true",
          "type": "boolean"
        },
        "ConsiderPunctuation": {
          "description": "Default: false",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_gemspec.html#gemspecordereddependencies",
      "description": "Dependencies in the gemspec should be alphabetically sorted."
    },
    "Gemspec/RequiredRubyVersion": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "description": "Default: **/*.gemspec",
          "type": "array"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_gemspec.html#gemspecrequiredrubyversion",
      "description": "Checks that required_ruby_version of gemspec is specified and equal to TargetRubyVersion of .rubocop.yml. Thereby, RuboCop to perform static analysis working on the version required by gemspec."
    },
    "Gemspec/RubyVersionGlobalsUsage": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "description": "Default: **/*.gemspec",
          "type": "array"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_gemspec.html#gemspecrubyversionglobalsusage",
      "description": "Checks that RUBY_VERSION constant is not used in gemspec. Using RUBY_VERSION is dangerous because value of the constant is determined by rake release. It’s possible to have dependency based on ruby version used to execute rake release and not user’s ruby version."
    },
    "Layout/AccessModifierIndentation": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: indent"
        },
        "IndentationWidth": {
          "description": "Default: <none>",
          "type": "integer"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutaccessmodifierindentation",
      "description": "Bare access modifiers (those not applying to specific methods) should be indented as deep as method definitions, or as deep as the class/module keyword, depending on configuration."
    },
    "Layout/ArgumentAlignment": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: with_first_argument"
        },
        "IndentationWidth": {
          "description": "Default: <none>",
          "type": "integer"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutargumentalignment",
      "description": "Here we check if the arguments on a multi-line method definition are aligned."
    },
    "Layout/ArrayAlignment": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: with_first_element"
        },
        "IndentationWidth": {
          "description": "Default: <none>",
          "type": "integer"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutarrayalignment",
      "description": "Here we check if the elements of a multi-line array literal are aligned."
    },
    "Layout/AssignmentIndentation": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "IndentationWidth": {
          "description": "Default: <none>",
          "type": "integer"
        }
      },
      "$comment": null,
      "description": "This cop checks the indentation of the first line of the right-hand-side of a multi-line assignment.\n\nThe indentation of the remaining lines can be corrected with other cops such as IndentationConsistency and EndAlignment."
    },
    "Layout/BeginEndAlignment": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "description": "Default: warning",
          "type": "string"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyleAlignWith": {
          "description": "Default: start_of_line"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutbeginendalignment",
      "description": "This cop checks whether the end keyword of begin is aligned properly.\n\nTwo modes are supported through the EnforcedStyleAlignWith configuration parameter. If it’s set to start_of_line (which is the default), the end shall be aligned with the start of the line where the begin keyword is. If it’s set to begin, the end shall be aligned with the begin keyword.\n\nLayout/EndAlignment cop aligns with keywords (e.g. if, while, case) by default. On the other hand, ||= begin that this cop targets tends to align with the start of the line, it defaults to EnforcedStyleAlignWith: start_of_line. These style can be configured by each cop."
    },
    "Layout/BlockAlignment": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyleAlignWith": {
          "description": "Default: either"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutblockalignment",
      "description": "This cop checks whether the end keywords are aligned properly for do end blocks.\n\nThree modes are supported through the EnforcedStyleAlignWith configuration parameter:\n\nstart_of_block : the end shall be aligned with the start of the line where the do appeared.\n\nstart_of_line : the end shall be aligned with the start of the line where the expression started.\n\neither (which is the default) : the end is allowed to be in either location. The autofixer will default to start_of_line."
    },
    "Layout/BlockEndNewline": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutblockendnewline",
      "description": "This cop checks whether the end statement of a do..end block is on its own line."
    },
    "Layout/CaseIndentation": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: case"
        },
        "IndentOneStep": {
          "description": "Default: false",
          "type": "boolean"
        },
        "IndentationWidth": {
          "description": "Default: <none>",
          "type": "integer"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutcaseindentation",
      "description": "This cop checks how the whens of a case expression are indented in relation to its case or end keyword.\n\nIt will register a separate offense for each misaligned when."
    },
    "Layout/ClassStructure": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "Categories": {
          "description": "Default: {\"module_inclusion\"⇒[\"include\", \"prepend\", \"extend\"]}"
        },
        "ExpectedOrder": {
          "description": "Default: module_inclusion, constants, public_class_methods, initializer, public_methods, protected_methods, private_methods",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutclassstructure",
      "description": "Checks if the code style follows the ExpectedOrder configuration:\n\nCategories allows us to map macro names into a category.\n\nConsider an example of code style that covers the following order:\n\nYou can configure the following order:\n\nInstead of putting all literals in the expected order, is also possible to group categories of macros. Visibility levels are handled automatically."
    },
    "Layout/ClosingHeredocIndentation": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutclosingheredocindentation",
      "description": "Checks the indentation of here document closings."
    },
    "Layout/ClosingParenthesisIndentation": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutclosingparenthesisindentation",
      "description": "This cop checks the indentation of hanging closing parentheses in method calls, method definitions, and grouped expressions. A hanging closing parenthesis means ) preceded by a line break."
    },
    "Layout/CommentIndentation": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutcommentindentation",
      "description": "This cop checks the indentation of comments."
    },
    "Layout/ConditionPosition": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutconditionposition",
      "description": "This cop checks for conditions that are not on the same line as if/while/until."
    },
    "Layout/DefEndAlignment": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "description": "Default: warning",
          "type": "string"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyleAlignWith": {
          "description": "Default: start_of_line"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutdefendalignment",
      "description": "This cop checks whether the end keywords of method definitions are aligned properly.\n\nTwo modes are supported through the EnforcedStyleAlignWith configuration parameter. If it’s set to start_of_line (which is the default), the end shall be aligned with the start of the line where the def keyword is. If it’s set to def, the end shall be aligned with the def keyword."
    },
    "Layout/DotPosition": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: leading"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutdotposition",
      "description": "This cop checks the . position in multi-line method calls."
    },
    "Layout/ElseAlignment": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutelsealignment",
      "description": "This cop checks the alignment of else keywords. Normally they should be aligned with an if/unless/while/until/begin/def/rescue keyword, but there are special cases when they should follow the same rules as the alignment of end."
    },
    "Layout/EmptyComment": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "AllowBorderComment": {
          "description": "Default: true",
          "type": "boolean"
        },
        "AllowMarginComment": {
          "description": "Default: true",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutemptycomment",
      "description": "This cop checks empty comment."
    },
    "Layout/EmptyLineAfterGuardClause": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutemptylineafterguardclause",
      "description": "This cop enforces empty line after guard clause"
    },
    "Layout/EmptyLineAfterMagicComment": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutemptylineaftermagiccomment",
      "description": "Checks for a newline after the final magic comment."
    },
    "Layout/EmptyLineAfterMultilineCondition": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutemptylineaftermultilinecondition",
      "description": "This cop enforces empty line after multiline condition."
    },
    "Layout/EmptyLineBetweenDefs": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EmptyLineBetweenMethodDefs": {
          "description": "Default: true",
          "type": "boolean"
        },
        "EmptyLineBetweenClassDefs": {
          "description": "Default: true",
          "type": "boolean"
        },
        "EmptyLineBetweenModuleDefs": {
          "description": "Default: true",
          "type": "boolean"
        },
        "AllowAdjacentOneLineDefs": {
          "description": "Default: false",
          "type": "boolean"
        },
        "NumberOfEmptyLines": {
          "description": "Default: 1",
          "type": "integer"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutemptylinebetweendefs",
      "description": "This cop checks whether class/module/method definitions are separated by one or more empty lines.\n\nNumberOfEmptyLines can be an integer (default is 1) or an array (e.g. [1, 2]) to specify a minimum and maximum number of empty lines permitted.\n\nAllowAdjacentOneLineDefs configures whether adjacent one-line definitions are considered an offense."
    },
    "Layout/EmptyLinesAroundAccessModifier": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: around"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutemptylinesaroundaccessmodifier",
      "description": "Access modifiers should be surrounded by blank lines."
    },
    "Layout/EmptyLinesAroundArguments": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutemptylinesaroundarguments",
      "description": "This cop checks if empty lines exist around the arguments of a method invocation."
    },
    "Layout/EmptyLinesAroundAttributeAccessor": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "AllowAliasSyntax": {
          "description": "Default: true",
          "type": "boolean"
        },
        "AllowedMethods": {
          "description": "Default: alias_method, public, protected, private",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutemptylinesaroundattributeaccessor",
      "description": "Checks for a newline after an attribute accessor or a group of them. alias syntax and alias_method, public, protected, and private methods are allowed by default. These are customizable with AllowAliasSyntax and AllowedMethods options."
    },
    "Layout/EmptyLinesAroundBeginBody": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutemptylinesaroundbeginbody",
      "description": "This cop checks if empty lines exist around the bodies of begin-end blocks."
    },
    "Layout/EmptyLinesAroundBlockBody": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: no_empty_lines"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutemptylinesaroundblockbody",
      "description": "This cop checks if empty lines around the bodies of blocks match the configuration."
    },
    "Layout/EmptyLinesAroundClassBody": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: no_empty_lines"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutemptylinesaroundclassbody",
      "description": "This cop checks if empty lines around the bodies of classes match the configuration."
    },
    "Layout/EmptyLinesAroundExceptionHandlingKeywords": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutemptylinesaroundexceptionhandlingkeywords",
      "description": "This cop checks if empty lines exist around the bodies of begin sections. This cop doesn’t check empty lines at begin body beginning/end and around method definition body. Style/EmptyLinesAroundBeginBody or Style/EmptyLinesAroundMethodBody can be used for this purpose."
    },
    "Layout/EmptyLinesAroundMethodBody": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutemptylinesaroundmethodbody",
      "description": "This cop checks if empty lines exist around the bodies of methods."
    },
    "Layout/EmptyLinesAroundModuleBody": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: no_empty_lines"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutemptylinesaroundmodulebody",
      "description": "This cop checks if empty lines around the bodies of modules match the configuration."
    },
    "Layout/EmptyLines": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutemptylines",
      "description": "This cop checks for two or more consecutive blank lines."
    },
    "Layout/EndAlignment": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "description": "Default: warning",
          "type": "string"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyleAlignWith": {
          "description": "Default: keyword"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutendalignment",
      "description": "This cop checks whether the end keywords are aligned properly.\n\nThree modes are supported through the EnforcedStyleAlignWith configuration parameter:\n\nIf it’s set to keyword (which is the default), the end shall be aligned with the start of the keyword (if, class, etc.).\n\nIf it’s set to variable the end shall be aligned with the left-hand-side of the variable assignment, if there is one.\n\nIf it’s set to start_of_line, the end shall be aligned with the start of the line where the matching keyword appears.\n\nThis Layout/EndAlignment cop aligns with keywords (e.g. if, while, case) by default. On the other hand, Layout/BeginEndAlignment cop aligns with EnforcedStyleAlignWith: start_of_line by default due to ||= begin tends to align with the start of the line. These style can be configured by each cop."
    },
    "Layout/EndOfLine": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "EnforcedStyle": {
          "description": "Default: native"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutendofline",
      "description": "This cop checks for Windows-style line endings in the source code."
    },
    "Layout/ExtraSpacing": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "AllowForAlignment": {
          "description": "Default: true",
          "type": "boolean"
        },
        "AllowBeforeTrailingComments": {
          "description": "Default: false",
          "type": "boolean"
        },
        "ForceEqualSignAlignment": {
          "description": "Default: false",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutextraspacing",
      "description": "This cop checks for extra/unnecessary whitespace."
    },
    "Layout/FirstArgumentIndentation": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: special_for_inner_method_call_in_parentheses"
        },
        "IndentationWidth": {
          "description": "Default: <none>",
          "type": "integer"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutfirstargumentindentation",
      "description": "This cop checks the indentation of the first argument in a method call. Arguments after the first one are checked by Layout/ArgumentAlignment, not by this cop.\n\nFor indenting the first parameter of method definitions, check out Layout/FirstParameterIndentation.\n\nThis cop will respect Layout/ArgumentAlignment and will not work when EnforcedStyle: with_fixed_indentation is specified for Layout/ArgumentAlignment."
    },
    "Layout/FirstArrayElementIndentation": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: special_inside_parentheses"
        },
        "IndentationWidth": {
          "description": "Default: <none>",
          "type": "integer"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutfirstarrayelementindentation",
      "description": "This cop checks the indentation of the first element in an array literal where the opening bracket and the first element are on separate lines. The other elements' indentations are handled by the ArrayAlignment cop.\n\nBy default, array literals that are arguments in a method call with parentheses, and where the opening square bracket of the array is on the same line as the opening parenthesis of the method call, shall have their first element indented one step (two spaces) more than the position inside the opening parenthesis.\n\nOther array literals shall have their first element indented one step more than the start of the line where the opening square bracket is.\n\nThis default style is called 'special_inside_parentheses'. Alternative styles are 'consistent' and 'align_brackets'. Here are examples:"
    },
    "Layout/FirstArrayElementLineBreak": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutfirstarrayelementlinebreak",
      "description": "This cop checks for a line break before the first element in a multi-line array."
    },
    "Layout/FirstHashElementIndentation": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: special_inside_parentheses"
        },
        "IndentationWidth": {
          "description": "Default: <none>",
          "type": "integer"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutfirsthashelementindentation",
      "description": "This cop checks the indentation of the first key in a hash literal where the opening brace and the first key are on separate lines. The other keys' indentations are handled by the HashAlignment cop.\n\nBy default, Hash literals that are arguments in a method call with parentheses, and where the opening curly brace of the hash is on the same line as the opening parenthesis of the method call, shall have their first key indented one step (two spaces) more than the position inside the opening parenthesis.\n\nOther hash literals shall have their first key indented one step more than the start of the line where the opening curly brace is.\n\nThis default style is called 'special_inside_parentheses'. Alternative styles are 'consistent' and 'align_braces'. Here are examples:"
    },
    "Layout/FirstHashElementLineBreak": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutfirsthashelementlinebreak",
      "description": "This cop checks for a line break before the first element in a multi-line hash."
    },
    "Layout/FirstMethodArgumentLineBreak": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutfirstmethodargumentlinebreak",
      "description": "This cop checks for a line break before the first argument in a multi-line method call."
    },
    "Layout/FirstMethodParameterLineBreak": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutfirstmethodparameterlinebreak",
      "description": "This cop checks for a line break before the first parameter in a multi-line method parameter definition."
    },
    "Layout/FirstParameterIndentation": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: consistent"
        },
        "IndentationWidth": {
          "description": "Default: <none>",
          "type": "integer"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutfirstparameterindentation",
      "description": "This cop checks the indentation of the first parameter in a method definition. Parameters after the first one are checked by Layout/ParameterAlignment, not by this cop.\n\nFor indenting the first argument of method calls, check out Layout/FirstArgumentIndentation, which supports options related to nesting that are irrelevant for method definitions."
    },
    "Layout/HashAlignment": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedHashRocketStyle": {
          "description": "Default: key"
        },
        "EnforcedColonStyle": {
          "description": "Default: key"
        },
        "EnforcedLastArgumentHashStyle": {
          "description": "Default: always_inspect"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layouthashalignment",
      "description": "Check that the keys, separators, and values of a multi-line hash literal are aligned according to configuration. The configuration options are:\n\nThe treatment of hashes passed as the last argument to a method call can also be configured. The options are:\n\nAlternatively you can specify multiple allowed styles. That’s done by passing a list of styles to EnforcedStyles."
    },
    "Layout/HeredocArgumentClosingParenthesis": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutheredocargumentclosingparenthesis",
      "description": "This cop checks for the placement of the closing parenthesis in a method call that passes a HEREDOC string as an argument. It should be placed at the end of the line containing the opening HEREDOC tag."
    },
    "Layout/HeredocIndentation": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutheredocindentation",
      "description": "This cop checks the indentation of the here document bodies. The bodies are indented one step.\n\nNote: When Layout/LineLength's AllowHeredoc is false (not default), this cop does not add any offenses for long here documents to avoid `Layout/LineLength’s offenses."
    },
    "Layout/IndentationConsistency": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: normal"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutindentationconsistency",
      "description": "This cop checks for inconsistent indentation.\n\nThe difference between indented_internal_methods and normal is that the indented_internal_methods style prescribes that in classes and modules the protected and private modifier keywords shall be indented the same as public methods and that protected and private members shall be indented one step more than the modifiers. Other than that, both styles mean that entities on the same logical depth shall have the same indentation."
    },
    "Layout/IndentationStyle": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "IndentationWidth": {
          "description": "Default: <none>",
          "type": "integer"
        },
        "EnforcedStyle": {
          "description": "Default: spaces"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutindentationstyle",
      "description": "This cop checks that the indentation method is consistent. Either tabs only or spaces only are used for indentation."
    },
    "Layout/IndentationWidth": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "Width": {
          "description": "Default: 2",
          "type": "integer"
        },
        "IgnoredPatterns": {
          "description": "Default: []",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutindentationwidth",
      "description": "This cop checks for indentation that doesn’t use the specified number of spaces.\n\nSee also the IndentationConsistency cop which is the companion to this one."
    },
    "Layout/InitialIndentation": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutinitialindentation",
      "description": "This cop checks for indentation of the first non-blank non-comment line in a file."
    },
    "Layout/LeadingCommentSpace": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "AllowDoxygenCommentStyle": {
          "description": "Default: false",
          "type": "boolean"
        },
        "AllowGemfileRubyComment": {
          "description": "Default: false",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutleadingcommentspace",
      "description": "This cop checks whether comments have a leading space after the denoting the start of the comment. The leading space is not required for some RDoc special syntax, like ++, --, :nodoc, =begin- and =end comments, \"shebang\" directives, or rackup options."
    },
    "Layout/LeadingEmptyLines": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutleadingemptylines",
      "description": "This cop checks for unnecessary leading blank lines at the beginning of a file."
    },
    "Layout/LineLength": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "description": "Default: true",
          "type": "boolean"
        },
        "Max": {
          "description": "Default: 120",
          "type": "integer"
        },
        "AllowHeredoc": {
          "description": "Default: true",
          "type": "boolean"
        },
        "AllowURI": {
          "description": "Default: true",
          "type": "boolean"
        },
        "URISchemes": {
          "description": "Default: http, https",
          "type": "array"
        },
        "IgnoreCopDirectives": {
          "description": "Default: true",
          "type": "boolean"
        },
        "IgnoredPatterns": {
          "description": "Default: []",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutlinelength",
      "description": "This cop checks the length of lines in the source code. The maximum length is configurable. The tab size is configured in the IndentationWidth of the Layout/IndentationStyle cop. It also ignores a shebang line by default.\n\nThis cop has some autocorrection capabilities. It can programmatically shorten certain long lines by inserting line breaks into expressions that can be safely split across lines. These include arrays, hashes, and method calls with argument lists.\n\nIf autocorrection is enabled, the following Layout cops are recommended to further format the broken lines. (Many of these are enabled by default.)\n\nTogether, these cops will pretty print hashes, arrays, method calls, etc. For example, let’s say the max columns is 25:"
    },
    "Layout/MultilineArrayBraceLayout": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: symmetrical"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutmultilinearraybracelayout",
      "description": "This cop checks that the closing brace in an array literal is either on the same line as the last array element or on a new line.\n\nWhen using the symmetrical (default) style:\n\nIf an array’s opening brace is on the same line as the first element of the array, then the closing brace should be on the same line as the last element of the array.\n\nIf an array’s opening brace is on the line above the first element of the array, then the closing brace should be on the line below the last element of the array.\n\nWhen using the new_line style:\n\nThe closing brace of a multi-line array literal must be on the line after the last element of the array.\n\nWhen using the same_line style:\n\nThe closing brace of a multi-line array literal must be on the same line as the last element of the array."
    },
    "Layout/MultilineArrayLineBreaks": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutmultilinearraylinebreaks",
      "description": "This cop ensures that each item in a multi-line array starts on a separate line."
    },
    "Layout/MultilineAssignmentLayout": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: new_line"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutmultilineassignmentlayout",
      "description": "This cop checks whether the multiline assignments have a newline after the assignment operator."
    },
    "Layout/MultilineBlockLayout": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutmultilineblocklayout",
      "description": "This cop checks whether the multiline do end blocks have a newline after the start of the block. Additionally, it checks whether the block arguments, if any, are on the same line as the start of the block. Putting block arguments on separate lines, because the whole line would otherwise be too long, is accepted."
    },
    "Layout/MultilineHashBraceLayout": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: symmetrical"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutmultilinehashbracelayout",
      "description": "This cop checks that the closing brace in a hash literal is either on the same line as the last hash element, or a new line.\n\nWhen using the symmetrical (default) style:\n\nIf a hash’s opening brace is on the same line as the first element of the hash, then the closing brace should be on the same line as the last element of the hash.\n\nIf a hash’s opening brace is on the line above the first element of the hash, then the closing brace should be on the line below the last element of the hash.\n\nWhen using the new_line style:\n\nThe closing brace of a multi-line hash literal must be on the line after the last element of the hash.\n\nWhen using the same_line style:\n\nThe closing brace of a multi-line hash literal must be on the same line as the last element of the hash."
    },
    "Layout/MultilineHashKeyLineBreaks": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutmultilinehashkeylinebreaks",
      "description": "This cop ensures that each key in a multi-line hash starts on a separate line."
    },
    "Layout/MultilineMethodArgumentLineBreaks": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutmultilinemethodargumentlinebreaks",
      "description": "This cop ensures that each argument in a multi-line method call starts on a separate line."
    },
    "Layout/MultilineMethodCallBraceLayout": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: symmetrical"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutmultilinemethodcallbracelayout",
      "description": "This cop checks that the closing brace in a method call is either on the same line as the last method argument, or a new line.\n\nWhen using the symmetrical (default) style:\n\nIf a method call’s opening brace is on the same line as the first argument of the call, then the closing brace should be on the same line as the last argument of the call.\n\nIf an method call’s opening brace is on the line above the first argument of the call, then the closing brace should be on the line below the last argument of the call.\n\nWhen using the new_line style:\n\nThe closing brace of a multi-line method call must be on the line after the last argument of the call.\n\nWhen using the same_line style:\n\nThe closing brace of a multi-line method call must be on the same line as the last argument of the call."
    },
    "Layout/MultilineMethodCallIndentation": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: aligned"
        },
        "IndentationWidth": {
          "description": "Default: <none>",
          "type": "integer"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutmultilinemethodcallindentation",
      "description": "This cop checks the indentation of the method name part in method calls that span more than one line."
    },
    "Layout/MultilineMethodDefinitionBraceLayout": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: symmetrical"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutmultilinemethoddefinitionbracelayout",
      "description": "This cop checks that the closing brace in a method definition is either on the same line as the last method parameter, or a new line.\n\nWhen using the symmetrical (default) style:\n\nIf a method definition’s opening brace is on the same line as the first parameter of the definition, then the closing brace should be on the same line as the last parameter of the definition.\n\nIf an method definition’s opening brace is on the line above the first parameter of the definition, then the closing brace should be on the line below the last parameter of the definition.\n\nWhen using the new_line style:\n\nThe closing brace of a multi-line method definition must be on the line after the last parameter of the definition.\n\nWhen using the same_line style:\n\nThe closing brace of a multi-line method definition must be on the same line as the last parameter of the definition."
    },
    "Layout/MultilineOperationIndentation": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: aligned"
        },
        "IndentationWidth": {
          "description": "Default: <none>",
          "type": "integer"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutmultilineoperationindentation",
      "description": "This cop checks the indentation of the right hand side operand in binary operations that span more than one line.\n\nThe aligned style checks that operators are aligned if they are part of an if or while condition, a return statement, etc. In other contexts, the second operand should be indented regardless of enforced style."
    },
    "Layout/ParameterAlignment": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: with_first_parameter"
        },
        "IndentationWidth": {
          "description": "Default: <none>",
          "type": "integer"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutparameteralignment",
      "description": "Here we check if the parameters on a multi-line method call or definition are aligned.\n\nTo set the alignment of the first argument, use the cop FirstParameterIndentation."
    },
    "Layout/RedundantLineBreak": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "InspectBlocks": {
          "description": "Default: false",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutredundantlinebreak",
      "description": "This cop checks whether certain expressions, e.g. method calls, that could fit completely on a single line, are broken up into multiple lines unnecessarily."
    },
    "Layout/RescueEnsureAlignment": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutrescueensurealignment",
      "description": "This cop checks whether the rescue and ensure keywords are aligned properly."
    },
    "Layout/SpaceAfterColon": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutspaceaftercolon",
      "description": "Checks for colon (:) not followed by some kind of space. N.B. this cop does not handle spaces after a ternary operator, which are instead handled by Layout/SpaceAroundOperators."
    },
    "Layout/SpaceAfterComma": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutspaceaftercomma",
      "description": "Checks for comma (,) not followed by some kind of space."
    },
    "Layout/SpaceAfterMethodName": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutspaceaftermethodname",
      "description": "Checks for space between a method name and a left parenthesis in defs."
    },
    "Layout/SpaceAfterNot": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutspaceafternot",
      "description": "This cop checks for space after !."
    },
    "Layout/SpaceAfterSemicolon": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutspaceaftersemicolon",
      "description": "Checks for semicolon (;) not followed by some kind of space."
    },
    "Layout/SpaceAroundBlockParameters": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyleInsidePipes": {
          "description": "Default: no_space"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutspacearoundblockparameters",
      "description": "Checks the spacing inside and after block parameters pipes. Line breaks inside parameter pipes are checked by Layout/MultilineBlockLayout and not by this cop."
    },
    "Layout/SpaceAroundEqualsInParameterDefault": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: space"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutspacearoundequalsinparameterdefault",
      "description": "Checks that the equals signs in parameter default assignments have or don’t have surrounding space depending on configuration."
    },
    "Layout/SpaceAroundKeyword": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutspacearoundkeyword",
      "description": "Checks the spacing around the keywords."
    },
    "Layout/SpaceAroundMethodCallOperator": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutspacearoundmethodcalloperator",
      "description": "Checks method call operators to not have spaces around them."
    },
    "Layout/SpaceAroundOperators": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "AllowForAlignment": {
          "description": "Default: true",
          "type": "boolean"
        },
        "EnforcedStyleForExponentOperator": {
          "description": "Default: no_space"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutspacearoundoperators",
      "description": "Checks that operators have space around them, except for ** which should or shouldn’t have surrounding space depending on configuration. It allows vertical alignment consisting of one or more whitespace around operators.\n\nThis cop has AllowForAlignment option. When true, allows most uses of extra spacing if the intent is to align with an operator on the previous or next line, not counting empty lines or comment lines."
    },
    "Layout/SpaceBeforeBlockBraces": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: space"
        },
        "EnforcedStyleForEmptyBraces": {
          "description": "Default: space"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutspacebeforeblockbraces",
      "description": "Checks that block braces have or don’t have a space before the opening brace depending on configuration."
    },
    "Layout/SpaceBeforeBrackets": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutspacebeforebrackets",
      "description": "Checks for space between the name of a receiver and a left brackets."
    },
    "Layout/SpaceBeforeComma": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutspacebeforecomma",
      "description": "Checks for comma (,) preceded by space."
    },
    "Layout/SpaceBeforeComment": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutspacebeforecomment",
      "description": "This cop checks for missing space between a token and a comment on the same line."
    },
    "Layout/SpaceBeforeFirstArg": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "AllowForAlignment": {
          "description": "Default: true",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutspacebeforefirstarg",
      "description": "Checks that exactly one space is used between a method name and the first argument for method calls without parentheses.\n\nAlternatively, extra spaces can be added to align the argument with something on a preceding or following line, if the AllowForAlignment config parameter is true."
    },
    "Layout/SpaceBeforeSemicolon": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutspacebeforesemicolon",
      "description": "Checks for semicolon (;) preceded by space."
    },
    "Layout/SpaceInLambdaLiteral": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: require_no_space"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutspaceinlambdaliteral",
      "description": "This cop checks for spaces between → and opening parameter parenthesis (() in lambda literals."
    },
    "Layout/SpaceInsideArrayPercentLiteral": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutspaceinsidearraypercentliteral",
      "description": "Checks for unnecessary additional spaces inside array percent literals (i.e. %i/%w)."
    },
    "Layout/SpaceInsideArrayLiteralBrackets": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: no_space"
        },
        "EnforcedStyleForEmptyBrackets": {
          "description": "Default: no_space"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutspaceinsidearrayliteralbrackets",
      "description": "Checks that brackets used for array literals have or don’t have surrounding space depending on configuration."
    },
    "Layout/SpaceInsideBlockBraces": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: space"
        },
        "EnforcedStyleForEmptyBraces": {
          "description": "Default: no_space"
        },
        "SpaceBeforeBlockParameters": {
          "description": "Default: true",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutspaceinsideblockbraces",
      "description": "Checks that block braces have or don’t have surrounding space inside them on configuration. For blocks taking parameters, it checks that the left brace has or doesn’t have trailing space depending on configuration."
    },
    "Layout/SpaceInsideHashLiteralBraces": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: space"
        },
        "EnforcedStyleForEmptyBraces": {
          "description": "Default: no_space"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutspaceinsidehashliteralbraces",
      "description": "Checks that braces used for hash literals have or don’t have surrounding space depending on configuration."
    },
    "Layout/SpaceInsideParens": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: no_space"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutspaceinsideparens",
      "description": "Checks for spaces inside ordinary round parentheses."
    },
    "Layout/SpaceInsidePercentLiteralDelimiters": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutspaceinsidepercentliteraldelimiters",
      "description": "Checks for unnecessary additional spaces inside the delimiters of %i/%w/%x literals."
    },
    "Layout/SpaceInsideRangeLiteral": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutspaceinsiderangeliteral",
      "description": "Checks for spaces inside range literals."
    },
    "Layout/SpaceInsideReferenceBrackets": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: no_space"
        },
        "EnforcedStyleForEmptyBrackets": {
          "description": "Default: no_space"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutspaceinsidereferencebrackets",
      "description": "Checks that reference brackets have or don’t have surrounding space depending on configuration."
    },
    "Layout/SpaceInsideStringInterpolation": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: no_space"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layoutspaceinsidestringinterpolation",
      "description": "This cop checks for whitespace within string interpolations."
    },
    "Layout/TrailingEmptyLines": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: final_newline"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layouttrailingemptylines",
      "description": "This cop looks for trailing blank lines and a final newline in the source code."
    },
    "Layout/TrailingWhitespace": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "AllowInHeredoc": {
          "description": "Default: false",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_layout.html#layouttrailingwhitespace",
      "description": "This cop looks for trailing whitespace in the source code."
    },
    "Lint/AmbiguousAssignment": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintambiguousassignment",
      "description": "This cop checks for mistyped shorthand assignments."
    },
    "Lint/AmbiguousBlockAssociation": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "IgnoredMethods": {
          "description": "Default: []",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintambiguousblockassociation",
      "description": "This cop checks for ambiguous block association with method when param passed without parentheses.\n\nThis cop can customize ignored methods with IgnoredMethods."
    },
    "Lint/AmbiguousOperator": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintambiguousoperator",
      "description": "This cop checks for ambiguous operators in the first argument of a method invocation without parentheses."
    },
    "Lint/AmbiguousRegexpLiteral": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintambiguousregexpliteral",
      "description": "This cop checks for ambiguous regexp literals in the first argument of a method invocation without parentheses."
    },
    "Lint/AssignmentInCondition": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AllowSafeAssignment": {
          "description": "Default: true",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintassignmentincondition",
      "description": "This cop checks for assignments in the conditions of if/while/until.\n\nAllowSafeAssignment option for safe assignment. By safe assignment we mean putting parentheses around an assignment to indicate \"I know I’m using an assignment as a condition. It’s not a mistake.\""
    },
    "Lint/BigDecimalNew": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintbigdecimalnew",
      "description": "BigDecimal.new() is deprecated since BigDecimal 1.3.3. This cop identifies places where BigDecimal.new() can be replaced by BigDecimal()."
    },
    "Lint/BinaryOperatorWithIdenticalOperands": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintbinaryoperatorwithidenticaloperands",
      "description": "This cop checks for places where binary operator has identical operands.\n\nIt covers arithmetic operators: +, -, , /, %, *; comparison operators: ==, ===, =~, >, >=, <, ⇐; bitwise operators: |, ^, &, <<, >>; boolean operators: &&, || and \"spaceship\" operator - <⇒.\n\nThis cop is marked as unsafe as it does not consider side effects when calling methods and thus can generate false positives: if wr.take_char == '\\0' && wr.take_char == '\\0'"
    },
    "Lint/BooleanSymbol": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintbooleansymbol",
      "description": "This cop checks for :true and :false symbols. In most cases it would be a typo."
    },
    "Lint/CircularArgumentReference": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintcircularargumentreference",
      "description": "This cop checks for circular argument references in optional keyword arguments and optional ordinal arguments.\n\nThis cop mirrors a warning produced by MRI since 2.2."
    },
    "Lint/ConstantDefinitionInBlock": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AllowedMethods": {
          "description": "Default: enums",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintconstantdefinitioninblock",
      "description": "Do not define constants within a block, since the block’s scope does not isolate or namespace the constant in any way.\n\nIf you are trying to define that constant once, define it outside of the block instead, or use a variable or method if defining the constant in the outer scope would be problematic.\n\nFor meta-programming, use const_set."
    },
    "Lint/ConstantResolution": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "Only": {
          "description": "Default: []",
          "type": "array"
        },
        "Ignore": {
          "description": "Default: []",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintconstantresolution",
      "description": "Check that certain constants are fully qualified.\n\nThis is not enabled by default because it would mark a lot of offenses unnecessarily.\n\nGenerally, gems should fully qualify all constants to avoid conflicts with the code that uses the gem. Enable this cop without using Only/Ignore\n\nLarge projects will over time end up with one or two constant names that are problematic because of a conflict with a library or just internally using the same name a namespace and a class. To avoid too many unnecessary offenses, Enable this cop with Only: [The, Constant, Names, Causing, Issues]"
    },
    "Lint/Debugger": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "DebuggerReceivers": {
          "description": "Default: []",
          "type": "array"
        },
        "DebuggerMethods": {
          "description": "Default: {\"Kernel\"⇒[\"binding.irb\"], \"Byebug\"⇒[\"byebug\", \"remote_byebug\", \"Kernel.byebug\", \"Kernel.remote_byebug\"], \"Capybara\"⇒[\"save_and_open_page\", \"save_and_open_screenshot\"], \"Pry\"⇒[\"binding.pry\", \"binding.remote_pry\", \"binding.pry_remote\", \"Pry.rescue\"], \"Rails\"⇒[\"debugger\", \"Kernel.debugger\"], \"WebConsole\"⇒[\"binding.console\"]}"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintdebugger",
      "description": "This cop checks for debug calls (such as debugger or binding.pry) that should not be kept for production code.\n\nThe cop can be configured using DebuggerMethods. By default, a number of gems debug entrypoints are configured (Kernel, Byebug, Capybara, Pry, Rails, and WebConsole). Additional methods can be added.\n\nSpecific default groups can be disabled if necessary:"
    },
    "Lint/DeprecatedClassMethods": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintdeprecatedclassmethods",
      "description": "This cop checks for uses of the deprecated class method usages."
    },
    "Lint/DeprecatedConstants": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "DeprecatedConstants": {
          "description": "Default: {\"NIL\"⇒{\"Alternative\"⇒\"nil\", \"DeprecatedVersion\"⇒\"2.4\"}, \"TRUE\"⇒{\"Alternative\"⇒\"true\", \"DeprecatedVersion\"⇒\"2.4\"}, \"FALSE\"⇒{\"Alternative\"⇒\"false\", \"DeprecatedVersion\"⇒\"2.4\"}, \"Random::DEFAULT\"⇒{\"Alternative\"⇒\"Random.new\", \"DeprecatedVersion\"⇒\"3.0\"}}"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintdeprecatedconstants",
      "description": "This cop checks for deprecated constants.\n\nIt has DeprecatedConstants config. If there is an alternative method, you can set alternative value as Alternative. And you can set the deprecated version as DeprecatedVersion. These options can be omitted if they are not needed.\n\nBy default, NIL, TRUE, FALSE and Random::DEFAULT are configured."
    },
    "Lint/DeprecatedOpenSSLConstant": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintdeprecatedopensslconstant",
      "description": "Algorithmic constants for OpenSSL::Cipher and OpenSSL::Digest deprecated since OpenSSL version 2.2.0. Prefer passing a string instead."
    },
    "Lint/DisjunctiveAssignmentInConstructor": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintdisjunctiveassignmentinconstructor",
      "description": "This cop checks constructors for disjunctive assignments that should be plain assignments.\n\nSo far, this cop is only concerned with disjunctive assignment of instance variables.\n\nIn ruby, an instance variable is nil until a value is assigned, so the disjunction is unnecessary. A plain assignment has the same effect."
    },
    "Lint/DuplicateBranch": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "IgnoreLiteralBranches": {
          "description": "Default: false",
          "type": "boolean"
        },
        "IgnoreConstantBranches": {
          "description": "Default: false",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintduplicatebranch",
      "description": "This cop checks that there are no repeated bodies within if/unless, case-when and rescue constructs.\n\nWith IgnoreLiteralBranches: true, branches are not registered as offenses if they return a basic literal value (string, symbol, integer, float, rational, complex, true, false, or nil), or return an array, hash, regexp or range that only contains one of the above basic literal values.\n\nWith IgnoreConstantBranches: true, branches are not registered as offenses if they return a constant value."
    },
    "Lint/DuplicateCaseCondition": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintduplicatecasecondition",
      "description": "This cop checks that there are no repeated conditions used in case 'when' expressions."
    },
    "Lint/DuplicateElsifCondition": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintduplicateelsifcondition",
      "description": "This cop checks that there are no repeated conditions used in if 'elsif'."
    },
    "Lint/DuplicateHashKey": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintduplicatehashkey",
      "description": "This cop checks for duplicated keys in hash literals.\n\nThis cop mirrors a warning in Ruby 2.2."
    },
    "Lint/DuplicateMethods": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintduplicatemethods",
      "description": "This cop checks for duplicated instance (or singleton) method definitions."
    },
    "Lint/DuplicateRegexpCharacterClassElement": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintduplicateregexpcharacterclasselement",
      "description": "This cop checks for duplicate elements in Regexp character classes."
    },
    "Lint/DuplicateRequire": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintduplicaterequire",
      "description": "This cop checks for duplicate `require`s and `require_relative`s."
    },
    "Lint/DuplicateRescueException": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintduplicaterescueexception",
      "description": "This cop checks that there are no repeated exceptions used in 'rescue' expressions."
    },
    "Lint/EachWithObjectArgument": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#linteachwithobjectargument",
      "description": "This cop checks if each_with_object is called with an immutable argument. Since the argument is the object that the given block shall make calls on to build something based on the enumerable that each_with_object iterates over, an immutable argument makes no sense. It’s definitely a bug."
    },
    "Lint/ElseLayout": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintelselayout",
      "description": "This cop checks for odd else block layout - like having an expression on the same line as the else keyword, which is usually a mistake.\n\nIts auto-correction tweaks layout to keep the syntax. So, this auto-correction is compatible correction for bad case syntax, but if your code makes a mistake with elsif and else, you will have to correct it manually."
    },
    "Lint/EmptyBlock": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AllowComments": {
          "description": "Default: true",
          "type": "boolean"
        },
        "AllowEmptyLambdas": {
          "description": "Default: true",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintemptyblock",
      "description": "This cop checks for blocks without a body. Such empty blocks are typically an oversight or we should provide a comment be clearer what we’re aiming for.\n\nEmpty lambdas are ignored by default."
    },
    "Lint/EmptyClass": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AllowComments": {
          "description": "Default: false",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintemptyclass",
      "description": "This cop checks for classes and metaclasses without a body. Such empty classes and metaclasses are typically an oversight or we should provide a comment to be clearer what we’re aiming for."
    },
    "Lint/EmptyConditionalBody": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AllowComments": {
          "description": "Default: true",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintemptyconditionalbody",
      "description": "This cop checks for the presence of if, elsif and unless branches without a body."
    },
    "Lint/EmptyEnsure": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintemptyensure",
      "description": "This cop checks for empty ensure blocks"
    },
    "Lint/EmptyExpression": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintemptyexpression",
      "description": "This cop checks for the presence of empty expressions."
    },
    "Lint/EmptyFile": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AllowComments": {
          "description": "Default: true",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintemptyfile",
      "description": "This cop enforces that Ruby source files are not empty."
    },
    "Lint/EmptyInterpolation": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintemptyinterpolation",
      "description": "This cop checks for empty interpolation."
    },
    "Lint/EmptyWhen": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AllowComments": {
          "description": "Default: true",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintemptywhen",
      "description": "This cop checks for the presence of when branches without a body."
    },
    "Lint/EnsureReturn": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintensurereturn",
      "description": "This cop checks for return from an ensure block. return from an ensure block is a dangerous code smell as it will take precedence over any exception being raised, and the exception will be silently thrown away as if it were rescued.\n\nIf you want to rescue some (or all) exceptions, best to do it explicitly"
    },
    "Lint/ErbNewArguments": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#linterbnewarguments",
      "description": "This cop emulates the following Ruby warnings in Ruby 2.6.\n\n% cat example.rb ERB.new('hi', nil, '-', '@output_buffer') % ruby -rerb example.rb example.rb:1: warning: Passing safe_level with the 2nd argument of ERB.new is deprecated. Do not use it, and specify other arguments as keyword arguments. example.rb:1: warning: Passing trim_mode with the 3rd argument of ERB.new is deprecated. Use keyword argument like ERB.new(str, trim_mode:…​) instead. example.rb:1: warning: Passing eoutvar with the 4th argument of ERB.new is deprecated. Use keyword argument like ERB.new(str, eoutvar: …​) instead.\n\nNow non-keyword arguments other than first one are softly deprecated and will be removed when Ruby 2.5 becomes EOL. ERB.new with non-keyword arguments is deprecated since ERB 2.2.0. Use :trim_mode and :eoutvar keyword arguments to ERB.new. This cop identifies places where ERB.new(str, trim_mode, eoutvar) can be replaced by ERB.new(str, :trim_mode: trim_mode, eoutvar: eoutvar)."
    },
    "Lint/FlipFlop": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintflipflop",
      "description": "This cop looks for uses of flip-flop operator based on the Ruby Style Guide.\n\nHere is the history of flip-flops in Ruby. flip-flop operator is deprecated in Ruby 2.6.0 and the deprecation has been reverted by Ruby 2.7.0 and backported to Ruby 2.6. See: https://bugs.ruby-lang.org/issues/5400"
    },
    "Lint/FloatComparison": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintfloatcomparison",
      "description": "This cop checks for the presence of precise comparison of floating point numbers.\n\nFloating point values are inherently inaccurate, and comparing them for exact equality is almost never the desired semantics. Comparison via the ==/!= operators checks floating-point value representation to be exactly the same, which is very unlikely if you perform any arithmetic operations involving precision loss."
    },
    "Lint/FloatOutOfRange": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintfloatoutofrange",
      "description": "This cop identifies Float literals which are, like, really really really really really really really really big. Too big. No-one needs Floats that big. If you need a float that big, something is wrong with you."
    },
    "Lint/FormatParameterMismatch": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintformatparametermismatch",
      "description": "This lint sees if there is a mismatch between the number of expected fields for format/sprintf/#% and what is actually passed as arguments.\n\nIn addition it checks whether different formats are used in the same format string. Do not mix numbered, unnumbered, and named formats in the same format string."
    },
    "Lint/HashCompareByIdentity": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#linthashcomparebyidentity",
      "description": "Prefer using Hash#compare_by_identity than using object_id for hash keys.\n\nThis cop is marked as unsafe as a hash possibly can contain other keys besides `object_id`s."
    },
    "Lint/HeredocMethodCallPosition": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintheredocmethodcallposition",
      "description": "This cop checks for the ordering of a method call where the receiver of the call is a HEREDOC."
    },
    "Lint/IdentityComparison": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintidentitycomparison",
      "description": "Prefer equal? over == when comparing object_id.\n\nObject#equal? is provided to compare objects for identity, and in contrast Object#== is provided for the purpose of doing value comparison."
    },
    "Lint/ImplicitStringConcatenation": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintimplicitstringconcatenation",
      "description": "This cop checks for implicit string concatenation of string literals which are on the same line."
    },
    "Lint/InheritException": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: runtime_error"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintinheritexception",
      "description": "This cop looks for error classes inheriting from Exception and its standard library subclasses, excluding subclasses of StandardError. It is configurable to suggest using either RuntimeError (default) or StandardError instead."
    },
    "Lint/IneffectiveAccessModifier": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintineffectiveaccessmodifier",
      "description": "This cop checks for private or protected access modifiers which are applied to a singleton method. These access modifiers do not make singleton methods private/protected. private_class_method can be used for that."
    },
    "Lint/InterpolationCheck": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintinterpolationcheck",
      "description": "This cop checks for interpolation in a single quoted string."
    },
    "Lint/LambdaWithoutLiteralBlock": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintlambdawithoutliteralblock",
      "description": "This cop checks uses of lambda without a literal block. It emulates the following warning in Ruby 3.0:\n\nThis way, proc object is never converted to lambda. Auto-correction replaces with compatible proc argument."
    },
    "Lint/LiteralAsCondition": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintliteralascondition",
      "description": "This cop checks for literals used as the conditions or as operands in and/or expressions serving as the conditions of if/while/until."
    },
    "Lint/LiteralInInterpolation": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintliteralininterpolation",
      "description": "This cop checks for interpolated literals."
    },
    "Lint/Loop": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintloop",
      "description": "This cop checks for uses of begin…​end while/until something.\n\nThe cop is marked as unsafe because behaviour can change in some cases, including if a local variable inside the loop body is accessed outside of it, or if the loop body raises a StopIteration exception (which Kernel#loop rescues)."
    },
    "Lint/MissingCopEnableDirective": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "MaximumRangeSize": {
          "description": "Default: Infinity"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintmissingcopenabledirective",
      "description": "This cop checks that there is an # rubocop:enable …​ statement after a # rubocop:disable …​ statement. This will prevent leaving cop disables on wide ranges of code, that latter contributors to a file wouldn’t be aware of."
    },
    "Lint/MissingSuper": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintmissingsuper",
      "description": "This cop checks for the presence of constructors and lifecycle callbacks without calls to super.\n\nThis cop does not consider method_missing (and respond_to_missing?) because in some cases it makes sense to overtake what is considered a missing method. In other cases, the theoretical ideal handling could be challenging or verbose for no actual gain."
    },
    "Lint/MixedRegexpCaptureTypes": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintmixedregexpcapturetypes",
      "description": "Do not mix named captures and numbered captures in a Regexp literal because numbered capture is ignored if they’re mixed. Replace numbered captures with non-capturing groupings or named captures."
    },
    "Lint/MultipleComparison": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "AllowMethodComparison": {
          "description": "Default: true",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintmultiplecomparison",
      "description": "In math and Python, we can use x < y < z style comparison to compare multiple value. However, we can’t use the comparison in Ruby. However, the comparison is not syntax error. This cop checks the bad usage of comparison operators."
    },
    "Lint/NestedMethodDefinition": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintnestedmethoddefinition",
      "description": "This cop checks for nested method definitions."
    },
    "Lint/NestedPercentLiteral": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintnestedpercentliteral",
      "description": "This cop checks for nested percent literals."
    },
    "Lint/NextWithoutAccumulator": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintnextwithoutaccumulator",
      "description": "Don’t omit the accumulator when calling next in a reduce block."
    },
    "Lint/NoReturnInBeginEndBlocks": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintnoreturninbeginendblocks",
      "description": "Checks for the presence of a return inside a begin..end block in assignment contexts. In this situation, the return will result in an exit from the current method, possibly leading to unexpected behavior."
    },
    "Lint/NonDeterministicRequireOrder": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintnondeterministicrequireorder",
      "description": "Dir[…​] and Dir.glob(…​) do not make any guarantees about the order in which files are returned. The final order is determined by the operating system and file system. This means that using them in cases where the order matters, such as requiring files, can lead to intermittent failures that are hard to debug. To ensure this doesn’t happen, always sort the list.\n\nDir.glob and Dir[] sort globbed results by default in Ruby 3.0. So all bad cases are acceptable when Ruby 3.0 or higher are used.\n\nThis cop will be deprecated and removed when supporting only Ruby 3.0 and higher."
    },
    "Lint/NonLocalExitFromIterator": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintnonlocalexitfromiterator",
      "description": "This cop checks for non-local exits from iterators without a return value. It registers an offense under these conditions:"
    },
    "Lint/NumberConversion": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "IgnoredMethods": {
          "description": "Default: []",
          "type": "array"
        },
        "IgnoredClasses": {
          "description": "Default: Time, DateTime",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintnumberconversion",
      "description": "This cop warns the usage of unsafe number conversions. Unsafe number conversion can cause unexpected error if auto type conversion fails. Cop prefer parsing with number class instead.\n\nConversion with Integer, Float, etc. will raise an ArgumentError if given input that is not numeric (eg. an empty string), whereas to_i, etc. will try to convert regardless of input (''.to_i ⇒ 0). As such, this cop is disabled by default because it’s not necessarily always correct to raise if a value is not numeric."
    },
    "Lint/NumberedParameterAssignment": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintnumberedparameterassignment",
      "description": "This cop checks for uses of numbered parameter assignment. It emulates the following warning in Ruby 2.7:\n\nAssiging to numbered parameter (from _1 to _9) cause an error in Ruby 3.0."
    },
    "Lint/OrAssignmentToConstant": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintorassignmenttoconstant",
      "description": "This cop checks for unintended or-assignment to a constant.\n\nConstants should always be assigned in the same location. And its value should always be the same. If constants are assigned in multiple locations, the result may vary depending on the order of require.\n\nAlso, if you already have such an implementation, auto-correction may change the result."
    },
    "Lint/OrderedMagicComments": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintorderedmagiccomments",
      "description": "Checks the proper ordering of magic comments and whether a magic comment is not placed before a shebang."
    },
    "Lint/OutOfRangeRegexpRef": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintoutofrangeregexpref",
      "description": "This cops looks for references of Regexp captures that are out of range and thus always returns nil."
    },
    "Lint/ParenthesesAsGroupedExpression": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintparenthesesasgroupedexpression",
      "description": "Checks for space between the name of a called method and a left parenthesis."
    },
    "Lint/PercentStringArray": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintpercentstringarray",
      "description": "This cop checks for quotes and commas in %w, e.g. %w('foo', \"bar\")\n\nIt is more likely that the additional characters are unintended (for example, mistranslating an array of literals to percent string notation) rather than meant to be part of the resulting strings."
    },
    "Lint/PercentSymbolArray": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintpercentsymbolarray",
      "description": "This cop checks for colons and commas in %i, e.g. %i(:foo, :bar)\n\nIt is more likely that the additional characters are unintended (for example, mistranslating an array of literals to percent string notation) rather than meant to be part of the resulting symbols."
    },
    "Lint/RaiseException": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "AllowedImplicitNamespaces": {
          "description": "Default: Gem",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintraiseexception",
      "description": "This cop checks for raise or fail statements which are raising Exception class.\n\nYou can specify a module name that will be an implicit namespace using AllowedImplicitNamespaces option. The cop cause a false positive for namespaced Exception when a namespace is omitted. This option can prevent the false positive by specifying a namespace to be omitted for Exception. Alternatively, make Exception a fully qualified class name with an explicit namespace."
    },
    "Lint/RandOne": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintrandone",
      "description": "This cop checks for rand(1) calls. Such calls always return 0."
    },
    "Lint/RedundantCopDisableDirective": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintredundantcopdisabledirective",
      "description": "This cop detects instances of rubocop:disable comments that can be removed without causing any offenses to be reported. It’s implemented as a cop in that it inherits from the Cop base class and calls add_offense. The unusual part of its implementation is that it doesn’t have any on_* methods or an investigate method. This means that it doesn’t take part in the investigation phase when the other cops do their work. Instead, it waits until it’s called in a later stage of the execution. The reason it can’t be implemented as a normal cop is that it depends on the results of all other cops to do its work."
    },
    "Lint/RedundantCopEnableDirective": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintredundantcopenabledirective",
      "description": "This cop detects instances of rubocop:enable comments that can be removed.\n\nWhen comment enables all cops at once rubocop:enable all that cop checks whether any cop was actually enabled."
    },
    "Lint/RedundantDirGlobSort": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintredundantdirglobsort",
      "description": "Sort globbed results by default in Ruby 3.0. This cop checks for redundant sort method to Dir.glob and Dir[]."
    },
    "Lint/RedundantRequireStatement": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintredundantrequirestatement",
      "description": "Checks for unnecessary require statement.\n\nThe following features are unnecessary require statement because they are already loaded.\n\nThis cop targets Ruby 2.2 or higher containing these 4 features."
    },
    "Lint/RedundantSafeNavigation": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "AllowedMethods": {
          "description": "Default: instance_of?, kind_of?, is_a?, eql?, respond_to?, equal?",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintredundantsafenavigation",
      "description": "This cop checks for redundant safe navigation calls. instance_of?, kind_of?, is_a?, eql?, respond_to?, and equal? methods are checked by default. These are customizable with AllowedMethods option.\n\nThis cop is marked as unsafe, because auto-correction can change the return type of the expression. An offending expression that previously could return nil will be auto-corrected to never return nil.\n\nIn the example below, the safe navigation operator (&.) is unnecessary because NilClass has methods like respond_to? and is_a?."
    },
    "Lint/RedundantSplatExpansion": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "AllowPercentLiteralArrayArgument": {
          "description": "Default: true",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintredundantsplatexpansion",
      "description": "This cop checks for unneeded usages of splat expansion"
    },
    "Lint/RedundantStringCoercion": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintredundantstringcoercion",
      "description": "This cop checks for string conversion in string interpolation, which is redundant."
    },
    "Lint/RedundantWithIndex": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintredundantwithindex",
      "description": "This cop checks for redundant with_index."
    },
    "Lint/RedundantWithObject": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintredundantwithobject",
      "description": "This cop checks for redundant with_object."
    },
    "Lint/RegexpAsCondition": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintregexpascondition",
      "description": "This cop checks for regexp literals used as match-current-line. If a regexp literal is in condition, the regexp matches $_ implicitly."
    },
    "Lint/RequireParentheses": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintrequireparentheses",
      "description": "This cop checks for expressions where there is a call to a predicate method with at least one argument, where no parentheses are used around the parameter list, and a boolean operator, && or ||, is used in the last argument.\n\nThe idea behind warning for these constructs is that the user might be under the impression that the return value from the method call is an operand of &&/||."
    },
    "Lint/RescueException": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintrescueexception",
      "description": "This cop checks for rescue blocks targeting the Exception class."
    },
    "Lint/RescueType": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintrescuetype",
      "description": "Check for arguments to rescue that will result in a TypeError if an exception is raised."
    },
    "Lint/ReturnInVoidContext": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintreturninvoidcontext",
      "description": "This cop checks for the use of a return with a value in a context where the value will be ignored. (initialize and setter methods)"
    },
    "Lint/SafeNavigationConsistency": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "AllowedMethods": {
          "description": "Default: present?, blank?, presence, try, try!",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintsafenavigationconsistency",
      "description": "This cop check to make sure that if safe navigation is used for a method call in an && or || condition that safe navigation is used for all method calls on that same object."
    },
    "Lint/SafeNavigationChain": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AllowedMethods": {
          "description": "Default: present?, blank?, presence, try, try!, in?",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintsafenavigationchain",
      "description": "The safe navigation operator returns nil if the receiver is nil. If you chain an ordinary method call after a safe navigation operator, it raises NoMethodError. We should use a safe navigation operator after a safe navigation operator. This cop checks for the problem outlined above."
    },
    "Lint/SafeNavigationWithEmpty": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintsafenavigationwithempty",
      "description": "This cop checks to make sure safe navigation isn’t used with empty? in a conditional.\n\nWhile the safe navigation operator is generally a good idea, when checking foo&.empty? in a conditional, foo being nil will actually do the opposite of what the author intends."
    },
    "Lint/ScriptPermission": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintscriptpermission",
      "description": "This cop checks if a file which has a shebang line as its first line is granted execute permission."
    },
    "Lint/SelfAssignment": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintselfassignment",
      "description": "This cop checks for self-assignments."
    },
    "Lint/SendWithMixinArgument": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintsendwithmixinargument",
      "description": "This cop checks for send, public_send, and send methods when using mix-in.\n\ninclude and prepend methods were private methods until Ruby 2.0, they were mixed-in via send method. This cop uses Ruby 2.1 or higher style that can be called by public methods. And extend method that was originally a public method is also targeted for style unification."
    },
    "Lint/ShadowedArgument": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "IgnoreImplicitReferences": {
          "description": "Default: false",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintshadowedargument",
      "description": "This cop checks for shadowed arguments.\n\nThis cop has IgnoreImplicitReferences configuration option. It means argument shadowing is used in order to pass parameters to zero arity super when IgnoreImplicitReferences is true."
    },
    "Lint/ShadowedException": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintshadowedexception",
      "description": "This cop checks for a rescued exception that get shadowed by a less specific exception being rescued before a more specific exception is rescued."
    },
    "Lint/ShadowingOuterLocalVariable": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintshadowingouterlocalvariable",
      "description": "This cop checks for the use of local variable names from an outer scope in block arguments or block-local variables. This mirrors the warning given by ruby -cw prior to Ruby 2.6: \"shadowing outer local variable - foo\"."
    },
    "Lint/StructNewOverride": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintstructnewoverride",
      "description": "This cop checks unexpected overrides of the Struct built-in methods via Struct.new."
    },
    "Lint/SuppressedException": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AllowComments": {
          "description": "Default: true",
          "type": "boolean"
        },
        "AllowNil": {
          "description": "Default: true",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintsuppressedexception",
      "description": "This cop checks for rescue blocks with no body."
    },
    "Lint/SymbolConversion": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: strict"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintsymbolconversion",
      "description": "This cop checks for uses of literal strings converted to a symbol where a literal symbol could be used instead.\n\nThere are two possible styles for this cop. strict (default) will register an offense for any incorrect usage. consistent additionally requires hashes to use the same style for every symbol key (ie. if any symbol key needs to be quoted it requires all keys to be quoted)."
    },
    "Lint/Syntax": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintsyntax",
      "description": "This cop repacks Parser’s diagnostics/errors into RuboCop’s offenses."
    },
    "Lint/ToEnumArguments": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#linttoenumarguments",
      "description": "This cop ensures that to_enum/enum_for, called for the current method, has correct arguments."
    },
    "Lint/ToJSON": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#linttojson",
      "description": "This cop checks to make sure #to_json includes an optional argument. When overriding #to_json, callers may invoke JSON generation via JSON.generate(your_obj). Since JSON#generate allows for an optional argument, your method should too."
    },
    "Lint/TopLevelReturnWithArgument": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#linttoplevelreturnwithargument",
      "description": "This cop checks for top level return with arguments. If there is a top-level return statement with an argument, then the argument is always ignored. This is detected automatically since Ruby 2.7."
    },
    "Lint/TrailingCommaInAttributeDeclaration": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#linttrailingcommainattributedeclaration",
      "description": "This cop checks for trailing commas in attribute declarations, such as #attr_reader. Leaving a trailing comma will nullify the next method definition by overriding it with a getter method."
    },
    "Lint/TripleQuotes": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#linttriplequotes",
      "description": "This cop checks for \"triple quotes\" (strings delimted by any odd number of quotes greater than 1).\n\nRuby allows multiple strings to be implicitly concatenated by just being adjacent in a statement (ie. \"foo\"\"bar\" == \"foobar\"). This sometimes gives the impression that there is something special about triple quotes, but in fact it is just extra unnecessary quotes and produces the same string. Each pair of quotes produces an additional concatenated empty string, so the result is still only the \"actual\" string within the delimiters."
    },
    "Lint/UnderscorePrefixedVariableName": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AllowKeywordBlockArguments": {
          "description": "Default: false",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintunderscoreprefixedvariablename",
      "description": "This cop checks for underscore-prefixed variables that are actually used.\n\nSince block keyword arguments cannot be arbitrarily named at call sites, the AllowKeywordBlockArguments will allow use of underscore- prefixed block keyword arguments."
    },
    "Lint/UnexpectedBlockArity": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "Methods": {
          "description": "Default: {\"chunk_while\"⇒2, \"each_with_index\"⇒2, \"each_with_object\"⇒2, \"inject\"⇒2, \"max\"⇒2, \"min\"⇒2, \"minmax\"⇒2, \"reduce\"⇒2, \"slice_when\"⇒2, \"sort\"⇒2}"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintunexpectedblockarity",
      "description": "This cop checks for a block that is known to need more positional block arguments than are given (by default this is configured for Enumerable methods needing 2 arguments). Optional arguments are allowed, although they don’t generally make sense as the default value will be used. Blocks that have no receiver, or take splatted arguments (ie. *args) are always accepted.\n\nKeyword arguments (including **kwargs) do not get counted towards this, as they are not used by the methods in question.\n\nMethod names and their expected arity can be configured like this:\n\nMethods: inject: 2 reduce: 2"
    },
    "Lint/UnifiedInteger": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintunifiedinteger",
      "description": "This cop checks for using Fixnum or Bignum constant."
    },
    "Lint/UnmodifiedReduceAccumulator": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintunmodifiedreduceaccumulator",
      "description": "Looks for reduce or inject blocks where the value returned (implicitly or explicitly) does not include the accumulator. A block is considered valid as long as at least one return value includes the accumulator.\n\nIf the accumulator is not included in the return value, then the entire block will just return a transformation of the last element value, and could be rewritten as such without a loop.\n\nAlso catches instances where an index of the accumulator is returned, as this may change the type of object being retained."
    },
    "Lint/UnreachableCode": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintunreachablecode",
      "description": "This cop checks for unreachable code. The check are based on the presence of flow of control statement in non-final position in begin (implicit) blocks."
    },
    "Lint/UnreachableLoop": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "IgnoredPatterns": {
          "description": "Default: `(?-mix:(exactly"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintunreachableloop",
      "description": "This cop checks for loops that will have at most one iteration.\n\nA loop that can never reach the second iteration is a possible error in the code. In rare cases where only one iteration (or at most one iteration) is intended behavior, the code should be refactored to use if conditionals.\n\nIgnoredPatterns can be used to match against the block receiver in order to allow code that would otherwise be registered as an offense (eg. times used not in an Enumerable context)."
    },
    "Lint/UnusedBlockArgument": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "IgnoreEmptyBlocks": {
          "description": "Default: true",
          "type": "boolean"
        },
        "AllowUnusedKeywordArguments": {
          "description": "Default: false",
          "type": "boolean"
        }
      },
      "$comment": null,
      "description": "This cop checks for unused block arguments."
    },
    "Lint/UnusedMethodArgument": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "AllowUnusedKeywordArguments": {
          "description": "Default: false",
          "type": "boolean"
        },
        "IgnoreEmptyMethods": {
          "description": "Default: true",
          "type": "boolean"
        },
        "IgnoreNotImplementedMethods": {
          "description": "Default: true",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintunusedmethodargument",
      "description": "This cop checks for unused method arguments."
    },
    "Lint/UriEscapeUnescape": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#linturiescapeunescape",
      "description": "This cop identifies places where URI.escape can be replaced by CGI.escape, URI.encode_www_form, or URI.encode_www_form_component depending on your specific use case. Also this cop identifies places where URI.unescape can be replaced by CGI.unescape, URI.decode_www_form, or URI.decode_www_form_component depending on your specific use case."
    },
    "Lint/UriRegexp": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#linturiregexp",
      "description": "This cop identifies places where URI.regexp is obsolete and should not be used. Instead, use URI::DEFAULT_PARSER.make_regexp."
    },
    "Lint/UselessAccessModifier": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "ContextCreatingMethods": {
          "description": "Default: []",
          "type": "array"
        },
        "MethodCreatingMethods": {
          "description": "Default: []",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintuselessaccessmodifier",
      "description": "This cop checks for redundant access modifiers, including those with no code, those which are repeated, and leading public modifiers in a class or module body. Conditionally-defined methods are considered as always being defined, and thus access modifiers guarding such methods are not redundant.\n\nThis cop has ContextCreatingMethods option. The default setting value is an empty array that means no method is specified. This setting is an array of methods which, when called, are known to create its own context in the module’s current access context.\n\nIt also has MethodCreatingMethods option. The default setting value is an empty array that means no method is specified. This setting is an array of methods which, when called, are known to create other methods in the module’s current access context."
    },
    "Lint/UselessAssignment": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintuselessassignment",
      "description": "This cop checks for every useless assignment to local variable in every scope. The basic idea for this cop was from the warning of ruby -cw:\n\nCurrently this cop has advanced logic that detects unreferenced reassignments and properly handles varied cases such as branch, loop, rescue, ensure, etc."
    },
    "Lint/UselessElseWithoutRescue": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintuselesselsewithoutrescue",
      "description": "This cop checks for useless else in begin..end without rescue."
    },
    "Lint/UselessMethodDefinition": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "AllowComments": {
          "description": "Default: true",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintuselessmethoddefinition",
      "description": "This cop checks for useless method definitions, specifically: empty constructors and methods just delegating to super.\n\nThis cop is marked as unsafe as it can trigger false positives for cases when an empty constructor just overrides the parent constructor, which is bad anyway."
    },
    "Lint/UselessSetterCall": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintuselesssettercall",
      "description": "This cop checks for setter call to local variable as the final expression of a function definition. Its auto-correction is marked as unsafe because return value will be changed."
    },
    "Lint/UselessTimes": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintuselesstimes",
      "description": "This cop checks for uses of Integer#times that will never yield (when the integer ⇐ 0) or that will only ever yield once (1.times).\n\nThis cop is marked as unsafe as times returns its receiver, which is usually OK, but might change behavior."
    },
    "Lint/Void": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "CheckForMethodsWithNoSideEffects": {
          "description": "Default: false",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_lint.html#lintvoid",
      "description": "This cop checks for operators, variables, literals, and nonmutating methods used in void context."
    },
    "Metrics/CyclomaticComplexity": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "IgnoredMethods": {
          "description": "Default: []",
          "type": "array"
        },
        "Max": {
          "description": "Default: 7",
          "type": "integer"
        }
      },
      "$comment": null,
      "description": "This cop checks that the cyclomatic complexity of methods is not higher than the configured maximum. The cyclomatic complexity is the number of linearly independent paths through a method. The algorithm counts decision points and adds one.\n\nAn if statement (or unless or ?:) increases the complexity by one. An else branch does not, since it doesn’t add a decision point. The && operator (or keyword and) can be converted to a nested if statement, and ||/or is shorthand for a sequence of ifs, so they also add one. Loops can be said to have an exit condition, so they add one. Blocks that are calls to builtin iteration methods (e.g. `ary.map{…​}) also add one, others are ignored."
    },
    "Metrics/AbcSize": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "IgnoredMethods": {
          "description": "Default: []",
          "type": "array"
        },
        "CountRepeatedAttributes": {
          "description": "Default: true",
          "type": "boolean"
        },
        "Max": {
          "description": "Default: 17",
          "type": "integer"
        }
      },
      "$comment": null,
      "description": "This cop checks that the ABC size of methods is not higher than the configured maximum. The ABC size is based on assignments, branches (method calls), and conditions. See http://c2.com/cgi/wiki?AbcMetric and https://en.wikipedia.org/wiki/ABC_Software_Metric.\n\nYou can have repeated \"attributes\" calls count as a single \"branch\". For this purpose, attributes are any method with no argument; no attempt is meant to distinguish actual attr_reader from other methods.\n\nThis cop also takes into account IgnoredMethods (defaults to [])"
    },
    "Metrics/BlockLength": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "description": "Default: */.gemspec",
          "type": "array"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "CountComments": {
          "description": "Default: false",
          "type": "boolean"
        },
        "Max": {
          "description": "Default: 25",
          "type": "integer"
        },
        "CountAsOne": {
          "description": "Default: []",
          "type": "array"
        },
        "ExcludedMethods": {
          "description": "Default: []",
          "type": "array"
        },
        "IgnoredMethods": {
          "description": "Default: refine",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_metrics.html#metricsblocklength",
      "description": "This cop checks if the length of a block exceeds some maximum value. Comment lines can optionally be ignored. The maximum allowed length is configurable. The cop can be configured to ignore blocks passed to certain methods.\n\nYou can set literals you want to fold with CountAsOne. Available are: 'array', 'hash', and 'heredoc'. Each literal will be counted as one line regardless of its actual size."
    },
    "Metrics/BlockNesting": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "CountBlocks": {
          "description": "Default: false",
          "type": "boolean"
        },
        "Max": {
          "description": "Default: 3",
          "type": "integer"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_metrics.html#metricsblocknesting",
      "description": "This cop checks for excessive nesting of conditional and looping constructs.\n\nYou can configure if blocks are considered using the CountBlocks option. When set to false (the default) blocks are not counted towards the nesting level. Set to true to count blocks as well.\n\nThe maximum level of nesting allowed is configurable."
    },
    "Metrics/ClassLength": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "CountComments": {
          "description": "Default: false",
          "type": "boolean"
        },
        "Max": {
          "description": "Default: 100",
          "type": "integer"
        },
        "CountAsOne": {
          "description": "Default: []",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_metrics.html#metricsclasslength",
      "description": "This cop checks if the length a class exceeds some maximum value. Comment lines can optionally be ignored. The maximum allowed length is configurable.\n\nYou can set literals you want to fold with CountAsOne. Available are: 'array', 'hash', and 'heredoc'. Each literal will be counted as one line regardless of its actual size."
    },
    "Metrics/MethodLength": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "CountComments": {
          "description": "Default: false",
          "type": "boolean"
        },
        "Max": {
          "description": "Default: 10",
          "type": "integer"
        },
        "CountAsOne": {
          "description": "Default: []",
          "type": "array"
        },
        "ExcludedMethods": {
          "description": "Default: []",
          "type": "array"
        },
        "IgnoredMethods": {
          "description": "Default: []",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_metrics.html#metricsmethodlength",
      "description": "This cop checks if the length of a method exceeds some maximum value. Comment lines can optionally be ignored. The maximum allowed length is configurable.\n\nYou can set literals you want to fold with CountAsOne. Available are: 'array', 'hash', and 'heredoc'. Each literal will be counted as one line regardless of its actual size."
    },
    "Metrics/ModuleLength": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "CountComments": {
          "description": "Default: false",
          "type": "boolean"
        },
        "Max": {
          "description": "Default: 100",
          "type": "integer"
        },
        "CountAsOne": {
          "description": "Default: []",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_metrics.html#metricsmodulelength",
      "description": "This cop checks if the length a module exceeds some maximum value. Comment lines can optionally be ignored. The maximum allowed length is configurable.\n\nYou can set literals you want to fold with CountAsOne. Available are: 'array', 'hash', and 'heredoc'. Each literal will be counted as one line regardless of its actual size."
    },
    "Metrics/ParameterLists": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "Max": {
          "description": "Default: 5",
          "type": "integer"
        },
        "CountKeywordArgs": {
          "description": "Default: true",
          "type": "boolean"
        },
        "MaxOptionalParameters": {
          "description": "Default: 3",
          "type": "integer"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_metrics.html#metricsparameterlists",
      "description": "This cop checks for methods with too many parameters.\n\nThe maximum number of parameters is configurable. Keyword arguments can optionally be excluded from the total count, as they add less complexity than positional or optional parameters.\n\nThis cop also checks for the maximum number of optional parameters. This can be configured using the MaxOptionalParameters config option."
    },
    "Metrics/PerceivedComplexity": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "IgnoredMethods": {
          "description": "Default: []",
          "type": "array"
        },
        "Max": {
          "description": "Default: 8",
          "type": "integer"
        }
      },
      "$comment": null,
      "description": "This cop tries to produce a complexity score that’s a measure of the complexity the reader experiences when looking at a method. For that reason it considers when nodes as something that doesn’t add as much complexity as an if or a &&. Except if it’s one of those special case/when constructs where there’s no expression after case. Then the cop treats it as an if/elsif/elsif…​ and lets all the when nodes count. In contrast to the CyclomaticComplexity cop, this cop considers else nodes as adding complexity."
    },
    "Naming/AccessorMethodName": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_naming.html#namingaccessormethodname",
      "description": "This cop makes sure that accessor methods are named properly. Applies to both instance and class methods."
    },
    "Naming/AsciiIdentifiers": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AsciiConstants": {
          "description": "Default: true",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_naming.html#namingasciiidentifiers",
      "description": "This cop checks for non-ascii characters in identifier and constant names. Identifiers are always checked and whether constants are checked can be controlled using AsciiConstants config."
    },
    "Naming/BlockParameterName": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "MinNameLength": {
          "description": "Default: 1",
          "type": "integer"
        },
        "AllowNamesEndingInNumbers": {
          "description": "Default: true",
          "type": "boolean"
        },
        "AllowedNames": {
          "description": "Default: []",
          "type": "array"
        },
        "ForbiddenNames": {
          "description": "Default: []",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_naming.html#namingblockparametername",
      "description": "This cop checks block parameter names for how descriptive they are. It is highly configurable.\n\nThe MinNameLength config option takes an integer. It represents the minimum amount of characters the name must be. Its default is 1. The AllowNamesEndingInNumbers config option takes a boolean. When set to false, this cop will register offenses for names ending with numbers. Its default is false. The AllowedNames config option takes an array of permitted names that will never register an offense. The ForbiddenNames config option takes an array of restricted names that will always register an offense."
    },
    "Naming/ClassAndModuleCamelCase": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AllowedNames": {
          "description": "Default: module_parent",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_naming.html#namingclassandmodulecamelcase",
      "description": "This cop checks for class and module names with an underscore in them.\n\nAllowedNames config takes an array of permitted names. Its default value is ['module_parent']. These names can be full class/module names or part of the name. eg. Adding my_class to the AllowedNames config will allow names like my_class, my_class::User, App::my_class, App::my_class::User, etc."
    },
    "Naming/ConstantName": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_naming.html#namingconstantname",
      "description": "This cop checks whether constant names are written using SCREAMING_SNAKE_CASE.\n\nTo avoid false positives, it ignores cases in which we cannot know for certain the type of value that would be assigned to a constant."
    },
    "Naming/FileName": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "description": "Default: []",
          "type": "array"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "ExpectMatchingDefinition": {
          "description": "Default: false",
          "type": "boolean"
        },
        "CheckDefinitionPathHierarchy": {
          "description": "Default: true",
          "type": "boolean"
        },
        "Regex": {
          "description": "Default: <none>"
        },
        "IgnoreExecutableScripts": {
          "description": "Default: true",
          "type": "boolean"
        },
        "AllowedAcronyms": {
          "description": "Default: CLI, DSL, ACL, API, ASCII, CPU, CSS, DNS, EOF, GUID, HTML, HTTP, HTTPS, ID, IP, JSON, LHS, QPS, RAM, RHS, RPC, SLA, SMTP, SQL, SSH, TCP, TLS, TTL, UDP, UI, UID, UUID, URI, URL, UTF8, VM, XML, XMPP, XSRF, XSS",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_naming.html#namingfilename",
      "description": "This cop makes sure that Ruby source files have snake_case names. Ruby scripts (i.e. source files with a shebang in the first line) are ignored.\n\nThe cop also ignores .gemspec files, because Bundler recommends using dashes to separate namespaces in nested gems (i.e. bundler-console becomes Bundler::Console). As such, the gemspec is supposed to be named bundler-console.gemspec."
    },
    "Naming/HeredocDelimiterCase": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: uppercase"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_naming.html#namingheredocdelimitercase",
      "description": "This cop checks that your heredocs are using the configured case. By default it is configured to enforce uppercase heredocs."
    },
    "Naming/HeredocDelimiterNaming": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "ForbiddenDelimiters": {
          "description": "Default: `(?-mix:(^"
        },
        "END)(\\s": {
          "description": "Default: $))`",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_naming.html#namingheredocdelimiternaming",
      "description": "This cop checks that your heredocs are using meaningful delimiters. By default it disallows END and EO*, and can be configured through forbidden listing additional delimiters."
    },
    "Naming/MemoizedInstanceVariableName": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "EnforcedStyleForLeadingUnderscores": {
          "description": "Default: disallowed"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_naming.html#namingmemoizedinstancevariablename",
      "description": "This cop checks for memoized methods whose instance variable name does not match the method name. Applies to both regular methods (defined with def) and dynamic methods (defined with define_method or define_singleton_method).\n\nThis cop can be configured with the EnforcedStyleForLeadingUnderscores directive. It can be configured to allow for memoized instance variables prefixed with an underscore. Prefixing ivars with an underscore is a convention that is used to implicitly indicate that an ivar should not be set or referenced outside of the memoization method.\n\nThis cop relies on the pattern @instance_var ||= …​, but this is sometimes used for other purposes than memoization so this cop is considered unsafe."
    },
    "Naming/MethodName": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "EnforcedStyle": {
          "description": "Default: snake_case"
        },
        "IgnoredPatterns": {
          "description": "Default: []",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_naming.html#namingmethodname",
      "description": "This cop makes sure that all methods use the configured style, snake_case or camelCase, for their names.\n\nThis cop has IgnoredPatterns configuration option.\n\nMethod names matching patterns are always allowed."
    },
    "Naming/MethodParameterName": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "MinNameLength": {
          "description": "Default: 3",
          "type": "integer"
        },
        "AllowNamesEndingInNumbers": {
          "description": "Default: true",
          "type": "boolean"
        },
        "AllowedNames": {
          "description": "Default: at, by, db, id, in, io, ip, of, on, os, pp, to",
          "type": "array"
        },
        "ForbiddenNames": {
          "description": "Default: []",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_naming.html#namingmethodparametername",
      "description": "This cop checks method parameter names for how descriptive they are. It is highly configurable.\n\nThe MinNameLength config option takes an integer. It represents the minimum amount of characters the name must be. Its default is 3. The AllowNamesEndingInNumbers config option takes a boolean. When set to false, this cop will register offenses for names ending with numbers. Its default is false. The AllowedNames config option takes an array of permitted names that will never register an offense. The ForbiddenNames config option takes an array of restricted names that will always register an offense."
    },
    "Naming/BinaryOperatorParameterName": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_naming.html#namingbinaryoperatorparametername",
      "description": "This cop makes sure that certain binary operator methods have their sole parameter named other."
    },
    "Naming/PredicateName": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "description": "Default: spec/*/",
          "type": "array"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "NamePrefix": {
          "description": "Default: is_, has_, have_",
          "type": "array"
        },
        "ForbiddenPrefixes": {
          "description": "Default: is_, has_, have_",
          "type": "array"
        },
        "AllowedMethods": {
          "description": "Default: is_a?",
          "type": "array"
        },
        "MethodDefinitionMacros": {
          "description": "Default: define_method, define_singleton_method",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_naming.html#namingpredicatename",
      "description": "This cop makes sure that predicates are named properly."
    },
    "Naming/RescuedExceptionsVariableName": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "PreferredName": {
          "description": "Default: e",
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_naming.html#namingrescuedexceptionsvariablename",
      "description": "This cop makes sure that rescued exceptions variables are named as expected.\n\nThe PreferredName config option takes a String. It represents the required name of the variable. Its default is e."
    },
    "Naming/VariableName": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "EnforcedStyle": {
          "description": "Default: snake_case"
        },
        "AllowedIdentifiers": {
          "description": "Default: []",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_naming.html#namingvariablename",
      "description": "This cop makes sure that all variables use the configured style, snake_case or camelCase, for their names."
    },
    "Naming/VariableNumber": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "EnforcedStyle": {
          "description": "Default: normalcase"
        },
        "CheckMethodNames": {
          "description": "Default: true",
          "type": "boolean"
        },
        "CheckSymbols": {
          "description": "Default: true",
          "type": "boolean"
        },
        "AllowedIdentifiers": {
          "description": "Default: capture3, iso8601, rfc1123_date, rfc822, rfc2822, rfc3339",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_naming.html#namingvariablenumber",
      "description": "This cop makes sure that all numbered variables use the configured style, snake_case, normalcase, or non_integer, for their numbering.\n\nAdditionally, CheckMethodNames and CheckSymbols configuration options can be used to specify whether method names and symbols should be checked. Both are enabled by default."
    },
    "Style/AccessModifierDeclarations": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "EnforcedStyle": {
          "description": "Default: group"
        },
        "AllowModifiersOnSymbols": {
          "description": "Default: true",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleaccessmodifierdeclarations",
      "description": "Access modifiers should be declared to apply to a group of methods or inline before each method, depending on configuration. EnforcedStyle config covers only method definitions. Applications of visibility methods to symbols can be controlled using AllowModifiersOnSymbols config."
    },
    "Style/AccessorGrouping": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: grouped"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleaccessorgrouping",
      "description": "This cop checks for grouping of accessors in class and module bodies. By default it enforces accessors to be placed in grouped declarations, but it can be configured to enforce separating them in multiple declarations."
    },
    "Style/Alias": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: prefer_alias"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylealias",
      "description": "This cop enforces the use of either #alias or #alias_method depending on configuration. It also flags uses of alias :symbol rather than alias bareword."
    },
    "Style/AndOr": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: conditionals"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleandor",
      "description": "This cop checks for uses of and and or, and suggests using && and || instead. It can be configured to check only in conditions or in all contexts."
    },
    "Style/ArgumentsForwarding": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "AllowOnlyRestArgument": {
          "description": "Default: true",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleargumentsforwarding",
      "description": "In Ruby 2.7, arguments forwarding has been added.\n\nThis cop identifies places where do_something(*args, &block) can be replaced by do_something(…​)."
    },
    "Style/ArrayCoercion": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylearraycoercion",
      "description": "This cop enforces the use of Array() instead of explicit Array check or [*var].\n\nThis cop is disabled by default because false positive will occur if the argument of Array() is not an array (e.g. Hash, Set), an array will be returned as an incompatibility result."
    },
    "Style/ArrayJoin": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylearrayjoin",
      "description": "This cop checks for uses of \"*\" as a substitute for join.\n\nNot all cases can reliably checked, due to Ruby’s dynamic types, so we consider only cases when the first argument is an array literal or the second is a string literal."
    },
    "Style/AsciiComments": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AllowedChars": {
          "description": "Default: ©",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleasciicomments",
      "description": "This cop checks for non-ascii (non-English) characters in comments. You could set an array of allowed non-ascii chars in AllowedChars attribute (copyright notice \"©\" by default)."
    },
    "Style/Attr": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleattr",
      "description": "This cop checks for uses of Module#attr."
    },
    "Style/AutoResourceCleanup": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleautoresourcecleanup",
      "description": "This cop checks for cases when you could use a block accepting version of a method that does automatic resource cleanup."
    },
    "Style/BarePercentLiterals": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: bare_percent"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylebarepercentliterals",
      "description": "This cop checks if usage of %() or %Q() matches configuration."
    },
    "Style/BeginBlock": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylebeginblock",
      "description": "This cop checks for BEGIN blocks."
    },
    "Style/BisectedAttrAccessor": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylebisectedattraccessor",
      "description": "This cop checks for places where attr_reader and attr_writer for the same method can be combined into single attr_accessor."
    },
    "Style/BlockComments": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleblockcomments",
      "description": "This cop looks for uses of block comments (=begin…​=end)."
    },
    "Style/BlockDelimiters": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: line_count_based"
        },
        "ProceduralMethods": {
          "description": "Default: benchmark, bm, bmbm, create, each_with_object, measure, new, realtime, tap, with_object",
          "type": "array"
        },
        "FunctionalMethods": {
          "description": "Default: let, let!, subject, watch",
          "type": "array"
        },
        "IgnoredMethods": {
          "description": "Default: lambda, proc, it",
          "type": "array"
        },
        "AllowBracesOnProceduralOneLiners": {
          "description": "Default: false",
          "type": "boolean"
        },
        "BracesRequiredMethods": {
          "description": "Default: []",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleblockdelimiters",
      "description": "Check for uses of braces or do/end around single line or multi-line blocks."
    },
    "Style/CaseEquality": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "AllowOnConstant": {
          "description": "Default: false",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylecaseequality",
      "description": "This cop checks for uses of the case equality operator(===)."
    },
    "Style/CaseLikeIf": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylecaselikeif",
      "description": "This cop identifies places where if-elsif constructions can be replaced with case-when."
    },
    "Style/CharacterLiteral": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylecharacterliteral",
      "description": "Checks for uses of the character literal ?x."
    },
    "Style/ClassAndModuleChildren": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: nested"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleclassandmodulechildren",
      "description": "This cop checks the style of children definitions at classes and modules. Basically there are two different styles:\n\nThe compact style is only forced for classes/modules with one child."
    },
    "Style/ClassCheck": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: is_a?"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleclasscheck",
      "description": "This cop enforces consistent use of Object#is_a? or Object#kind_of?."
    },
    "Style/ClassEqualityComparison": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "IgnoredMethods": {
          "description": "Default: ==, equal?, eql?",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleclassequalitycomparison",
      "description": "This cop enforces the use of Object#instance_of? instead of class comparison for equality."
    },
    "Style/ClassMethods": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleclassmethods",
      "description": "This cop checks for uses of the class/module name instead of self, when defining class/module methods."
    },
    "Style/ClassMethodsDefinitions": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: def_self"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleclassmethodsdefinitions",
      "description": "This cop enforces using def self.method_name or class << self to define class methods."
    },
    "Style/ClassVars": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleclassvars",
      "description": "This cop checks for uses of class variables. Offenses are signaled only on assignment to class variables to reduce the number of offenses that would be reported.\n\nYou have to be careful when setting a value for a class variable; if a class has been inherited, changing the value of a class variable also affects the inheriting classes. This means that it’s almost always better to use a class instance variable instead."
    },
    "Style/CollectionCompact": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylecollectioncompact",
      "description": "This cop checks for places where custom logic on rejection nils from arrays and hashes can be replaced with {Array,Hash}#{compact,compact!}.\n\nIt is marked as unsafe by default because false positives may occur in the nil check of block arguments to the receiver object. For example, [[1, 2], [3, nil]].reject { |first, second| second.nil? } and [[1, 2], [3, nil]].compact are not compatible. This will work fine when the receiver is a hash object."
    },
    "Style/CollectionMethods": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "PreferredMethods": {
          "description": "Default: {\"collect\"⇒\"map\", \"collect!\"⇒\"map!\", \"inject\"⇒\"reduce\", \"detect\"⇒\"find\", \"find_all\"⇒\"select\", \"member?\"⇒\"include?\"}"
        },
        "MethodsAcceptingSymbol": {
          "description": "Default: inject, reduce",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylecollectionmethods",
      "description": "This cop enforces the use of consistent method names from the Enumerable module.\n\nUnfortunately we cannot actually know if a method is from Enumerable or not (static analysis limitation), so this cop can yield some false positives.\n\nYou can customize the mapping from undesired method to desired method.\n\ne.g. to use detect over find:\n\nThe default mapping for PreferredMethods behaves as follows."
    },
    "Style/ColonMethodCall": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylecolonmethodcall",
      "description": ""
    },
    "Style/ColonMethodDefinition": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylecolonmethoddefinition",
      "description": "This cop checks for class methods that are defined using the :: operator instead of the . operator."
    },
    "Style/CombinableLoops": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylecombinableloops",
      "description": "This cop checks for places where multiple consecutive loops over the same data can be combined into a single loop. It is very likely that combining them will make the code more efficient and more concise.\n\nIt is marked as unsafe, because the first loop might modify a state that the second loop depends on; these two aren’t combinable."
    },
    "Style/CommandLiteral": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: backticks"
        },
        "AllowInnerBackticks": {
          "description": "Default: false",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylecommandliteral",
      "description": "This cop enforces using `` or %x around command literals."
    },
    "Style/CommentAnnotation": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "Keywords": {
          "description": "Default: TODO, FIXME, OPTIMIZE, HACK, REVIEW, NOTE",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylecommentannotation",
      "description": "This cop checks that comment annotation keywords are written according to guidelines."
    },
    "Style/CommentedKeyword": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylecommentedkeyword",
      "description": "This cop checks for comments put on the same line as some keywords. These keywords are: class, module, def, begin, end.\n\nNote that some comments (:nodoc:, :yields:, rubocop:disable and rubocop:todo) are allowed.\n\nAuto-correction removes comments from end keyword and keeps comments for class, module, def and begin above the keyword."
    },
    "Style/ConditionalAssignment": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: assign_to_condition"
        },
        "SingleLineConditionsOnly": {
          "description": "Default: true",
          "type": "boolean"
        },
        "IncludeTernaryExpressions": {
          "description": "Default: true",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleconditionalassignment",
      "description": "Check for if and case statements where each branch is used for assignment to the same variable when using the return of the condition can be used instead."
    },
    "Style/ConstantVisibility": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "IgnoreModules": {
          "description": "Default: false",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleconstantvisibility",
      "description": "This cop checks that constants defined in classes and modules have an explicit visibility declaration. By default, Ruby makes all class- and module constants public, which litters the public API of the class or module. Explicitly declaring a visibility makes intent more clear, and prevents outside actors from touching private state."
    },
    "Style/Copyright": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "Notice": {
          "description": "Default: ^Copyright (\\(c\\) )?2[0-9]{3} .+",
          "type": "string"
        },
        "AutocorrectNotice": {
          "description": "Default: ``",
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylecopyright",
      "description": "Check that a copyright notice was given in each source file.\n\nThe default regexp for an acceptable copyright notice can be found in config/default.yml. The default can be changed as follows:\n\nThis regex string is treated as an unanchored regex. For each file that RuboCop scans, a comment that matches this regex must be found or an offense is reported."
    },
    "Style/DateTime": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "AllowCoercion": {
          "description": "Default: false",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styledatetime",
      "description": "This cop checks for consistent usage of the DateTime class over the Time class. This cop is disabled by default since these classes, although highly overlapping, have particularities that make them not replaceable in certain situations when dealing with multiple timezones and/or DST."
    },
    "Style/DefWithParentheses": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styledefwithparentheses",
      "description": "This cop checks for parentheses in the definition of a method, that does not take any arguments. Both instance and class/singleton methods are checked."
    },
    "Style/Dir": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styledir",
      "description": "This cop checks for places where the #dir method can replace more complex constructs to retrieve a canonicalized absolute path to the current file."
    },
    "Style/DisableCopsWithinSourceCodeDirective": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "AllowedCops": {
          "description": "Default: []",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styledisablecopswithinsourcecodedirective",
      "description": "Detects comments to enable/disable RuboCop. This is useful if want to make sure that every RuboCop error gets fixed and not quickly disabled with a comment.\n\nSpecific cops can be allowed with the AllowedCops configuration. Note that if this configuration is set, rubocop:disable all is still disallowed."
    },
    "Style/DocumentationMethod": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "description": "Default: spec//, test//",
          "type": "array"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "RequireForNonPublicMethods": {
          "description": "Default: false",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styledocumentationmethod",
      "description": "This cop checks for missing documentation comment for public methods. It can optionally be configured to also require documentation for non-public methods."
    },
    "Style/Documentation": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "description": "Default: spec//, test//",
          "type": "array"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AllowedConstants": {
          "description": "Default: []",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styledocumentation",
      "description": "This cop checks for missing top-level documentation of classes and modules. Classes with no body are exempt from the check and so are namespace modules - modules that have nothing in their bodies except classes, other modules, constant definitions or constant visibility declarations.\n\nThe documentation requirement is annulled if the class or module has a \":nodoc:\" comment next to it. Likewise, \":nodoc: all\" does the same for all its children."
    },
    "Style/DocumentDynamicEvalDefinition": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styledocumentdynamicevaldefinition",
      "description": "When using class_eval (or other eval) with string interpolation, add a comment block showing its appearance if interpolated (a practice used in Rails code)."
    },
    "Style/DoubleCopDisableDirective": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styledoublecopdisabledirective",
      "description": "Detects double disable comments on one line. This is mostly to catch automatically generated comments that need to be regenerated."
    },
    "Style/DoubleNegation": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: allowed_in_returns"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styledoublenegation",
      "description": "This cop checks for uses of double negation (!!) to convert something to a boolean value.\n\nWhen using EnforcedStyle: allowed_in_returns, allow double negation in contexts that use boolean as a return value. When using EnforcedStyle: forbidden, double negation should be forbidden always.\n\nPlease, note that when something is a boolean value !!something and !something.nil? are not the same thing. As you’re unlikely to write code that can accept values of any type this is rarely a problem in practice."
    },
    "Style/EachForSimpleLoop": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleeachforsimpleloop",
      "description": "This cop checks for loops which iterate a constant number of times, using a Range literal and #each. This can be done more readably using Integer#times.\n\nThis check only applies if the block takes no parameters."
    },
    "Style/EachWithObject": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleeachwithobject",
      "description": "This cop looks for inject / reduce calls where the passed in object is returned at the end and so could be replaced by each_with_object without the need to return the object at the end.\n\nHowever, we can’t replace with each_with_object if the accumulator parameter is assigned to within the block."
    },
    "Style/EmptyBlockParameter": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleemptyblockparameter",
      "description": "This cop checks for pipes for empty block parameters. Pipes for empty block parameters do not cause syntax errors, but they are redundant."
    },
    "Style/EmptyCaseCondition": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleemptycasecondition",
      "description": "This cop checks for case statements with an empty condition."
    },
    "Style/EmptyElse": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: both"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleemptyelse",
      "description": "Checks for empty else-clauses, possibly including comments and/or an explicit nil depending on the EnforcedStyle."
    },
    "Style/EmptyLambdaParameter": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleemptylambdaparameter",
      "description": "This cop checks for parentheses for empty lambda parameters. Parentheses for empty lambda parameters do not cause syntax errors, but they are redundant."
    },
    "Style/EmptyLiteral": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleemptyliteral",
      "description": "This cop checks for the use of a method, the result of which would be a literal, like an empty array, hash, or string."
    },
    "Style/EmptyMethod": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: compact"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleemptymethod",
      "description": "This cop checks for the formatting of empty method definitions. By default it enforces empty method definitions to go on a single line (compact style), but it can be configured to enforce the end to go on its own line (expanded style)."
    },
    "Style/EndlessMethod": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: allow_single_line"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleendlessmethod",
      "description": "This cop checks for endless methods.\n\nIt can enforce either the use of endless methods definitions for single-lined method bodies, or disallow endless methods.\n\nOther method definition types are not considered by this cop.\n\nThe supported styles are:"
    },
    "Style/Encoding": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleencoding",
      "description": "This cop checks ensures source files have no utf-8 encoding comments."
    },
    "Style/EndBlock": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleendblock",
      "description": "This cop checks for END blocks."
    },
    "Style/EvalWithLocation": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleevalwithlocation",
      "description": "This cop ensures that eval methods (eval, instance_eval, class_eval and module_eval) are given filename and line number values (FILE and LINE). This data is used to ensure that any errors raised within the evaluated code will be given the correct identification in a backtrace.\n\nThe cop also checks that the line number given relative to LINE is correct.\n\nThis cop will autocorrect incorrect or missing filename and line number values. However, if eval is called without a binding argument, the cop will not attempt to automatically add a binding, or add filename and line values.\n\nThis cop works only when a string literal is given as a code string. No offence is reported if a string variable is given as below:"
    },
    "Style/EvenOdd": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleevenodd",
      "description": "This cop checks for places where Integer#even? or Integer#odd? can be used."
    },
    "Style/ExpandPathArguments": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleexpandpatharguments",
      "description": "This cop checks for use of the File.expand_path arguments. Likewise, it also checks for the Pathname.new argument.\n\nContrastive bad case and good case are alternately shown in the following examples."
    },
    "Style/ExplicitBlockArgument": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleexplicitblockargument",
      "description": "This cop enforces the use of explicit block argument to avoid writing block literal that just passes its arguments to another block."
    },
    "Style/ExponentialNotation": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "EnforcedStyle": {
          "description": "Default: scientific"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleexponentialnotation",
      "description": "This cop enforces consistency when using exponential notation for numbers in the code (eg 1.2e4). Different styles are supported:"
    },
    "Style/FloatDivision": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: single_coerce"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylefloatdivision",
      "description": "This cop checks for division with integers coerced to floats. It is recommended to either always use fdiv or coerce one side only. This cop also provides other options for code consistency.\n\nThis cop is marked as unsafe, because if operand variable is a string object then .to_f will be removed and an error will occur."
    },
    "Style/For": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: each"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylefor",
      "description": "This cop looks for uses of the for keyword or each method. The preferred alternative is set in the EnforcedStyle configuration parameter. An each call with a block on a single line is always allowed."
    },
    "Style/FormatString": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: format"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleformatstring",
      "description": "This cop enforces the use of a single string formatting utility. Valid options include Kernel#format, Kernel#sprintf and String#%.\n\nThe detection of String#% cannot be implemented in a reliable manner for all cases, so only two scenarios are considered - if the first argument is a string literal and if the second argument is an array literal."
    },
    "Style/FormatStringToken": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "EnforcedStyle": {
          "description": "Default: annotated"
        },
        "MaxUnannotatedPlaceholdersAllowed": {
          "description": "Default: 1",
          "type": "integer"
        },
        "IgnoredMethods": {
          "description": "Default: []",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleformatstringtoken",
      "description": "Use a consistent style for named format string tokens.\n\nThis cop can be customized ignored methods with IgnoredMethods.\n\nIt is allowed to contain unannotated token if the number of them is less than or equals to MaxUnannotatedPlaceholdersAllowed."
    },
    "Style/FrozenStringLiteralComment": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: always"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylefrozenstringliteralcomment",
      "description": "This cop is designed to help you transition from mutable string literals to frozen string literals. It will add the comment # frozen_string_literal: true to the top of files to enable frozen string literals. Frozen string literals may be default in future Ruby. The comment will be added below a shebang and encoding comment."
    },
    "Style/GlobalStdStream": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleglobalstdstream",
      "description": "This cop enforces the use of $stdout/$stderr/$stdin instead of STDOUT/STDERR/STDIN. STDOUT/STDERR/STDIN are constants, and while you can actually reassign (possibly to redirect some stream) constants in Ruby, you’ll get an interpreter warning if you do so."
    },
    "Style/GlobalVars": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AllowedVariables": {
          "description": "Default: []",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleglobalvars",
      "description": "This cop looks for uses of global variables. It does not report offenses for built-in global variables. Built-in global variables are allowed by default. Additionally users can allow additional variables via the AllowedVariables option.\n\nNote that backreferences like $1, $2, etc are not global variables."
    },
    "Style/GuardClause": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "MinBodyLength": {
          "description": "Default: 1",
          "type": "integer"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleguardclause",
      "description": "Use a guard clause instead of wrapping the code inside a conditional expression"
    },
    "Style/HashAsLastArrayItem": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: braces"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylehashaslastarrayitem",
      "description": "Checks for presence or absence of braces around hash literal as a last array item depending on configuration."
    },
    "Style/HashConversion": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "AllowSplatArgument": {
          "description": "Default: true",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylehashconversion",
      "description": "This cop checks the usage of pre-2.1 Hash[args] method of converting enumerables and sequences of values to hashes.\n\nCorrection code from splat argument (Hash[*ary]) is not simply determined. For example, Hash[*ary] can be replaced with ary.each_slice(2).to_h but it will be complicated. So, AllowSplatArgument option is true by default to allow splat argument for simple code."
    },
    "Style/HashEachMethods": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylehasheachmethods",
      "description": "This cop checks for uses of each_key and each_value Hash methods."
    },
    "Style/HashExcept": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylehashexcept",
      "description": "This cop checks for usages of Hash#reject, Hash#select, and Hash#filter methods that can be replaced with Hash#except method.\n\nThis cop should only be enabled on Ruby version 3.0 or higher. (Hash#except was added in Ruby 3.0.)\n\nFor safe detection, it is limited to commonly used string and symbol comparisons when used ==. And do not check Hash#delete_if and Hash#keep_if to change receiver object."
    },
    "Style/HashLikeCase": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "MinBranchesCount": {
          "description": "Default: 3",
          "type": "integer"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylehashlikecase",
      "description": "This cop checks for places where case-when represents a simple 1:1 mapping and can be replaced with a hash lookup."
    },
    "Style/HashSyntax": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: ruby19"
        },
        "UseHashRocketsWithSymbolValues": {
          "description": "Default: false",
          "type": "boolean"
        },
        "PreferHashRocketsForNonAlnumEndingSymbols": {
          "description": "Default: false",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylehashsyntax",
      "description": "This cop checks hash literal syntax.\n\nIt can enforce either the use of the class hash rocket syntax or the use of the newer Ruby 1.9 syntax (when applicable).\n\nA separate offense is registered for each problematic pair.\n\nThe supported styles are:"
    },
    "Style/HashTransformKeys": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylehashtransformkeys",
      "description": "This cop looks for uses of .each_with_object({}) {…​}, .map {…​}.to_h, and Hash[_.map {…​}] that are actually just transforming the keys of a hash, and tries to use a simpler & faster call to transform_keys instead.\n\nThis can produce false positives if we are transforming an enumerable of key-value-like pairs that isn’t actually a hash, e.g.: [[k1, v1], [k2, v2], …​]\n\nThis cop should only be enabled on Ruby version 2.5 or newer (transform_keys was added in Ruby 2.5.)"
    },
    "Style/HashTransformValues": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylehashtransformvalues",
      "description": "This cop looks for uses of .each_with_object({}) {…​}, .map {…​}.to_h, and Hash[_.map {…​}] that are actually just transforming the values of a hash, and tries to use a simpler & faster call to transform_values instead.\n\nThis can produce false positives if we are transforming an enumerable of key-value-like pairs that isn’t actually a hash, e.g.: [[k1, v1], [k2, v2], …​]\n\nThis cop should only be enabled on Ruby version 2.4 or newer (transform_values was added in Ruby 2.4.)"
    },
    "Style/IdenticalConditionalBranches": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleidenticalconditionalbranches",
      "description": "This cop checks for identical expressions at the beginning or end of each branch of a conditional expression. Such expressions should normally be placed outside the conditional expression - before or after it."
    },
    "Style/IfInsideElse": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "AllowIfModifier": {
          "description": "Default: false",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleifinsideelse",
      "description": "If the else branch of a conditional consists solely of an if node, it can be combined with the else to become an elsif. This helps to keep the nesting level from getting too deep."
    },
    "Style/IfUnlessModifier": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleifunlessmodifier",
      "description": "Checks for if and unless statements that would fit on one line if written as modifier if/unless. The cop also checks for modifier if/unless lines that exceed the maximum line length.\n\nThe maximum line length is configured in the Layout/LineLength cop. The tab size is configured in the IndentationWidth of the Layout/IndentationStyle cop."
    },
    "Style/IfUnlessModifierOfIfUnless": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleifunlessmodifierofifunless",
      "description": "Checks for if and unless statements used as modifiers of other if or unless statements."
    },
    "Style/IfWithBooleanLiteralBranches": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "AllowedMethods": {
          "description": "Default: nonzero?",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleifwithbooleanliteralbranches",
      "description": "This cop checks for redundant if with boolean literal branches. It checks only conditions to return boolean value (true or false) for safe detection. The conditions to be checked are comparison methods, predicate methods, and double negative. However, auto-correction is unsafe because there is no guarantee that all predicate methods will return boolean value. Those methods can be allowed with AllowedMethods config."
    },
    "Style/IfWithSemicolon": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleifwithsemicolon",
      "description": "Checks for uses of semicolon in if statements."
    },
    "Style/ImplicitRuntimeError": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleimplicitruntimeerror",
      "description": "This cop checks for raise or fail statements which do not specify an explicit exception class. (This raises a RuntimeError. Some projects might prefer to use exception classes which more precisely identify the nature of the error.)"
    },
    "Style/InfiniteLoop": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleinfiniteloop",
      "description": "Use Kernel#loop for infinite loops.\n\nThis cop is marked as unsafe as the rule does not necessarily apply if the body might raise a StopIteration exception; contrary to other infinite loops, Kernel#loop silently rescues that and returns nil."
    },
    "Style/InverseMethods": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "InverseMethods": {
          "description": "Default: {:any?⇒:none?, :even?⇒:odd?, :==⇒:!=, :=⇒:!, :<⇒:>=, :>⇒:⇐}"
        },
        "InverseBlocks": {
          "description": "Default: {:select⇒:reject, :select!⇒:reject!}"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleinversemethods",
      "description": "This cop check for usages of not (not or !) called on a method when an inverse of that method can be used instead. Methods that can be inverted by a not (not or !) should be defined in InverseMethods Methods that are inverted by inverting the return of the block that is passed to the method should be defined in InverseBlocks"
    },
    "Style/InlineComment": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleinlinecomment",
      "description": "This cop checks for trailing inline comments."
    },
    "Style/IpAddresses": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "description": "Default: /.gemfile, /Gemfile, /gems.rb, /.gemspec",
          "type": "array"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AllowedAddresses": {
          "description": "Default: ::",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleipaddresses",
      "description": "This cop checks for hardcoded IP addresses, which can make code brittle. IP addresses are likely to need to be changed when code is deployed to a different server or environment, which may break a deployment if forgotten. Prefer setting IP addresses in ENV or other configuration."
    },
    "Style/KeywordParametersOrder": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylekeywordparametersorder",
      "description": "This cop enforces that optional keyword parameters are placed at the end of the parameters list.\n\nThis improves readability, because when looking through the source, it is expected to find required parameters at the beginning of parameters list and optional parameters at the end."
    },
    "Style/Lambda": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: line_count_dependent"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylelambda",
      "description": "This cop (by default) checks for uses of the lambda literal syntax for single line lambdas, and the method call syntax for multiline lambdas. It is configurable to enforce one of the styles for both single line and multiline lambdas as well."
    },
    "Style/LambdaCall": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: call"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylelambdacall",
      "description": "This cop checks for use of the lambda.(args) syntax."
    },
    "Style/LineEndConcatenation": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylelineendconcatenation",
      "description": "This cop checks for string literal concatenation at the end of a line."
    },
    "Style/MethodCallWithoutArgsParentheses": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "IgnoredMethods": {
          "description": "Default: []",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylemethodcallwithoutargsparentheses",
      "description": "This cop checks for unwanted parentheses in parameterless method calls."
    },
    "Style/MethodCallWithArgsParentheses": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "IgnoreMacros": {
          "description": "Default: true",
          "type": "boolean"
        },
        "IgnoredMethods": {
          "description": "Default: []",
          "type": "array"
        },
        "IgnoredPatterns": {
          "description": "Default: []",
          "type": "array"
        },
        "IncludedMacros": {
          "description": "Default: []",
          "type": "array"
        },
        "AllowParenthesesInMultilineCall": {
          "description": "Default: false",
          "type": "boolean"
        },
        "AllowParenthesesInChaining": {
          "description": "Default: false",
          "type": "boolean"
        },
        "AllowParenthesesInCamelCaseMethod": {
          "description": "Default: false",
          "type": "boolean"
        },
        "AllowParenthesesInStringInterpolation": {
          "description": "Default: false",
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: require_parentheses"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylemethodcallwithargsparentheses",
      "description": "This cop enforces the presence (default) or absence of parentheses in method calls containing parameters.\n\nIn the default style (require_parentheses), macro methods are ignored. Additional methods can be added to the IgnoredMethods or IgnoredPatterns list. These options are valid only in the default style. Macros can be included by either setting IgnoreMacros to false or adding specific macros to the IncludedMacros list.\n\nPrecedence of options is all follows:\n\neg. If a method is listed in both IncludedMacros and IgnoredMethods, then the latter takes precedence (that is, the method is ignored).\n\nIn the alternative style (omit_parentheses), there are three additional options."
    },
    "Style/RedundantAssignment": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleredundantassignment",
      "description": "This cop checks for redundant assignment before returning."
    },
    "Style/RedundantFetchBlock": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "SafeForConstants": {
          "description": "Default: false",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleredundantfetchblock",
      "description": "This cop identifies places where fetch(key) { value } can be replaced by fetch(key, value).\n\nIn such cases fetch(key, value) method is faster than fetch(key) { value }."
    },
    "Style/RedundantFileExtensionInRequire": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleredundantfileextensioninrequire",
      "description": "This cop checks for the presence of superfluous .rb extension in the filename provided to require and require_relative.\n\nNote: If the extension is omitted, Ruby tries adding '.rb', '.so', and so on to the name until found. If the file named cannot be found, a LoadError will be raised. There is an edge case where foo.so file is loaded instead of a LoadError if foo.so file exists when require 'foo.rb' will be changed to require 'foo', but that seems harmless."
    },
    "Style/RedundantSelfAssignment": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleredundantselfassignment",
      "description": "This cop checks for places where redundant assignments are made for in place modification methods.\n\nThis cop is marked as unsafe, because it can produce false positives for user defined methods having one of the expected names, but not modifying its receiver in place."
    },
    "Style/SoleNestedConditional": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "AllowModifier": {
          "description": "Default: false",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylesolenestedconditional",
      "description": "If the branch of a conditional consists solely of a conditional node, its conditions can be combined with the conditions of the outer branch. This helps to keep the nesting level from getting too deep."
    },
    "Style/StaticClass": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylestaticclass",
      "description": "This cop checks for places where classes with only class methods can be replaced with a module. Classes should be used only when it makes sense to create instances out of them.\n\nThis cop is marked as unsafe, because it is possible that this class is a parent for some other subclass, monkey-patched with instance methods or a dummy instance is instantiated from it somewhere."
    },
    "Style/MethodCalledOnDoEndBlock": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylemethodcalledondoendblock",
      "description": "This cop checks for methods called on a do…​end block. The point of this check is that it’s easy to miss the call tacked on to the block when reading code."
    },
    "Style/MethodDefParentheses": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: require_parentheses"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylemethoddefparentheses",
      "description": "This cop checks for parentheses around the arguments in method definitions. Both instance and class/singleton methods are checked.\n\nThis cop does not consider endless methods, since parentheses are always required for them."
    },
    "Style/MinMax": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleminmax",
      "description": "This cop checks for potential uses of Enumerable#minmax."
    },
    "Style/MissingElse": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "EnforcedStyle": {
          "description": "Default: both"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylemissingelse",
      "description": "Checks for if expressions that do not have an else branch.\n\nSupported styles are: if, case, both."
    },
    "Style/MissingRespondToMissing": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylemissingrespondtomissing",
      "description": "This cop checks for the presence of method_missing without also defining respond_to_missing?."
    },
    "Style/MixinGrouping": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: separated"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylemixingrouping",
      "description": "This cop checks for grouping of mixins in class and module bodies. By default it enforces mixins to be placed in separate declarations, but it can be configured to enforce grouping them in one declaration."
    },
    "Style/MixinUsage": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylemixinusage",
      "description": "This cop checks that include, extend and prepend statements appear inside classes and modules, not at the top level, so as to not affect the behavior of Object."
    },
    "Style/ModuleFunction": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: module_function"
        },
        "Autocorrect": {
          "description": "Default: false",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylemodulefunction",
      "description": "This cop checks for use of extend self or module_function in a module.\n\nSupported styles are: module_function, extend_self, forbidden.\n\nIn case there are private methods, the cop won’t be activated. Otherwise, it forces to change the flow of the default code.\n\nThe option forbidden prohibits the usage of both styles.\n\nThese offenses are not safe to auto-correct since there are different implications to each approach."
    },
    "Style/MultilineBlockChain": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylemultilineblockchain",
      "description": "This cop checks for chaining of a block after another block that spans multiple lines."
    },
    "Style/MultilineIfThen": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylemultilineifthen",
      "description": "Checks for uses of the then keyword in multi-line if statements."
    },
    "Style/MultilineIfModifier": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylemultilineifmodifier",
      "description": "Checks for uses of if/unless modifiers with multiple-lines bodies."
    },
    "Style/MultilineMethodSignature": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylemultilinemethodsignature",
      "description": "This cop checks for method signatures that span multiple lines."
    },
    "Style/MultilineMemoization": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: keyword"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylemultilinememoization",
      "description": "This cop checks expressions wrapping styles for multiline memoization."
    },
    "Style/MultilineTernaryOperator": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylemultilineternaryoperator",
      "description": "This cop checks for multi-line ternary op expressions."
    },
    "Style/MultilineWhenThen": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylemultilinewhenthen",
      "description": "This cop checks uses of the then keyword in multi-line when statements."
    },
    "Style/MultipleComparison": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylemultiplecomparison",
      "description": "This cop checks against comparing a variable with multiple items, where Array#include?, Set#include? or a case could be used instead to avoid code repetition. It accepts comparisons of multiple method calls to avoid unnecessary method calls by default. It can be configured by AllowMethodComparison option."
    },
    "Style/MutableConstant": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: literals"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylemutableconstant",
      "description": "This cop checks whether some constant value isn’t a mutable literal (e.g. array or hash).\n\nStrict mode can be used to freeze all constants, rather than just literals. Strict mode is considered an experimental feature. It has not been updated with an exhaustive list of all methods that will produce frozen objects so there is a decent chance of getting some false positives. Luckily, there is no harm in freezing an already frozen object."
    },
    "Style/NegatedIf": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: both"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylenegatedif",
      "description": "Checks for uses of if with a negated condition. Only ifs without else are considered. There are three different styles:"
    },
    "Style/NegatedIfElseCondition": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylenegatedifelsecondition",
      "description": "This cop checks for uses of if-else and ternary operators with a negated condition which can be simplified by inverting condition and swapping branches."
    },
    "Style/NegatedUnless": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: both"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylenegatedunless",
      "description": "Checks for uses of unless with a negated condition. Only unless without else are considered. There are three different styles:"
    },
    "Style/NegatedWhile": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylenegatedwhile",
      "description": "Checks for uses of while with a negated condition."
    },
    "Style/NestedModifier": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylenestedmodifier",
      "description": "This cop checks for nested use of if, unless, while and until in their modifier form."
    },
    "Style/NestedParenthesizedCalls": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "AllowedMethods": {
          "description": "Default: be, be_a, be_an, be_between, be_falsey, be_kind_of, be_instance_of, be_truthy, be_within, eq, eql, end_with, include, match, raise_error, respond_to, start_with",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylenestedparenthesizedcalls",
      "description": "This cop checks for unparenthesized method calls in the argument list of a parenthesized method call."
    },
    "Style/NestedTernaryOperator": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylenestedternaryoperator",
      "description": "This cop checks for nested ternary op expressions."
    },
    "Style/Next": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: skip_modifier_ifs"
        },
        "MinBodyLength": {
          "description": "Default: 3",
          "type": "integer"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylenext",
      "description": "Use next to skip iteration instead of a condition at the end."
    },
    "Style/NilComparison": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: predicate"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylenilcomparison",
      "description": "This cop checks for comparison of something with nil using == and nil?.\n\nSupported styles are: predicate, comparison."
    },
    "Style/NilLambda": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylenillambda",
      "description": "This cop checks for lambdas that always return nil, which can be replaced with an empty lambda instead."
    },
    "Style/NonNilCheck": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "IncludeSemanticChanges": {
          "description": "Default: false",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylenonnilcheck",
      "description": "This cop checks for non-nil checks, which are usually redundant.\n\nWith IncludeSemanticChanges set to false by default, this cop does not report offenses for !x.nil? and does no changes that might change behavior. Also IncludeSemanticChanges set to false with EnforcedStyle: comparison of Style/NilComparison cop, this cop does not report offenses for x != nil and does no changes to !x.nil? style.\n\nWith IncludeSemanticChanges set to true, this cop reports offenses for !x.nil? and autocorrects that and x != nil to solely x, which is usually OK, but might change behavior."
    },
    "Style/Not": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylenot",
      "description": "This cop checks for uses of the keyword not instead of !."
    },
    "Style/NumericLiterals": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "MinDigits": {
          "description": "Default: 5",
          "type": "integer"
        },
        "Strict": {
          "description": "Default: false",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylenumericliterals",
      "description": "This cop checks for big numeric literals without _ between groups of digits in them."
    },
    "Style/NumericLiteralPrefix": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedOctalStyle": {
          "description": "Default: zero_with_o"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylenumericliteralprefix",
      "description": "This cop checks for octal, hex, binary, and decimal literals using uppercase prefixes and corrects them to lowercase prefix or no prefix (in case of decimals)."
    },
    "Style/NumericPredicate": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "description": "Default: spec/*/",
          "type": "array"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: predicate"
        },
        "IgnoredMethods": {
          "description": "Default: []",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylenumericpredicate",
      "description": "This cop checks for usage of comparison operators (==, >, <) to test numbers as zero, positive, or negative. These can be replaced by their respective predicate methods. The cop can also be configured to do the reverse.\n\nThe cop disregards #nonzero? as its value is truthy or falsey, but not true and false, and thus not always interchangeable with != 0.\n\nThe cop ignores comparisons to global variables, since they are often populated with objects which can be compared with integers, but are not themselves Integer polymorphic."
    },
    "Style/OneLineConditional": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "AlwaysCorrectToMultiline": {
          "description": "Default: false",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleonelineconditional",
      "description": "Checks for uses of if/then/else/end constructs on a single line. AlwaysCorrectToMultiline config option can be set to true to auto-convert all offenses to multi-line constructs. When AlwaysCorrectToMultiline is false (default case) the auto-correct will first try converting them to ternary operators."
    },
    "Style/OrAssignment": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleorassignment",
      "description": "This cop checks for potential usage of the ||= operator."
    },
    "Style/OptionHash": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "SuspiciousParamNames": {
          "description": "Default: options, opts, args, params, parameters",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleoptionhash",
      "description": "This cop checks for options hashes and discourages them if the current Ruby version supports keyword arguments."
    },
    "Style/OptionalArguments": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleoptionalarguments",
      "description": "This cop checks for optional arguments to methods that do not come at the end of the argument list."
    },
    "Style/OptionalBooleanParameter": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AllowedMethods": {
          "description": "Default: respond_to_missing?",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleoptionalbooleanparameter",
      "description": "This cop checks for places where keyword arguments can be used instead of boolean arguments when defining methods. respond_to_missing? method is allowed by default. These are customizable with AllowedMethods option."
    },
    "Style/ParallelAssignment": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleparallelassignment",
      "description": "Checks for simple usages of parallel assignment. This will only complain when the number of variables being assigned matched the number of assigning variables."
    },
    "Style/ParenthesesAroundCondition": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "AllowSafeAssignment": {
          "description": "Default: true",
          "type": "boolean"
        },
        "AllowInMultilineConditions": {
          "description": "Default: false",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleparenthesesaroundcondition",
      "description": "This cop checks for the presence of superfluous parentheses around the condition of if/unless/while/until.\n\nAllowSafeAssignment option for safe assignment. By safe assignment we mean putting parentheses around an assignment to indicate \"I know I’m using an assignment as a condition. It’s not a mistake.\""
    },
    "Style/PercentLiteralDelimiters": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "PreferredDelimiters": {
          "description": "Default: {\"default\"⇒\"()\", \"%i\"⇒\"[]\", \"%I\"⇒\"[]\", \"%r\"⇒\"{}\", \"%w\"⇒\"[]\", \"%W\"⇒\"[]\"}"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylepercentliteraldelimiters",
      "description": "This cop enforces the consistent usage of %-literal delimiters.\n\nSpecify the 'default' key to set all preferred delimiters at once. You can continue to specify individual preferred delimiters to override the default."
    },
    "Style/PercentQLiterals": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: lower_case_q"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylepercentqliterals",
      "description": "This cop checks for usage of the %Q() syntax when %q() would do."
    },
    "Style/PerlBackrefs": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleperlbackrefs",
      "description": "This cop looks for uses of Perl-style regexp match backreferences and their English versions like $1, $2, $&, &+, $MATCH, $PREMATCH, etc."
    },
    "Style/PreferredHashMethods": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: short"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylepreferredhashmethods",
      "description": "This cop (by default) checks for uses of methods Hash#has_key? and Hash#has_value? where it enforces Hash#key? and Hash#value? It is configurable to enforce the inverse, using verbose method names also."
    },
    "Style/Proc": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleproc",
      "description": "This cop checks for uses of Proc.new where Kernel#proc would be more appropriate."
    },
    "Style/RaiseArgs": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: exploded"
        },
        "AllowedCompactTypes": {
          "description": "Default: []",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleraiseargs",
      "description": "This cop checks the args passed to fail and raise. For exploded style (default), it recommends passing the exception class and message to raise, rather than construct an instance of the error. It will still allow passing just a message, or the construction of an error with more than one argument.\n\nThe exploded style works identically, but with the addition that it will also suggest constructing error objects when the exception is passed multiple arguments.\n\nThe exploded style has an AllowedCompactTypes configuration option that takes an Array of exception name Strings."
    },
    "Style/RandomWithOffset": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylerandomwithoffset",
      "description": "This cop checks for the use of randomly generated numbers, added/subtracted with integer literals, as well as those with Integer#succ and Integer#pred methods. Prefer using ranges instead, as it clearly states the intentions."
    },
    "Style/RedundantArgument": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "Methods": {
          "description": "Default: {\"join\"⇒\"\", \"split\"⇒\" \", \"chomp\"⇒\"\\n\", \"chomp!\"⇒\"\\n\"}"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleredundantargument",
      "description": "This cop checks for a redundant argument passed to certain methods.\n\nLimitations:\n\nMethod names and their redundant arguments can be configured like this:\n\nMethods: join: '' split: ' ' chomp: \"\\n\" chomp!: \"\\n\" foo: 2"
    },
    "Style/RedundantBegin": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleredundantbegin",
      "description": "This cop checks for redundant begin blocks.\n\nCurrently it checks for code like this:"
    },
    "Style/RedundantCapitalW": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleredundantcapitalw",
      "description": "This cop checks for usage of the %W() syntax when %w() would do."
    },
    "Style/RedundantCondition": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleredundantcondition",
      "description": "This cop checks for unnecessary conditional expressions."
    },
    "Style/RedundantConditional": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleredundantconditional",
      "description": "This cop checks for redundant returning of true/false in conditionals."
    },
    "Style/RedundantException": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleredundantexception",
      "description": "This cop checks for RuntimeError as the argument of raise/fail.\n\nIt checks for code like this:"
    },
    "Style/RedundantFreeze": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleredundantfreeze",
      "description": "This cop check for uses of Object#freeze on immutable objects."
    },
    "Style/RedundantInterpolation": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleredundantinterpolation",
      "description": "This cop checks for strings that are just an interpolated expression."
    },
    "Style/RedundantParentheses": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleredundantparentheses",
      "description": "This cop checks for redundant parentheses."
    },
    "Style/RedundantPercentQ": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleredundantpercentq",
      "description": "This cop checks for usage of the %q/%Q syntax when '' or \"\" would do."
    },
    "Style/RedundantRegexpCharacterClass": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleredundantregexpcharacterclass",
      "description": "This cop checks for unnecessary single-element Regexp character classes."
    },
    "Style/RedundantRegexpEscape": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleredundantregexpescape",
      "description": "This cop checks for redundant escapes inside Regexp literals."
    },
    "Style/RedundantReturn": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "AllowMultipleReturnValues": {
          "description": "Default: false",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleredundantreturn",
      "description": "This cop checks for redundant return expressions."
    },
    "Style/RedundantSelf": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleredundantself",
      "description": "This cop checks for redundant uses of self.\n\nThe usage of self is only needed when:\n\nNote, with using explicit self you can only send messages with public or protected scope, you cannot send private messages this way.\n\nNote we allow uses of self with operators because it would be awkward otherwise."
    },
    "Style/RedundantSort": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleredundantsort",
      "description": "This cop is used to identify instances of sorting and then taking only the first or last element. The same behavior can be accomplished without a relatively expensive sort by using Enumerable#min instead of sorting and taking the first element and Enumerable#max instead of sorting and taking the last element. Similarly, Enumerable#min_by and Enumerable#max_by can replace Enumerable#sort_by calls after which only the first or last element is used."
    },
    "Style/RedundantSortBy": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleredundantsortby",
      "description": "This cop identifies places where sort_by { …​ } can be replaced by sort."
    },
    "Style/RegexpLiteral": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: slashes"
        },
        "AllowInnerSlashes": {
          "description": "Default: false",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleregexpliteral",
      "description": "This cop enforces using // or %r around regular expressions."
    },
    "Style/RescueModifier": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylerescuemodifier",
      "description": "This cop checks for uses of rescue in its modifier form.\n\nThe cop to check rescue in its modifier form is added for following reasons:"
    },
    "Style/RescueStandardError": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: explicit"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylerescuestandarderror",
      "description": "This cop checks for rescuing StandardError. There are two supported styles implicit and explicit. This cop will not register an offense if any error other than StandardError is specified."
    },
    "Style/ReturnNil": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: return"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylereturnnil",
      "description": "This cop enforces consistency between 'return nil' and 'return'.\n\nSupported styles are: return, return_nil."
    },
    "Style/SafeNavigation": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "ConvertCodeThatCanStartToReturnNil": {
          "description": "Default: false",
          "type": "boolean"
        },
        "AllowedMethods": {
          "description": "Default: present?, blank?, presence, try, try!",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylesafenavigation",
      "description": "This cop transforms usages of a method call safeguarded by a non nil check for the variable whose method is being called to safe navigation (&.). If there is a method chain, all of the methods in the chain need to be checked for safety, and all of the methods will need to be changed to use safe navigation. We have limited the cop to not register an offense for method chains that exceed 2 methods.\n\nConfiguration option: ConvertCodeThatCanStartToReturnNil The default for this is false. When configured to true, this will check for code in the format !foo.nil? && foo.bar. As it is written, the return of this code is limited to false and whatever the return of the method is. If this is converted to safe navigation, foo&.bar can start returning nil as well as what the method returns."
    },
    "Style/Sample": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylesample",
      "description": "This cop is used to identify usages of shuffle.first, shuffle.last, and shuffle[] and change them to use sample instead."
    },
    "Style/SelfAssignment": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleselfassignment",
      "description": "This cop enforces the use the shorthand for self-assignment."
    },
    "Style/Semicolon": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "AllowAsExpressionSeparator": {
          "description": "Default: false",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylesemicolon",
      "description": "This cop checks for multiple expressions placed on the same line. It also checks for lines terminated with a semicolon.\n\nThis cop has AllowAsExpressionSeparator configuration option. It allows ; to separate several expressions on the same line."
    },
    "Style/Send": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylesend",
      "description": "This cop checks for the use of the send method."
    },
    "Style/SignalException": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: only_raise"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylesignalexception",
      "description": "This cop checks for uses of fail and raise."
    },
    "Style/SingleArgumentDig": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylesingleargumentdig",
      "description": "Sometimes using dig method ends up with just a single argument. In such cases, dig should be replaced with []."
    },
    "Style/SingleLineBlockParams": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "Methods": {
          "description": "Default: {\"reduce\"⇒[\"acc\", \"elem\"]}, {\"inject\"⇒[\"acc\", \"elem\"]}",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylesinglelineblockparams",
      "description": "This cop checks whether the block parameters of a single-line method accepting a block match the names specified via configuration.\n\nFor instance one can configure reduce(inject) to use |a, e| as parameters.\n\nConfiguration option: Methods Should be set to use this cop. Array of hashes, where each key is the method name and value - array of argument names."
    },
    "Style/SingleLineMethods": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "AllowIfMethodIsEmpty": {
          "description": "Default: true",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylesinglelinemethods",
      "description": "This cop checks for single-line method definitions that contain a body. It will accept single-line methods with no body.\n\nEndless methods added in Ruby 3.0 are also accepted by this cop.\n\nIf Style/EndlessMethod is enabled with EnforcedStyle: allow_single_line or allow_always, single-line methods will be auto-corrected to endless methods if there is only one statement in the body."
    },
    "Style/SlicingWithRange": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleslicingwithrange",
      "description": "This cop checks that arrays are sliced with endless ranges instead of ary[start..-1] on Ruby 2.6+."
    },
    "Style/SpecialGlobalVars": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: use_english_names"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylespecialglobalvars",
      "description": "This cop looks for uses of Perl-style global variables."
    },
    "Style/StabbyLambdaParentheses": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: require_parentheses"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylestabbylambdaparentheses",
      "description": "Check for parentheses around stabby lambda arguments. There are two different styles. Defaults to require_parentheses."
    },
    "Style/StderrPuts": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylestderrputs",
      "description": "This cop identifies places where $stderr.puts can be replaced by warn. The latter has the advantage of easily being disabled by, the -W0 interpreter flag or setting $VERBOSE to nil."
    },
    "Style/StringChars": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylestringchars",
      "description": "Checks for uses of String#split with empty string or regexp literal argument.\n\nThis cop is marked as unsafe. But probably it’s quite unlikely that some other class would define a split method that takes exactly the same arguments."
    },
    "Style/StringConcatenation": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylestringconcatenation",
      "description": "This cop checks for places where string concatenation can be replaced with string interpolation.\n\nThe cop can autocorrect simple cases but will skip autocorrecting more complex cases where the resulting code would be harder to read. In those cases, it might be useful to extract statements to local variables or methods which you can then interpolate in a string."
    },
    "Style/StringHashKeys": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylestringhashkeys",
      "description": "This cop checks for the use of strings as keys in hashes. The use of symbols is preferred instead."
    },
    "Style/StringLiterals": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: single_quotes"
        },
        "ConsistentQuotesInMultiline": {
          "description": "Default: false",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylestringliterals",
      "description": "Checks if uses of quotes match the configured preference."
    },
    "Style/StringLiteralsInInterpolation": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: single_quotes"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylestringliteralsininterpolation",
      "description": "This cop checks that quotes inside the string interpolation match the configured preference."
    },
    "Style/StringMethods": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "PreferredMethods": {
          "description": "Default: {\"intern\"⇒\"to_sym\"}"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylestringmethods",
      "description": "This cop enforces the use of consistent method names from the String class."
    },
    "Style/Strip": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylestrip",
      "description": "This cop identifies places where lstrip.rstrip can be replaced by strip."
    },
    "Style/StructInheritance": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylestructinheritance",
      "description": "This cop checks for inheritance from Struct.new."
    },
    "Style/SwapValues": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleswapvalues",
      "description": "This cop enforces the use of shorthand-style swapping of 2 variables. Its autocorrection is marked as unsafe, because it can erroneously remove the temporary variable which is used later."
    },
    "Style/SymbolArray": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: percent"
        },
        "MinSize": {
          "description": "Default: 2",
          "type": "integer"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylesymbolarray",
      "description": "This cop can check for array literals made up of symbols that are not using the %i() syntax.\n\nAlternatively, it checks for symbol arrays using the %i() syntax on projects which do not want to use that syntax.\n\nConfiguration option: MinSize If set, arrays with fewer elements than this value will not trigger the cop. For example, a MinSize of 3 will not enforce a style on an array of 2 or fewer elements."
    },
    "Style/SymbolLiteral": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylesymbolliteral",
      "description": "This cop checks symbol literal syntax."
    },
    "Style/SymbolProc": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "AllowMethodsWithArguments": {
          "description": "Default: false",
          "type": "boolean"
        },
        "IgnoredMethods": {
          "description": "Default: respond_to, define_method",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylesymbolproc",
      "description": "Use symbols as procs when possible.\n\nIf you prefer a style that allows block for method with arguments, please set true to AllowMethodsWithArguments."
    },
    "Style/TernaryParentheses": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: require_no_parentheses"
        },
        "AllowSafeAssignment": {
          "description": "Default: true",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleternaryparentheses",
      "description": "This cop checks for the presence of parentheses around ternary conditions. It is configurable to enforce inclusion or omission of parentheses using EnforcedStyle. Omission is only enforced when removing the parentheses won’t cause a different behavior.\n\nAllowSafeAssignment option for safe assignment. By safe assignment we mean putting parentheses around an assignment to indicate \"I know I’m using an assignment as a condition. It’s not a mistake.\""
    },
    "Style/TrailingBodyOnClass": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styletrailingbodyonclass",
      "description": "This cop checks for trailing code after the class definition."
    },
    "Style/TrailingBodyOnMethodDefinition": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styletrailingbodyonmethoddefinition",
      "description": "This cop checks for trailing code after the method definition."
    },
    "Style/TrailingBodyOnModule": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styletrailingbodyonmodule",
      "description": "This cop checks for trailing code after the module definition."
    },
    "Style/TrailingCommaInArguments": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyleForMultiline": {
          "description": "Default: no_comma"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styletrailingcommainarguments",
      "description": "This cop checks for trailing comma in argument lists. The supported styles are:"
    },
    "Style/TrailingCommaInArrayLiteral": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyleForMultiline": {
          "description": "Default: no_comma"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styletrailingcommainarrayliteral",
      "description": "This cop checks for trailing comma in array literals. The configuration options are:"
    },
    "Style/TrailingCommaInBlockArgs": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styletrailingcommainblockargs",
      "description": "This cop checks whether trailing commas in block arguments are required. Blocks with only one argument and a trailing comma require that comma to be present. Blocks with more than one argument never require a trailing comma."
    },
    "Style/TrailingCommaInHashLiteral": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyleForMultiline": {
          "description": "Default: no_comma"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styletrailingcommainhashliteral",
      "description": "This cop checks for trailing comma in hash literals. The configuration options are:"
    },
    "Style/TrailingMethodEndStatement": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styletrailingmethodendstatement",
      "description": "This cop checks for trailing code after the method definition."
    },
    "Style/TrailingUnderscoreVariable": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "AllowNamedUnderscoreVariables": {
          "description": "Default: true",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styletrailingunderscorevariable",
      "description": "This cop checks for extra underscores in variable assignment."
    },
    "Style/TrivialAccessors": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "ExactNameMatch": {
          "description": "Default: true",
          "type": "boolean"
        },
        "AllowPredicates": {
          "description": "Default: true",
          "type": "boolean"
        },
        "AllowDSLWriters": {
          "description": "Default: false",
          "type": "boolean"
        },
        "IgnoreClassMethods": {
          "description": "Default: false",
          "type": "boolean"
        },
        "AllowedMethods": {
          "description": "Default: to_ary, to_a, to_c, to_enum, to_h, to_hash, to_i, to_int, to_io, to_open, to_path, to_proc, to_r, to_regexp, to_str, to_s, to_sym",
          "type": "array"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styletrivialaccessors",
      "description": "This cop looks for trivial reader/writer methods, that could have been created with the attr_* family of functions automatically."
    },
    "Style/UnlessElse": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleunlesselse",
      "description": "This cop looks for unless expressions with else clauses."
    },
    "Style/UnlessLogicalOperators": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "EnforcedStyle": {
          "description": "Default: forbid_mixed_logical_operators"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleunlesslogicaloperators",
      "description": "This cop checks for the use of logical operators in an unless condition. It discourages such code, as the condition becomes more difficult to read and understand.\n\nThis cop supports two styles: - forbid_mixed_logical_operators (default) - forbid_logical_operators\n\nforbid_mixed_logical_operators style forbids the use of more than one type of logical operators. This makes the unless condition easier to read because either all conditions need to be met or any condition need to be met in order for the expression to be truthy or falsey.\n\nforbid_logical_operators style forbids any use of logical operator. This makes it even more easy to read the unless condition as there is only one condition in the expression."
    },
    "Style/UnpackFirst": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleunpackfirst",
      "description": "This cop checks for accessing the first element of String#unpack which can be replaced with the shorter method unpack1."
    },
    "Style/VariableInterpolation": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylevariableinterpolation",
      "description": "This cop checks for variable interpolation (like \"#@ivar\")."
    },
    "Style/WhenThen": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylewhenthen",
      "description": "This cop checks for when; uses in case expressions."
    },
    "Style/WhileUntilDo": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylewhileuntildo",
      "description": "Checks for uses of do in multi-line while/until statements."
    },
    "Style/WhileUntilModifier": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylewhileuntilmodifier",
      "description": "Checks for while and until statements that would fit on one line if written as a modifier while/until. The maximum line length is configured in the Layout/LineLength cop."
    },
    "Style/WordArray": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: percent"
        },
        "MinSize": {
          "description": "Default: 2",
          "type": "integer"
        },
        "WordRegex": {
          "description": "Default: `(?-mix:\\A(?:\\p{Word}"
        },
        "\\n": {
          "description": "Default: \\t)+\\z)`"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylewordarray",
      "description": "This cop can check for array literals made up of word-like strings, that are not using the %w() syntax.\n\nAlternatively, it can check for uses of the %w() syntax, in projects which do not want to include that syntax.\n\nConfiguration option: MinSize If set, arrays with fewer elements than this value will not trigger the cop. For example, a MinSize of 3 will not enforce a style on an array of 2 or fewer elements."
    },
    "Style/YodaCondition": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        },
        "EnforcedStyle": {
          "description": "Default: forbid_for_all_comparison_operators"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#styleyodacondition",
      "description": "This cop can either enforce or forbid Yoda conditions, i.e. comparison operations where the order of expression is reversed. eg. 5 == x"
    },
    "Style/ZeroLengthPredicate": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_style.html#stylezerolengthpredicate",
      "description": "This cop checks for numeric comparisons that can be replaced by a predicate method, such as receiver.length == 0, receiver.length > 0, receiver.length != 0, receiver.length < 1 and receiver.size == 0 that can be replaced by receiver.empty? and !receiver.empty?."
    },
    "Security/Eval": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_security.html#securityeval",
      "description": "This cop checks for the use of Kernel#eval and Binding#eval."
    },
    "Security/JSONLoad": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "description": "Default: false",
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_security.html#securityjsonload",
      "description": "This cop checks for the use of JSON class methods which have potential security issues.\n\nAutocorrect is disabled by default because it’s potentially dangerous. If using a stream, like JSON.load(open('file')), it will need to call #read manually, like JSON.parse(open('file').read). If reading single values (rather than proper JSON objects), like JSON.load('false'), it will need to pass the quirks_mode: true option, like JSON.parse('false', quirks_mode: true). Other similar issues may apply."
    },
    "Security/MarshalLoad": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_security.html#securitymarshalload",
      "description": "This cop checks for the use of Marshal class methods which have potential security issues leading to remote code execution when loading from an untrusted source."
    },
    "Security/Open": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_security.html#securityopen",
      "description": "This cop checks for the use of Kernel#open and URI.open.\n\nKernel#open and URI.open enable not only file access but also process invocation by prefixing a pipe symbol (e.g., open(\"| ls\")). So, it may lead to a serious security risk by using variable input to the argument of Kernel#open and URI.open. It would be better to use File.open, IO.popen or URI.parse#open explicitly."
    },
    "Security/YAMLLoad": {
      "type": "object",
      "additionalProperties": true,
      "propertyNames": {
        "type": "string",
        "pattern": "^[A-Z][A-Za-z]*$"
      },
      "properties": {
        "Enabled": {
          "type": "boolean"
        },
        "Exclude": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Include": {
          "$ref": "#/definitions/listOfFiles"
        },
        "Severity": {
          "$ref": "#/definitions/severity"
        },
        "Details": {
          "type": "string"
        },
        "StyleGuideBaseURL": {
          "type": "string"
        },
        "StyleGuide": {
          "type": "string"
        },
        "AutoCorrect": {
          "type": "boolean"
        }
      },
      "$comment": "https://docs.rubocop.org/rubocop/cops_security.html#securityyamlload",
      "description": "This cop checks for the use of YAML class methods which have potential security issues leading to remote code execution when loading from an untrusted source."
    }
  }
}
